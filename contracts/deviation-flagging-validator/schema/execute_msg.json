{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "anyOf": [
    {
      "description": "Initiate contract ownership transfer to another address. Can be used only by owner",
      "type": "object",
      "required": [
        "transfer_ownership"
      ],
      "properties": {
        "transfer_ownership": {
          "type": "object",
          "required": [
            "to"
          ],
          "properties": {
            "to": {
              "description": "Address to transfer ownership to",
              "allOf": [
                {
                  "$ref": "#/definitions/Addr"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Finish contract ownership transfer. Can be used only by pending owner",
      "type": "object",
      "required": [
        "accept_ownership"
      ],
      "properties": {
        "accept_ownership": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Updates the flagging threshold Can be used only by owner",
      "type": "object",
      "required": [
        "set_flagging_threshold"
      ],
      "properties": {
        "set_flagging_threshold": {
          "type": "object",
          "required": [
            "threshold"
          ],
          "properties": {
            "threshold": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Updates the flagging contract address for raising flags Can be used only by owner",
      "type": "object",
      "required": [
        "set_flags_address"
      ],
      "properties": {
        "set_flags_address": {
          "type": "object",
          "required": [
            "flags"
          ],
          "properties": {
            "flags": {
              "$ref": "#/definitions/Addr"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Checks whether the parameters count as valid by comparing the difference change to the flagging threshold",
      "type": "object",
      "required": [
        "validate"
      ],
      "properties": {
        "validate": {
          "type": "object",
          "required": [
            "answer",
            "previous_answer",
            "previous_round_id",
            "round_id"
          ],
          "properties": {
            "answer": {
              "description": "Current answer which is compared for a ration of change to make sure it has not exceeded the flagging threshold",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "previous_answer": {
              "description": "Previous answer, used as the median of difference with the current answer to determine if the deviation threshold has been exceeded",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "previous_round_id": {
              "description": "ID of the previous round",
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "round_id": {
              "description": "ID of the current round",
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}

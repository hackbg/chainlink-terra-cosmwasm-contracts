{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "RoundDetails",
  "type": "object",
  "required": [
    "max_submissions",
    "min_submissions",
    "payment_amount",
    "submissions",
    "timeout"
  ],
  "properties": {
    "max_submissions": {
      "type": "integer",
      "format": "uint32",
      "minimum": 0.0
    },
    "min_submissions": {
      "type": "integer",
      "format": "uint32",
      "minimum": 0.0
    },
    "payment_amount": {
      "$ref": "#/definitions/Uint128"
    },
    "submissions": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Uint128"
      }
    },
    "timeout": {
      "type": "integer",
      "format": "uint32",
      "minimum": 0.0
    }
  },
  "definitions": {
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}

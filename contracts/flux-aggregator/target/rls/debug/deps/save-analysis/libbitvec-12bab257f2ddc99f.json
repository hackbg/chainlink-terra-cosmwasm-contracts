{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5","program":"/home/denis/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","bitvec","--edition=2018","/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=12bab257f2ddc99f","-C","extra-filename=-12bab257f2ddc99f","--out-dir","/home/denis/Documents/coding/hack/chainlink-terra-cosmwasm-contracts/contracts/flux-aggregator/target/rls/debug/deps","-C","linker=x86_64-linux-gnu-gcc","-L","dependency=/home/denis/Documents/coding/hack/chainlink-terra-cosmwasm-contracts/contracts/flux-aggregator/target/rls/debug/deps","--extern","funty=/home/denis/Documents/coding/hack/chainlink-terra-cosmwasm-contracts/contracts/flux-aggregator/target/rls/debug/deps/libfunty-fc92b189a9fd60fd.rmeta","--extern","radium=/home/denis/Documents/coding/hack/chainlink-terra-cosmwasm-contracts/contracts/flux-aggregator/target/rls/debug/deps/libradium-22d33324d5902304.rmeta","--extern","wyz=/home/denis/Documents/coding/hack/chainlink-terra-cosmwasm-contracts/contracts/flux-aggregator/target/rls/debug/deps/libwyz-ebd3b61dbaf1744f.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/denis/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":"/home/denis/Documents/coding/hack/chainlink-terra-cosmwasm-contracts/contracts/flux-aggregator/target/rls/debug/deps/libbitvec-12bab257f2ddc99f.rmeta"},"prelude":{"crate_id":{"name":"bitvec","disambiguator":[12843394802284785757,18049944760944282035]},"crate_root":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src","external_crates":[{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[17044353007700780372,2918200604221815240]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[16381423150204372411,13484601183843768894]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[14897589902885170584,12420159477491062790]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/access.rs","num":4,"id":{"name":"radium","disambiguator":[6170578490148099913,11385662121544404573]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","num":5,"id":{"name":"wyz","disambiguator":[14075336805396516078,8175419829704857618]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/mem.rs","num":6,"id":{"name":"funty","disambiguator":[18100334673436176153,12213058834818999383]}}],"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/lib.rs","byte_start":0,"byte_end":6531,"line_start":1,"line_end":184,"column_start":1,"column_end":12}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":13},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/macros/internal.rs","byte_start":33377,"byte_end":33392,"line_start":431,"line_end":431,"column_start":15,"column_end":30},"alias_span":null,"name":"u8_from_ne_bits","value":"","parent":{"krate":0,"index":5}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/prelude.rs","byte_start":191602,"byte_end":191603,"line_start":38,"line_end":38,"column_start":11,"column_end":12},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":994}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/prelude.rs","byte_start":191622,"byte_end":191623,"line_start":39,"line_end":39,"column_start":18,"column_end":19},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":994}},{"kind":"Use","ref_id":{"krate":0,"index":2291},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/prelude.rs","byte_start":191657,"byte_end":191665,"line_start":43,"line_end":43,"column_start":10,"column_end":18},"alias_span":null,"name":"BitArray","value":"","parent":{"krate":0,"index":994}},{"kind":"Use","ref_id":{"krate":0,"index":840},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/prelude.rs","byte_start":191681,"byte_end":191690,"line_start":45,"line_end":45,"column_start":4,"column_end":13},"alias_span":null,"name":"LocalBits","value":"","parent":{"krate":0,"index":994}},{"kind":"Use","ref_id":{"krate":0,"index":2647},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/prelude.rs","byte_start":191695,"byte_end":191699,"line_start":46,"line_end":46,"column_start":4,"column_end":8},"alias_span":null,"name":"Lsb0","value":"","parent":{"krate":0,"index":994}},{"kind":"Use","ref_id":{"krate":0,"index":2648},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/prelude.rs","byte_start":191695,"byte_end":191699,"line_start":46,"line_end":46,"column_start":4,"column_end":8},"alias_span":null,"name":"Lsb0","value":"","parent":{"krate":0,"index":994}},{"kind":"Use","ref_id":{"krate":0,"index":2625},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/prelude.rs","byte_start":191704,"byte_end":191708,"line_start":47,"line_end":47,"column_start":4,"column_end":8},"alias_span":null,"name":"Msb0","value":"","parent":{"krate":0,"index":994}},{"kind":"Use","ref_id":{"krate":0,"index":2626},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/prelude.rs","byte_start":191704,"byte_end":191708,"line_start":47,"line_end":47,"column_start":4,"column_end":8},"alias_span":null,"name":"Msb0","value":"","parent":{"krate":0,"index":994}},{"kind":"Use","ref_id":{"krate":0,"index":1145},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/prelude.rs","byte_start":191724,"byte_end":191732,"line_start":49,"line_end":49,"column_start":10,"column_end":18},"alias_span":null,"name":"BitSlice","value":"","parent":{"krate":0,"index":994}},{"kind":"Use","ref_id":{"krate":0,"index":19},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/prelude.rs","byte_start":191901,"byte_end":191907,"line_start":62,"line_end":62,"column_start":3,"column_end":9},"alias_span":null,"name":"bitarr","value":"","parent":{"krate":0,"index":1015}},{"kind":"Use","ref_id":{"krate":0,"index":18},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/prelude.rs","byte_start":191911,"byte_end":191915,"line_start":63,"line_end":63,"column_start":3,"column_end":7},"alias_span":null,"name":"bits","value":"","parent":{"krate":0,"index":1015}},{"kind":"Use","ref_id":{"krate":0,"index":558},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/prelude.rs","byte_start":192079,"byte_end":192087,"line_start":76,"line_end":76,"column_start":10,"column_end":18},"alias_span":null,"name":"BitField","value":"","parent":{"krate":0,"index":1023}},{"kind":"Use","ref_id":{"krate":0,"index":776},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/prelude.rs","byte_start":192096,"byte_end":192105,"line_start":77,"line_end":77,"column_start":8,"column_end":17},"alias_span":null,"name":"BitMemory","value":"","parent":{"krate":0,"index":1023}},{"kind":"Use","ref_id":{"krate":0,"index":813},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/prelude.rs","byte_start":192116,"byte_end":192124,"line_start":78,"line_end":78,"column_start":10,"column_end":18},"alias_span":null,"name":"BitOrder","value":"","parent":{"krate":0,"index":1023}},{"kind":"Use","ref_id":{"krate":0,"index":2129},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/prelude.rs","byte_start":192135,"byte_end":192143,"line_start":79,"line_end":79,"column_start":10,"column_end":18},"alias_span":null,"name":"BitStore","value":"","parent":{"krate":0,"index":1023}},{"kind":"Use","ref_id":{"krate":0,"index":2173},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/prelude.rs","byte_start":192153,"byte_end":192160,"line_start":80,"line_end":80,"column_start":9,"column_end":16},"alias_span":null,"name":"BitView","value":"","parent":{"krate":0,"index":1023}},{"kind":"Use","ref_id":{"krate":0,"index":558},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/prelude.rs","byte_start":192287,"byte_end":192295,"line_start":87,"line_end":87,"column_start":10,"column_end":18},"alias_span":null,"name":"_","value":"","parent":{"krate":0,"index":1040}},{"kind":"Use","ref_id":{"krate":0,"index":2173},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/prelude.rs","byte_start":192310,"byte_end":192317,"line_start":88,"line_end":88,"column_start":9,"column_end":16},"alias_span":null,"name":"_","value":"","parent":{"krate":0,"index":1040}},{"kind":"Use","ref_id":{"krate":0,"index":2291},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/prelude.rs","byte_start":192418,"byte_end":192426,"line_start":95,"line_end":95,"column_start":10,"column_end":18},"alias_span":null,"name":"BitArray","value":"","parent":{"krate":0,"index":1048}},{"kind":"Use","ref_id":{"krate":0,"index":2323},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/prelude.rs","byte_start":192443,"byte_end":192452,"line_start":97,"line_end":97,"column_start":4,"column_end":13},"alias_span":null,"name":"BitDomain","value":"","parent":{"krate":0,"index":1048}},{"kind":"Use","ref_id":{"krate":0,"index":2353},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/prelude.rs","byte_start":192457,"byte_end":192469,"line_start":98,"line_end":98,"column_start":4,"column_end":16},"alias_span":null,"name":"BitDomainMut","value":"","parent":{"krate":0,"index":1048}},{"kind":"Use","ref_id":{"krate":0,"index":840},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/prelude.rs","byte_start":192490,"byte_end":192499,"line_start":101,"line_end":101,"column_start":4,"column_end":13},"alias_span":null,"name":"LocalBits","value":"","parent":{"krate":0,"index":1048}},{"kind":"Use","ref_id":{"krate":0,"index":2647},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/prelude.rs","byte_start":192504,"byte_end":192508,"line_start":102,"line_end":102,"column_start":4,"column_end":8},"alias_span":null,"name":"Lsb0","value":"","parent":{"krate":0,"index":1048}},{"kind":"Use","ref_id":{"krate":0,"index":2648},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/prelude.rs","byte_start":192504,"byte_end":192508,"line_start":102,"line_end":102,"column_start":4,"column_end":8},"alias_span":null,"name":"Lsb0","value":"","parent":{"krate":0,"index":1048}},{"kind":"Use","ref_id":{"krate":0,"index":2625},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/prelude.rs","byte_start":192513,"byte_end":192517,"line_start":103,"line_end":103,"column_start":4,"column_end":8},"alias_span":null,"name":"Msb0","value":"","parent":{"krate":0,"index":1048}},{"kind":"Use","ref_id":{"krate":0,"index":2626},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/prelude.rs","byte_start":192513,"byte_end":192517,"line_start":103,"line_end":103,"column_start":4,"column_end":8},"alias_span":null,"name":"Msb0","value":"","parent":{"krate":0,"index":1048}},{"kind":"Use","ref_id":{"krate":0,"index":1145},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/prelude.rs","byte_start":192533,"byte_end":192541,"line_start":105,"line_end":105,"column_start":10,"column_end":18},"alias_span":null,"name":"BitSlice","value":"","parent":{"krate":0,"index":1048}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/prelude.rs","byte_start":192648,"byte_end":192649,"line_start":115,"line_end":115,"column_start":17,"column_end":18},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":993}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/prelude.rs","byte_start":192667,"byte_end":192668,"line_start":116,"line_end":116,"column_start":17,"column_end":18},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":993}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/prelude.rs","byte_start":192685,"byte_end":192686,"line_start":117,"line_end":117,"column_start":16,"column_end":17},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":993}},{"kind":"Use","ref_id":{"krate":0,"index":1440},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":255987,"byte_end":255995,"line_start":2017,"line_end":2017,"column_start":3,"column_end":11},"alias_span":null,"name":"from_mut","value":"","parent":{"krate":0,"index":1076}},{"kind":"Use","ref_id":{"krate":0,"index":1443},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":255999,"byte_end":256013,"line_start":2018,"line_end":2018,"column_start":3,"column_end":17},"alias_span":null,"name":"from_raw_parts","value":"","parent":{"krate":0,"index":1076}},{"kind":"Use","ref_id":{"krate":0,"index":1448},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":256017,"byte_end":256035,"line_start":2019,"line_end":2019,"column_start":3,"column_end":21},"alias_span":null,"name":"from_raw_parts_mut","value":"","parent":{"krate":0,"index":1076}},{"kind":"Use","ref_id":{"krate":0,"index":1437},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":256039,"byte_end":256047,"line_start":2020,"line_end":2020,"column_start":3,"column_end":11},"alias_span":null,"name":"from_ref","value":"","parent":{"krate":0,"index":1076}},{"kind":"Use","ref_id":{"krate":0,"index":1453},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":256051,"byte_end":256064,"line_start":2021,"line_end":2021,"column_start":3,"column_end":16},"alias_span":null,"name":"BitSliceIndex","value":"","parent":{"krate":0,"index":1076}},{"kind":"Use","ref_id":{"krate":0,"index":2924},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":256081,"byte_end":256087,"line_start":2024,"line_end":2024,"column_start":3,"column_end":9},"alias_span":null,"name":"Chunks","value":"","parent":{"krate":0,"index":1076}},{"kind":"Use","ref_id":{"krate":0,"index":2997},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":256091,"byte_end":256102,"line_start":2025,"line_end":2025,"column_start":3,"column_end":14},"alias_span":null,"name":"ChunksExact","value":"","parent":{"krate":0,"index":1076}},{"kind":"Use","ref_id":{"krate":0,"index":3037},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":256106,"byte_end":256120,"line_start":2026,"line_end":2026,"column_start":3,"column_end":17},"alias_span":null,"name":"ChunksExactMut","value":"","parent":{"krate":0,"index":1076}},{"kind":"Use","ref_id":{"krate":0,"index":2963},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":256124,"byte_end":256133,"line_start":2027,"line_end":2027,"column_start":3,"column_end":12},"alias_span":null,"name":"ChunksMut","value":"","parent":{"krate":0,"index":1076}},{"kind":"Use","ref_id":{"krate":0,"index":2787},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":256137,"byte_end":256141,"line_start":2028,"line_end":2028,"column_start":3,"column_end":7},"alias_span":null,"name":"Iter","value":"","parent":{"krate":0,"index":1076}},{"kind":"Use","ref_id":{"krate":0,"index":2801},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":256145,"byte_end":256152,"line_start":2029,"line_end":2029,"column_start":3,"column_end":10},"alias_span":null,"name":"IterMut","value":"","parent":{"krate":0,"index":1076}},{"kind":"Use","ref_id":{"krate":0,"index":3072},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":256156,"byte_end":256163,"line_start":2030,"line_end":2030,"column_start":3,"column_end":10},"alias_span":null,"name":"RChunks","value":"","parent":{"krate":0,"index":1076}},{"kind":"Use","ref_id":{"krate":0,"index":3145},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":256167,"byte_end":256179,"line_start":2031,"line_end":2031,"column_start":3,"column_end":15},"alias_span":null,"name":"RChunksExact","value":"","parent":{"krate":0,"index":1076}},{"kind":"Use","ref_id":{"krate":0,"index":3185},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":256183,"byte_end":256198,"line_start":2032,"line_end":2032,"column_start":3,"column_end":18},"alias_span":null,"name":"RChunksExactMut","value":"","parent":{"krate":0,"index":1076}},{"kind":"Use","ref_id":{"krate":0,"index":3111},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":256202,"byte_end":256212,"line_start":2033,"line_end":2033,"column_start":3,"column_end":13},"alias_span":null,"name":"RChunksMut","value":"","parent":{"krate":0,"index":1076}},{"kind":"Use","ref_id":{"krate":0,"index":3335},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":256216,"byte_end":256222,"line_start":2034,"line_end":2034,"column_start":3,"column_end":9},"alias_span":null,"name":"RSplit","value":"","parent":{"krate":0,"index":1076}},{"kind":"Use","ref_id":{"krate":0,"index":1622},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":256226,"byte_end":256235,"line_start":2035,"line_end":2035,"column_start":3,"column_end":12},"alias_span":null,"name":"RSplitMut","value":"","parent":{"krate":0,"index":1076}},{"kind":"Use","ref_id":{"krate":0,"index":1646},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":256239,"byte_end":256246,"line_start":2036,"line_end":2036,"column_start":3,"column_end":10},"alias_span":null,"name":"RSplitN","value":"","parent":{"krate":0,"index":1076}},{"kind":"Use","ref_id":{"krate":0,"index":1653},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":256250,"byte_end":256260,"line_start":2037,"line_end":2037,"column_start":3,"column_end":13},"alias_span":null,"name":"RSplitNMut","value":"","parent":{"krate":0,"index":1076}},{"kind":"Use","ref_id":{"krate":0,"index":3245},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":256264,"byte_end":256269,"line_start":2038,"line_end":2038,"column_start":3,"column_end":8},"alias_span":null,"name":"Split","value":"","parent":{"krate":0,"index":1076}},{"kind":"Use","ref_id":{"krate":0,"index":1614},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":256273,"byte_end":256281,"line_start":2039,"line_end":2039,"column_start":3,"column_end":11},"alias_span":null,"name":"SplitMut","value":"","parent":{"krate":0,"index":1076}},{"kind":"Use","ref_id":{"krate":0,"index":1632},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":256285,"byte_end":256291,"line_start":2040,"line_end":2040,"column_start":3,"column_end":9},"alias_span":null,"name":"SplitN","value":"","parent":{"krate":0,"index":1076}},{"kind":"Use","ref_id":{"krate":0,"index":1639},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":256295,"byte_end":256304,"line_start":2041,"line_end":2041,"column_start":3,"column_end":12},"alias_span":null,"name":"SplitNMut","value":"","parent":{"krate":0,"index":1076}},{"kind":"Use","ref_id":{"krate":0,"index":2885},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":256308,"byte_end":256315,"line_start":2042,"line_end":2042,"column_start":3,"column_end":10},"alias_span":null,"name":"Windows","value":"","parent":{"krate":0,"index":1076}},{"kind":"Use","ref_id":{"krate":0,"index":1802},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":256329,"byte_end":256335,"line_start":2044,"line_end":2044,"column_start":9,"column_end":15},"alias_span":null,"name":"BitMut","value":"","parent":{"krate":0,"index":1076}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/lib.rs","byte_start":0,"byte_end":6531,"line_start":1,"line_end":184,"column_start":1,"column_end":12},"name":"","qualname":"::","value":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":20},{"krate":0,"index":76},{"krate":0,"index":403},{"krate":0,"index":498},{"krate":0,"index":619},{"krate":0,"index":769},{"krate":0,"index":792},{"krate":0,"index":841},{"krate":0,"index":993},{"krate":0,"index":1076},{"krate":0,"index":2103},{"krate":0,"index":2153},{"krate":0,"index":2233}],"decl_id":null,"docs":" # Addressable Bits","sig":null,"attributes":[{"value":"* # Addressable Bits\n\n`bitvec` is a foundation library for memory compaction techniques that rely on\nviewing memory as bit-addressed rather than byte-addressed.\n\nThe `bitvec` project is designed to provide a comprehensive set of tools for\nusers who need memory compaction, with as low a cost as possible.\n\n# Usage\n\n`bitvec` provides data structures that specialize the major sequence types in\nthe standard library:\n\n- `[bool]` becomes [`BitSlice`]\n- `[bool; N]` becomes [`BitArray`]\n- `Box<[bool]>` becomes [`BitBox`]\n- `Vec<bool>` becomes [`BitVec`]\n\nYou can start using the crate in an existing codebase by replacing types and\nchasing compiler errors from there.\n\nAs an example,\n\n```rust\n# #[cfg(feature = \"alloc\")] {\nlet mut io_buf: Vec<u8> = Vec::new();\nio_buf.extend(&[0x47, 0xA5]);\n\nlet mut stats: Vec<bool> = Vec::new();\nstats.extend(&[true, false, true, true, false, false, true, false]);\n# }\n```\n\nwould become\n\n```rust\n# #[cfg(feature = \"alloc\")] {\nuse bitvec::prelude::*;\n\nlet mut io_buf = bitvec![Msb0, u8; 0; 16];\nio_buf[.. 4].store(4u8);\nio_buf[4 .. 8].store(7u8);\nio_buf[8 .. 16].store(0xA5u8);\n\nlet mut stats: BitVec = BitVec::new();\nstats.extend(&[true, false, true, true, false, false, true, false]);\n# }\n```\n\n# Capabilities\n\n`bitvec` stands out from other bit-vector libraries, both in Rust and in other\nlanguages, in a few significant ways.\n\nUnlike other Rust libraries, `bitvec` stores its information in pointers to\nmemory regions, rather than in the region directly. By using its own pointer\nencoding scheme, it can use references `&BitSlice` and `&mut BitSlice` to manage\nmemory and fit seamlessly into the Rust language rules and API signatures.\n\nUnlike *any* other bit-sequence system, `bitvec` enables users to specify the\nregister element type used to store data, and the ordering of bits within those\nelements. This sidesteps the problems found in C [bitfields], C++\n[`std::bitset`], Python [`bitstring`], Erlang [`bitstream`], and Rust libraries\nsuch as [`bit-vec`].\n\nBy permitting the in-memory layout to be specified by the user, rather than\nwithin the library, users are able to have the behavior characteristics they\nwant without effort or workarounds.\n\nThis works by suppling two type parameters: `O: BitOrder` specifies the ordering\nof bits within a register element, and `T: BitStore` specifies which register\nelement is used to store bits. `T` is restricted to be only the unsigned\nintegers, and `Cell` or `Atomic` variants of them.\n\n`bitvec` correctly handles memory aliasing by leveraging the type system to mark\nregions that have become subject to concurrency and either force the use of\natomic memory accesses or forbid simultaneous multiprocessing. You will never\nneed to insert your own guards to prevent race conditions, and [`BitSlice`]\nprovides APIs to separate any slice into its aliased and unaliased sub-regions.\n\n# Library Structure\n\nYou should generally import the library prelude, with\n\n```rust\nuse bitvec::prelude::*;\n```\n\nThe prelude contains all the symbols you will need to make use of the crate.\nAlmost all begin with the prefix `Bit`; only the orderings `Lsb0` and `Msb0` do\nnot. This will reduce the likelihood of name collisions. See the prelude module\ndocumentation for more detail on which symbols are imported, and how you can\nmore precisely control this.\n\nEach major component in the library is divided into its own module. This\nincludes each data structure and trait, as well as utility objects used for\nimplementation. The data structures that mirror the language distribution have\nsubmodules for each part of their mirroring: `api` ports inherent methods,\n`iter` contains iteration logic, `ops` operator overrides, and `traits` all\nother trait implementations.The data structure’s own module only contains its\nown definition and its inherent methods that are not ports of the standard\nlibraries.\n\n# Usage\n\nAs a replacement for `bool` data structures, you should be able to replace old\ntype definition and value construction sites with their corresponding items from\nthis crate, and the rest of your project should just work with the new types.\n\nTo use `bitvec` for bitfields, use [`BitArray`] or [`BitVec`] to manage your data\nbuffers (compile-time static and run-time dynamic, respectively), and the\n[`BitField`] trait to manage transferring values into and out of them.\n\nThe [`BitSlice`] type contains most of the methods and trait implementations used\nto interact with the *contents* of a memory buffer. [`BitVec`] adds methods for\noperating on allocations, and specializes [`BitSlice`] methods that can take\nadvantage of owned buffers.\n\nThe `domain` module, whose types are accessed by the `.{bit_,}domain{,_mut}`\nmethods on [`BitSlice`], allows users to split their views of memory on aliasing\nboundaries, removing synchronization where provably safe.\n\nThere are many ways to construct a bit-level view of data. The [`BitArray`],\n`BitBox`, and [`BitVec`] types are all owning types that contain a buffer of\nmemory and dereference to [`BitSlice`] in order to view it. In addition, you can\nborrow any piece of ordinary Rust memory as a [`BitSlice`] view using its\nborrowing constructor functions, and the [`BitView`] trait methods.\n\n# Examples\n\nSee the `examples/` directory of the project repository for detailed examples,\nor the type documentation for introductory samples.\n\n[`BitArray`]: array/struct.BitArray.html\n[`BitBox`]: boxed/struct.BitBox.html\n[`BitField`]: field/trait.BitField.html\n[`BitSlice`]: slice/struct.BitSlice.html\n[`BitVec`]: vec/struct.BitVec.html\n[`BitView`]: view/trait.BitView.html\n[`bitstream`]: https://erlang.org/doc/programming_examples/bit_syntax.html\n[`bitstring`]: https://pypi.org/project/bitstring/\n[`bit-vec`]: https://crates.io/crates/bit-vec\n[`std::bitset`]: https://en.cppreference.com/w/cpp/utility/bitset\n[bitfields]: https://en.cppreference.com/w/c/language/bit_field\n!*/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/lib.rs","byte_start":0,"byte_end":5887,"line_start":1,"line_end":145,"column_start":1,"column_end":4}},{"value":"no_std","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/lib.rs","byte_start":5923,"byte_end":5929,"line_start":147,"line_end":147,"column_start":35,"column_end":41}},{"value":"warn(missing_docs)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/lib.rs","byte_start":5962,"byte_end":5980,"line_start":148,"line_end":148,"column_start":31,"column_end":49}},{"value":"deny(unconditional_recursion)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/lib.rs","byte_start":6039,"byte_end":6072,"line_start":150,"line_end":150,"column_start":1,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":4},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/macros.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"macros","qualname":"::macros","value":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/macros.rs","parent":null,"children":[{"krate":0,"index":5}],"decl_id":null,"docs":" Constructor macros for the crate’s collection types.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/lib.rs","byte_start":6121,"byte_end":6133,"line_start":155,"line_end":155,"column_start":1,"column_end":13}},{"value":"/ Constructor macros for the crate’s collection types.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/macros.rs","byte_start":6533,"byte_end":6591,"line_start":1,"line_end":1,"column_start":1,"column_end":57}}]},{"kind":"Mod","id":{"krate":0,"index":5},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/macros/internal.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"internal","qualname":"::macros::internal","value":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/macros/internal.rs","parent":null,"children":[{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15}],"decl_id":null,"docs":" Internal implementation macros for the public exports.","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/macros.rs","byte_start":6593,"byte_end":6605,"line_start":3,"line_end":3,"column_start":1,"column_end":13}},{"value":"* Internal implementation macros for the public exports.\n\nThe macros in this module are required to be exported from the crate, as the\npublic macros will call them from client contexts (`macro_rules!` expansion\nbodies are not in source crate scope, as they are token expansion rather than\nsymbolic calls). However, they are not part of the public *API* of the crate,\nand are not intended for use anywhere but in the expansion bodies of the\npublic-API constructor macros.\n!*/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/macros/internal.rs","byte_start":20446,"byte_end":20922,"line_start":1,"line_end":9,"column_start":1,"column_end":4}}]},{"kind":"Function","id":{"krate":0,"index":13},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/macros/internal.rs","byte_start":32634,"byte_end":32649,"line_start":384,"line_end":384,"column_start":14,"column_end":29},"name":"u8_from_le_bits","qualname":"::macros::internal::u8_from_le_bits","value":"pub const fn u8_from_le_bits(bool, bool, bool, bool, bool, bool, bool, bool)\n-> u8","parent":null,"children":[],"decl_id":null,"docs":" Construct a `u8` from bits applied in Lsb0-order.\n","sig":null,"attributes":[{"value":"/ Construct a `u8` from bits applied in Lsb0-order.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/macros/internal.rs","byte_start":32489,"byte_end":32542,"line_start":381,"line_end":381,"column_start":1,"column_end":54}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/macros/internal.rs","byte_start":32543,"byte_end":32583,"line_start":382,"line_end":382,"column_start":1,"column_end":41}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/macros/internal.rs","byte_start":32584,"byte_end":32620,"line_start":383,"line_end":383,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":14},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/macros/internal.rs","byte_start":33047,"byte_end":33062,"line_start":408,"line_end":408,"column_start":14,"column_end":29},"name":"u8_from_be_bits","qualname":"::macros::internal::u8_from_be_bits","value":"pub const fn u8_from_be_bits(bool, bool, bool, bool, bool, bool, bool, bool)\n-> u8","parent":null,"children":[],"decl_id":null,"docs":" Construct a `u8` from bits applied in Msb0-order.\n","sig":null,"attributes":[{"value":"/ Construct a `u8` from bits applied in Msb0-order.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/macros/internal.rs","byte_start":32902,"byte_end":32955,"line_start":405,"line_end":405,"column_start":1,"column_end":54}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/macros/internal.rs","byte_start":32956,"byte_end":32996,"line_start":406,"line_end":406,"column_start":1,"column_end":41}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/macros/internal.rs","byte_start":32997,"byte_end":33033,"line_start":407,"line_end":407,"column_start":1,"column_end":37}}]},{"kind":"Mod","id":{"krate":0,"index":76},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"array","qualname":"::array","value":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","parent":null,"children":[{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":85},{"krate":0,"index":88},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":95},{"krate":0,"index":98},{"krate":0,"index":2291},{"krate":0,"index":2296},{"krate":0,"index":2300},{"krate":0,"index":101},{"krate":0,"index":113},{"krate":0,"index":219}],"decl_id":null,"docs":" A fixed-size region viewed as individual bits, corresponding to `[bool]`.","sig":null,"attributes":[{"value":"* A fixed-size region viewed as individual bits, corresponding to `[bool]`.\n\nYou can read the language’s [array fundamental documentation][std] here.\n\nThis module defines the [`BitArray`] immediate type, and its associated support\ncode.\n\n`BitArray` has little behavior or properties in its own right. It serves solely\nas a type capable of being used in immediate value position, and delegates to\n`BitSlice` for all actual work.\n\n[`BitArray`]: struct.BitArray.html\n[std]: https://doc.rust-lang.org/std/primitive.array.html\n!*/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":46152,"byte_end":46681,"line_start":1,"line_end":14,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":2291},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":50161,"byte_end":50169,"line_start":142,"line_end":142,"column_start":12,"column_end":20},"name":"BitArray","qualname":"::array::BitArray","value":"BitArray {  }","parent":null,"children":[{"krate":0,"index":2294},{"krate":0,"index":2295}],"decl_id":null,"docs":" An array of individual bits, able to be held by value on the stack.","sig":null,"attributes":[{"value":"* An array of individual bits, able to be held by value on the stack.\n\nThis type is generic over all `Sized` implementors of the `BitView` trait. Due\nto limitations in the Rust language’s const-generics implementation (it is both\nunstable and incomplete), this must take an array type parameter, rather than a\nbit-count integer parameter, making it inconvenient to use. The [`bitarr!`]\nmacro is capable of constructing both values and specific types of `BitArray`,\nand this macro should be preferred for most use.\n\nThe advantage of using this wrapper is that it implements `Deref`/`Mut` to\n`BitSlice`, as well as implementing all of `BitSlice`’s traits by forwarding to\nthe bit-slice view of its contained data. This allows it to have `BitSlice`\nbehavior by itself, without requiring explicit `.as_bitslice()` calls in user\ncode.\n\n> Note: Not all traits may be implemented for forwarding, as a matter of effort\n> and perceived need. Please file an issue for any additional traits that you\n> need to be forwarded.\n\n# Limitations\n\nThis always produces a bit-slice that fully spans its data; you cannot produce,\nfor example, an array of twelve bits.\n\n# Type Parameters\n\n- `O`: The ordering of bits within memory elements.\n- `V`: Some amount of memory which can be used as the basis for a `BitSlice`\n  view. This will usually be an array `[T: BitStore; N]`.\n\n# Examples\n\nThis type is useful for marking that some value is always to be used as a\nbit-slice.\n\n**/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":47514,"byte_end":48976,"line_start":61,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":48977,"byte_end":48988,"line_start":97,"line_end":97,"column_start":1,"column_end":12}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":48989,"byte_end":49016,"line_start":98,"line_end":98,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":49017,"byte_end":49020,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ struct HasBitfields {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":49021,"byte_end":49046,"line_start":100,"line_end":100,"column_start":1,"column_end":26}},{"value":"/   header: u32,","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":49047,"byte_end":49065,"line_start":101,"line_end":101,"column_start":1,"column_end":19}},{"value":"/   //  creates a type declaration","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":49066,"byte_end":49102,"line_start":102,"line_end":102,"column_start":1,"column_end":37}},{"value":"/   fields: bitarr!(for 20, in Msb0, u8),","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":49103,"byte_end":49146,"line_start":103,"line_end":103,"column_start":1,"column_end":44}},{"value":"/ }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":49147,"byte_end":49152,"line_start":104,"line_end":104,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":49153,"byte_end":49156,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ impl HasBitfields {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":49157,"byte_end":49180,"line_start":106,"line_end":106,"column_start":1,"column_end":24}},{"value":"/   pub fn new() -> Self {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":49181,"byte_end":49209,"line_start":107,"line_end":107,"column_start":1,"column_end":29}},{"value":"/     Self {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":49210,"byte_end":49224,"line_start":108,"line_end":108,"column_start":1,"column_end":15}},{"value":"/       header: 0,","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":49225,"byte_end":49245,"line_start":109,"line_end":109,"column_start":1,"column_end":21}},{"value":"/       //  creates a value object. the type paramaters must be repeated.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":49246,"byte_end":49321,"line_start":110,"line_end":110,"column_start":1,"column_end":76}},{"value":"/       fields: bitarr![Msb0, u8; 0; 20],","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":49322,"byte_end":49365,"line_start":111,"line_end":111,"column_start":1,"column_end":44}},{"value":"/     }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":49366,"byte_end":49375,"line_start":112,"line_end":112,"column_start":1,"column_end":10}},{"value":"/   }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":49376,"byte_end":49383,"line_start":113,"line_end":113,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":49384,"byte_end":49387,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/   /// Access a bit region directly","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":49388,"byte_end":49426,"line_start":115,"line_end":115,"column_start":1,"column_end":39}},{"value":"/   pub fn get_subfield(&self) -> &BitSlice<Msb0, u8> {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":49427,"byte_end":49484,"line_start":116,"line_end":116,"column_start":1,"column_end":58}},{"value":"/     &self.fields[.. 4]","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":49485,"byte_end":49511,"line_start":117,"line_end":117,"column_start":1,"column_end":27}},{"value":"/   }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":49512,"byte_end":49519,"line_start":118,"line_end":118,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":49520,"byte_end":49523,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/   /// Read a 12-bit value out of a region","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":49524,"byte_end":49569,"line_start":120,"line_end":120,"column_start":1,"column_end":46}},{"value":"/   pub fn read_value(&self) -> u16 {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":49570,"byte_end":49609,"line_start":121,"line_end":121,"column_start":1,"column_end":40}},{"value":"/     self.fields[4 .. 16].load()","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":49610,"byte_end":49645,"line_start":122,"line_end":122,"column_start":1,"column_end":36}},{"value":"/   }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":49646,"byte_end":49653,"line_start":123,"line_end":123,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":49654,"byte_end":49657,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/   /// Write a 12-bit value into a region","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":49658,"byte_end":49702,"line_start":125,"line_end":125,"column_start":1,"column_end":45}},{"value":"/   pub fn set_value(&mut self, value: u16) {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":49703,"byte_end":49750,"line_start":126,"line_end":126,"column_start":1,"column_end":48}},{"value":"/     self.fields[4 .. 16].store(value);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":49751,"byte_end":49793,"line_start":127,"line_end":127,"column_start":1,"column_end":43}},{"value":"/   }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":49794,"byte_end":49801,"line_start":128,"line_end":128,"column_start":1,"column_end":8}},{"value":"/ }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":49802,"byte_end":49807,"line_start":129,"line_end":129,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":49808,"byte_end":49815,"line_start":130,"line_end":130,"column_start":1,"column_end":8}},{"value":"*\n# Eventual Obsolescence\n\nWhen const-generics stabilize, this will be modified to have a signature more\nlike `BitArray<O, T: BitStore, const N: usize>([T; elts::<T>(N)]);`, to mirror\nthe behavior of ordinary arrays `[T; N]` as they stand today.\n\n[`bitarr!`]: ../../macro.bitarr.html\n**/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":49816,"byte_end":50105,"line_start":131,"line_end":139,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":50106,"byte_end":50126,"line_start":140,"line_end":140,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":50519,"byte_end":50525,"line_start":160,"line_end":160,"column_start":9,"column_end":15},"name":"zeroed","qualname":"<BitArray<O, V>>::zeroed","value":"pub fn zeroed() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `BitArray` with zeroed memory.\n","sig":null,"attributes":[{"value":"/ Constructs a new `BitArray` with zeroed memory.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":50414,"byte_end":50465,"line_start":158,"line_end":158,"column_start":2,"column_end":53}},{"value":"inline(always)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":50494,"byte_end":50508,"line_start":159,"line_end":159,"column_start":29,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":50816,"byte_end":50819,"line_start":175,"line_end":175,"column_start":9,"column_end":12},"name":"new","qualname":"<BitArray<O, V>>::new","value":"pub fn new(V) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `BitArray` from a data store.","sig":null,"attributes":[{"value":"/ Constructs a new `BitArray` from a data store.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":50635,"byte_end":50685,"line_start":167,"line_end":167,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":50687,"byte_end":50690,"line_start":168,"line_end":168,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":50692,"byte_end":50706,"line_start":169,"line_end":169,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":50708,"byte_end":50711,"line_start":170,"line_end":170,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":50713,"byte_end":50724,"line_start":171,"line_end":171,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":50726,"byte_end":50753,"line_start":172,"line_end":172,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":50755,"byte_end":50762,"line_start":173,"line_end":173,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":50791,"byte_end":50805,"line_start":174,"line_end":174,"column_start":29,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":51202,"byte_end":51208,"line_start":193,"line_end":193,"column_start":9,"column_end":15},"name":"unwrap","qualname":"<BitArray<O, V>>::unwrap","value":"pub fn unwrap(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Removes the bit-array wrapper, returning the contained data.","sig":null,"attributes":[{"value":"/ Removes the bit-array wrapper, returning the contained data.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":50888,"byte_end":50952,"line_start":182,"line_end":182,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":50954,"byte_end":50957,"line_start":183,"line_end":183,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":50959,"byte_end":50973,"line_start":184,"line_end":184,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":50975,"byte_end":50978,"line_start":185,"line_end":185,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":50980,"byte_end":50991,"line_start":186,"line_end":186,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":50993,"byte_end":51020,"line_start":187,"line_end":187,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":51022,"byte_end":51025,"line_start":188,"line_end":188,"column_start":2,"column_end":5}},{"value":"/ let bitarr: BitArray<LocalBits, [usize; 1]> = bitarr![0; 30];","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":51027,"byte_end":51092,"line_start":189,"line_end":189,"column_start":2,"column_end":67}},{"value":"/ let native: [usize; 1] = bitarr.unwrap();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":51094,"byte_end":51139,"line_start":190,"line_end":190,"column_start":2,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":51141,"byte_end":51148,"line_start":191,"line_end":191,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":51177,"byte_end":51191,"line_start":192,"line_end":192,"column_start":29,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":51334,"byte_end":51345,"line_start":200,"line_end":200,"column_start":9,"column_end":20},"name":"as_bitslice","qualname":"<BitArray<O, V>>::as_bitslice","value":"pub fn as_bitslice(&Self) -> &BitSlice<O, V::Store>","parent":null,"children":[],"decl_id":null,"docs":" Views the array as a bit-slice.\n","sig":null,"attributes":[{"value":"/ Views the array as a bit-slice.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":51239,"byte_end":51274,"line_start":197,"line_end":197,"column_start":2,"column_end":37}},{"value":"inline(always)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":51276,"byte_end":51293,"line_start":198,"line_end":198,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":51295,"byte_end":51325,"line_start":199,"line_end":199,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":51518,"byte_end":51533,"line_start":207,"line_end":207,"column_start":9,"column_end":24},"name":"as_mut_bitslice","qualname":"<BitArray<O, V>>::as_mut_bitslice","value":"pub fn as_mut_bitslice(&mut Self) -> &mut BitSlice<O, V::Store>","parent":null,"children":[],"decl_id":null,"docs":" Views the array as a mutable bit-slice.\n","sig":null,"attributes":[{"value":"/ Views the array as a mutable bit-slice.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":51415,"byte_end":51458,"line_start":204,"line_end":204,"column_start":2,"column_end":45}},{"value":"inline(always)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":51460,"byte_end":51477,"line_start":205,"line_end":205,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":51479,"byte_end":51509,"line_start":206,"line_end":206,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":51733,"byte_end":51741,"line_start":214,"line_end":214,"column_start":9,"column_end":17},"name":"as_slice","qualname":"<BitArray<O, V>>::as_slice","value":"pub fn as_slice(&Self) -> &[V::Store]","parent":null,"children":[],"decl_id":null,"docs":" Views the array as a slice of its underlying elements.\n","sig":null,"attributes":[{"value":"/ Views the array as a slice of its underlying elements.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":51615,"byte_end":51673,"line_start":211,"line_end":211,"column_start":2,"column_end":60}},{"value":"inline(always)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":51675,"byte_end":51692,"line_start":212,"line_end":212,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":51694,"byte_end":51724,"line_start":213,"line_end":213,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":52011,"byte_end":52023,"line_start":226,"line_end":226,"column_start":9,"column_end":21},"name":"as_mut_slice","qualname":"<BitArray<O, V>>::as_mut_slice","value":"pub fn as_mut_slice(&mut Self) -> &mut [V::Store]","parent":null,"children":[],"decl_id":null,"docs":" Views the array as a mutable slice of its underlying elements.\n","sig":null,"attributes":[{"value":"/ Views the array as a mutable slice of its underlying elements.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":51885,"byte_end":51951,"line_start":223,"line_end":223,"column_start":2,"column_end":68}},{"value":"inline(always)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":51953,"byte_end":51970,"line_start":224,"line_end":224,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":51972,"byte_end":52002,"line_start":225,"line_end":225,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":52304,"byte_end":52316,"line_start":238,"line_end":238,"column_start":9,"column_end":21},"name":"as_raw_slice","qualname":"<BitArray<O, V>>::as_raw_slice","value":"pub fn as_raw_slice(&Self) -> &[V::Mem]","parent":null,"children":[],"decl_id":null,"docs":" Views the array as a slice of its raw underlying memory type.\n","sig":null,"attributes":[{"value":"/ Views the array as a slice of its raw underlying memory type.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":52179,"byte_end":52244,"line_start":235,"line_end":235,"column_start":2,"column_end":67}},{"value":"inline(always)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":52246,"byte_end":52263,"line_start":236,"line_end":236,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":52265,"byte_end":52295,"line_start":237,"line_end":237,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":52589,"byte_end":52605,"line_start":250,"line_end":250,"column_start":9,"column_end":25},"name":"as_raw_mut_slice","qualname":"<BitArray<O, V>>::as_raw_mut_slice","value":"pub fn as_raw_mut_slice(&mut Self) -> &mut [V::Mem]","parent":null,"children":[],"decl_id":null,"docs":" Views the array as a mutable slice of its raw underlying memory type.\n","sig":null,"attributes":[{"value":"/ Views the array as a mutable slice of its raw underlying memory type.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":52456,"byte_end":52529,"line_start":247,"line_end":247,"column_start":2,"column_end":75}},{"value":"inline(always)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":52531,"byte_end":52548,"line_start":248,"line_end":248,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":52550,"byte_end":52580,"line_start":249,"line_end":249,"column_start":2,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":2303},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":63971,"byte_end":63991,"line_start":373,"line_end":373,"column_start":12,"column_end":32},"name":"TryFromBitSliceError","qualname":"::array::traits::TryFromBitSliceError","value":"","parent":null,"children":[],"decl_id":null,"docs":" The error type returned when a conversion from a bitslice to a bitarray\n fails.\n","sig":null,"attributes":[{"value":"/ The error type returned when a conversion from a bitslice to a bitarray","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":63843,"byte_end":63918,"line_start":370,"line_end":370,"column_start":1,"column_end":76}},{"value":"/ fails.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":63919,"byte_end":63929,"line_start":371,"line_end":371,"column_start":1,"column_end":11}}]},{"kind":"Mod","id":{"krate":0,"index":403},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"domain","qualname":"::domain","value":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","parent":null,"children":[{"krate":0,"index":404},{"krate":0,"index":405},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":412},{"krate":0,"index":415},{"krate":0,"index":418},{"krate":0,"index":421},{"krate":0,"index":424},{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":429},{"krate":0,"index":432},{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":438},{"krate":0,"index":441},{"krate":0,"index":444},{"krate":0,"index":447},{"krate":0,"index":450},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":457},{"krate":0,"index":460},{"krate":0,"index":2323},{"krate":0,"index":2335},{"krate":0,"index":2310},{"krate":0,"index":2353},{"krate":0,"index":2365},{"krate":0,"index":2340},{"krate":0,"index":464},{"krate":0,"index":468},{"krate":0,"index":2383},{"krate":0,"index":2394},{"krate":0,"index":2370},{"krate":0,"index":2411},{"krate":0,"index":2422},{"krate":0,"index":2398},{"krate":0,"index":472},{"krate":0,"index":475},{"krate":0,"index":483},{"krate":0,"index":490},{"krate":0,"index":493},{"krate":0,"index":495},{"krate":0,"index":2426},{"krate":0,"index":2429},{"krate":0,"index":2432},{"krate":0,"index":2435}],"decl_id":null,"docs":" Representation of the `BitSlice` region memory model","sig":null,"attributes":[{"value":"* Representation of the `BitSlice` region memory model\n\nThis module allows any `BitSlice` region to be decomposed into domains with\nmore detailed aliasing information.\n\nSpecifically, any particular `BitSlice` region is one of:\n\n- touches only interior indices of one element\n- touches at least one edge index of any number of elements (including zero)\n\nIn the latter case, any elements *completely* spanned by the slice handle are\nknown to not have any other write-capable views to them, and in the case of an\n`&mut BitSlice` handle specifically, no other views at all. As such, the domain\nview of this memory is able to remove the aliasing marker type and permit direct\nmemory access for the duration of its existence.\n!*/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":64392,"byte_end":65117,"line_start":1,"line_end":16,"column_start":1,"column_end":4}}]},{"kind":"Enum","id":{"krate":0,"index":2323},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":74739,"byte_end":74748,"line_start":364,"line_end":364,"column_start":13,"column_end":22},"name":"BitDomain","qualname":"::domain::BitDomain","value":"pub enum BitDomain<'a, O, T> where O: BitOrder, T: 'a + BitStore {\n    Enclave {\n        head: BitIdx<T::Mem>,\n        body: &'a BitSlice<O, T>,\n        tail: BitTail<T::Mem>,\n    },\n    Region {\n        head: &'a BitSlice<O, T>,\n        body: &'a BitSlice<O, T::Mem>,\n        tail: &'a BitSlice<O, T>,\n    },\n}","parent":null,"children":[{"krate":0,"index":2327},{"krate":0,"index":2331}],"decl_id":null,"docs":" Granular representation of the memory region containing a\n `BitSlice`.","sig":null,"attributes":[{"value":"/ Granular representation of the memory region containing a","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":66112,"byte_end":66173,"line_start":69,"line_end":69,"column_start":3,"column_end":64}},{"value":"/ `BitSlice`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":66176,"byte_end":66191,"line_start":70,"line_end":70,"column_start":3,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":66194,"byte_end":66197,"line_start":71,"line_end":71,"column_start":3,"column_end":6}},{"value":"/ `BitSlice` regions can be described in terms of edge and center","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":66200,"byte_end":66267,"line_start":72,"line_end":72,"column_start":3,"column_end":70}},{"value":"/ elements, where the edge elements retain the aliasing status of the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":66270,"byte_end":66341,"line_start":73,"line_end":73,"column_start":3,"column_end":74}},{"value":"/ source `BitSlice` handle, and the center elements are known to be","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":66344,"byte_end":66413,"line_start":74,"line_end":74,"column_start":3,"column_end":72}},{"value":"/ completely unaliased by any other view. This property allows any","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":66416,"byte_end":66484,"line_start":75,"line_end":75,"column_start":3,"column_end":71}},{"value":"/ `BitSlice` handle to be decomposed into smaller regions, and safely","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":66487,"byte_end":66558,"line_start":76,"line_end":76,"column_start":3,"column_end":74}},{"value":"/ remove any aliasing markers from the subregion of memory that no","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":66561,"byte_end":66629,"line_start":77,"line_end":77,"column_start":3,"column_end":71}},{"value":"/ longer requires them for correct access.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":66632,"byte_end":66676,"line_start":78,"line_end":78,"column_start":3,"column_end":47}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":66679,"byte_end":66682,"line_start":79,"line_end":79,"column_start":3,"column_end":6}},{"value":"/ This enum acts like the `.split*` methods in that it only subdivides","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":66685,"byte_end":66757,"line_start":80,"line_end":80,"column_start":3,"column_end":75}},{"value":"/ the source `BitSlice` into smaller `BitSlices`, and makes","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":66760,"byte_end":66821,"line_start":81,"line_end":81,"column_start":3,"column_end":64}},{"value":"/ appropriate modifications to the aliasing markers. It does not","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":66824,"byte_end":66890,"line_start":82,"line_end":82,"column_start":3,"column_end":69}},{"value":"/ provide references to the underlying memory elements. If you need","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":66893,"byte_end":66962,"line_start":83,"line_end":83,"column_start":3,"column_end":72}},{"value":"/ such access directly, use the [`Domain`] or [`DomainMut`] enums.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":66965,"byte_end":67033,"line_start":84,"line_end":84,"column_start":3,"column_end":71}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":67036,"byte_end":67039,"line_start":85,"line_end":85,"column_start":3,"column_end":6}},{"value":"/ # Lifetimes","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":67042,"byte_end":67057,"line_start":86,"line_end":86,"column_start":3,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":67060,"byte_end":67063,"line_start":87,"line_end":87,"column_start":3,"column_end":6}},{"value":"/ - `'a`: The lifetime of the referent storage region.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":67066,"byte_end":67122,"line_start":88,"line_end":88,"column_start":3,"column_end":59}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":67125,"byte_end":67128,"line_start":89,"line_end":89,"column_start":3,"column_end":6}},{"value":"/ # Type Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":67131,"byte_end":67152,"line_start":90,"line_end":90,"column_start":3,"column_end":24}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":67155,"byte_end":67158,"line_start":91,"line_end":91,"column_start":3,"column_end":6}},{"value":"/ - `O`: The ordering type of the source `BitSlice` handle.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":67161,"byte_end":67222,"line_start":92,"line_end":92,"column_start":3,"column_end":64}},{"value":"/ - `T`: The element type of the source `BitSlice` handle, including","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":67225,"byte_end":67295,"line_start":93,"line_end":93,"column_start":3,"column_end":73}},{"value":"/   aliasing markers.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":67298,"byte_end":67321,"line_start":94,"line_end":94,"column_start":3,"column_end":26}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":67324,"byte_end":67327,"line_start":95,"line_end":95,"column_start":3,"column_end":6}},{"value":"/ [`Domain`]: enum.Domain.html","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":67330,"byte_end":67362,"line_start":96,"line_end":96,"column_start":3,"column_end":35}},{"value":"/ [`DomainMut`]: enum.DomainMut.html","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":67365,"byte_end":67403,"line_start":97,"line_end":97,"column_start":3,"column_end":41}}]},{"kind":"Enum","id":{"krate":0,"index":2353},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":74763,"byte_end":74775,"line_start":365,"line_end":365,"column_start":13,"column_end":25},"name":"BitDomainMut","qualname":"::domain::BitDomainMut","value":"pub enum BitDomainMut<'a, O, T> where O: BitOrder, T: 'a + BitStore {\n    Enclave {\n        head: BitIdx<T::Mem>,\n        body: &'a mut BitSlice<O, T>,\n        tail: BitTail<T::Mem>,\n    },\n    Region {\n        head: &'a mut BitSlice<O, T>,\n        body: &'a mut BitSlice<O, T::Mem>,\n        tail: &'a mut BitSlice<O, T>,\n    },\n}","parent":null,"children":[{"krate":0,"index":2357},{"krate":0,"index":2361}],"decl_id":null,"docs":" Granular representation of the memory region containing a\n `BitSlice`.","sig":null,"attributes":[{"value":"/ Granular representation of the memory region containing a","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":66112,"byte_end":66173,"line_start":69,"line_end":69,"column_start":3,"column_end":64}},{"value":"/ `BitSlice`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":66176,"byte_end":66191,"line_start":70,"line_end":70,"column_start":3,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":66194,"byte_end":66197,"line_start":71,"line_end":71,"column_start":3,"column_end":6}},{"value":"/ `BitSlice` regions can be described in terms of edge and center","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":66200,"byte_end":66267,"line_start":72,"line_end":72,"column_start":3,"column_end":70}},{"value":"/ elements, where the edge elements retain the aliasing status of the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":66270,"byte_end":66341,"line_start":73,"line_end":73,"column_start":3,"column_end":74}},{"value":"/ source `BitSlice` handle, and the center elements are known to be","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":66344,"byte_end":66413,"line_start":74,"line_end":74,"column_start":3,"column_end":72}},{"value":"/ completely unaliased by any other view. This property allows any","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":66416,"byte_end":66484,"line_start":75,"line_end":75,"column_start":3,"column_end":71}},{"value":"/ `BitSlice` handle to be decomposed into smaller regions, and safely","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":66487,"byte_end":66558,"line_start":76,"line_end":76,"column_start":3,"column_end":74}},{"value":"/ remove any aliasing markers from the subregion of memory that no","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":66561,"byte_end":66629,"line_start":77,"line_end":77,"column_start":3,"column_end":71}},{"value":"/ longer requires them for correct access.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":66632,"byte_end":66676,"line_start":78,"line_end":78,"column_start":3,"column_end":47}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":66679,"byte_end":66682,"line_start":79,"line_end":79,"column_start":3,"column_end":6}},{"value":"/ This enum acts like the `.split*` methods in that it only subdivides","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":66685,"byte_end":66757,"line_start":80,"line_end":80,"column_start":3,"column_end":75}},{"value":"/ the source `BitSlice` into smaller `BitSlices`, and makes","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":66760,"byte_end":66821,"line_start":81,"line_end":81,"column_start":3,"column_end":64}},{"value":"/ appropriate modifications to the aliasing markers. It does not","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":66824,"byte_end":66890,"line_start":82,"line_end":82,"column_start":3,"column_end":69}},{"value":"/ provide references to the underlying memory elements. If you need","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":66893,"byte_end":66962,"line_start":83,"line_end":83,"column_start":3,"column_end":72}},{"value":"/ such access directly, use the [`Domain`] or [`DomainMut`] enums.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":66965,"byte_end":67033,"line_start":84,"line_end":84,"column_start":3,"column_end":71}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":67036,"byte_end":67039,"line_start":85,"line_end":85,"column_start":3,"column_end":6}},{"value":"/ # Lifetimes","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":67042,"byte_end":67057,"line_start":86,"line_end":86,"column_start":3,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":67060,"byte_end":67063,"line_start":87,"line_end":87,"column_start":3,"column_end":6}},{"value":"/ - `'a`: The lifetime of the referent storage region.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":67066,"byte_end":67122,"line_start":88,"line_end":88,"column_start":3,"column_end":59}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":67125,"byte_end":67128,"line_start":89,"line_end":89,"column_start":3,"column_end":6}},{"value":"/ # Type Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":67131,"byte_end":67152,"line_start":90,"line_end":90,"column_start":3,"column_end":24}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":67155,"byte_end":67158,"line_start":91,"line_end":91,"column_start":3,"column_end":6}},{"value":"/ - `O`: The ordering type of the source `BitSlice` handle.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":67161,"byte_end":67222,"line_start":92,"line_end":92,"column_start":3,"column_end":64}},{"value":"/ - `T`: The element type of the source `BitSlice` handle, including","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":67225,"byte_end":67295,"line_start":93,"line_end":93,"column_start":3,"column_end":73}},{"value":"/   aliasing markers.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":67298,"byte_end":67321,"line_start":94,"line_end":94,"column_start":3,"column_end":26}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":67324,"byte_end":67327,"line_start":95,"line_end":95,"column_start":3,"column_end":6}},{"value":"/ [`Domain`]: enum.Domain.html","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":67330,"byte_end":67362,"line_start":96,"line_end":96,"column_start":3,"column_end":35}},{"value":"/ [`DomainMut`]: enum.DomainMut.html","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":67365,"byte_end":67403,"line_start":97,"line_end":97,"column_start":3,"column_end":41}}]},{"kind":"Enum","id":{"krate":0,"index":2383},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":82256,"byte_end":82262,"line_start":636,"line_end":636,"column_start":9,"column_end":15},"name":"Domain","qualname":"::domain::Domain","value":"pub enum Domain<'a, T> where T: 'a + BitStore {\n    Enclave {\n        head: BitIdx<T::Mem>,\n        elem: &'a T::Alias,\n        tail: BitTail<T::Mem>,\n    },\n    Region {\n        head: Option<(BitIdx<T::Mem>, &'a T::Alias)>,\n        body: &'a [T::Mem],\n        tail: Option<(&'a T::Alias, BitTail<T::Mem>)>,\n    },\n}","parent":null,"children":[{"krate":0,"index":2386},{"krate":0,"index":2390}],"decl_id":null,"docs":" Granular representation of the memory region containing a\n `BitSlice`.","sig":null,"attributes":[{"value":"/ Granular representation of the memory region containing a","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":75099,"byte_end":75160,"line_start":388,"line_end":388,"column_start":3,"column_end":64}},{"value":"/ `BitSlice`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":75163,"byte_end":75178,"line_start":389,"line_end":389,"column_start":3,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":75181,"byte_end":75184,"line_start":390,"line_end":390,"column_start":3,"column_end":6}},{"value":"/ `BitSlice` regions can be described in terms of edge and center","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":75187,"byte_end":75254,"line_start":391,"line_end":391,"column_start":3,"column_end":70}},{"value":"/ elements, where the edge elements retain the aliasing status of the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":75257,"byte_end":75328,"line_start":392,"line_end":392,"column_start":3,"column_end":74}},{"value":"/ source `BitSlice` handle, and the center elements are known to be","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":75331,"byte_end":75400,"line_start":393,"line_end":393,"column_start":3,"column_end":72}},{"value":"/ completely unaliased by any other view. This property allows any","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":75403,"byte_end":75471,"line_start":394,"line_end":394,"column_start":3,"column_end":71}},{"value":"/ `BitSlice` handle to be decomposed into smaller regions, and safely","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":75474,"byte_end":75545,"line_start":395,"line_end":395,"column_start":3,"column_end":74}},{"value":"/ remove any aliasing markers from the subregion of memory that no","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":75548,"byte_end":75616,"line_start":396,"line_end":396,"column_start":3,"column_end":71}},{"value":"/ longer requires them for correct access.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":75619,"byte_end":75663,"line_start":397,"line_end":397,"column_start":3,"column_end":47}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":75666,"byte_end":75669,"line_start":398,"line_end":398,"column_start":3,"column_end":6}},{"value":"/ This enum splits the element region backing a `BitSlice` into","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":75672,"byte_end":75737,"line_start":399,"line_end":399,"column_start":3,"column_end":68}},{"value":"/ maybe-aliased and known-unaliased subslices. If you do not need to","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":75740,"byte_end":75810,"line_start":400,"line_end":400,"column_start":3,"column_end":73}},{"value":"/ work directly with the memory elements, and only need to firmly","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":75813,"byte_end":75880,"line_start":401,"line_end":401,"column_start":3,"column_end":70}},{"value":"/ specify the aliasing status of a `BitSlice`, see the [`BitDomain`]","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":75883,"byte_end":75953,"line_start":402,"line_end":402,"column_start":3,"column_end":73}},{"value":"/ and [`BitDomainMut`] enums.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":75956,"byte_end":75987,"line_start":403,"line_end":403,"column_start":3,"column_end":34}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":75990,"byte_end":75993,"line_start":404,"line_end":404,"column_start":3,"column_end":6}},{"value":"/ # Lifetimes","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":75996,"byte_end":76011,"line_start":405,"line_end":405,"column_start":3,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":76014,"byte_end":76017,"line_start":406,"line_end":406,"column_start":3,"column_end":6}},{"value":"/ - `'a`: The lifetime of the referent storage region.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":76020,"byte_end":76076,"line_start":407,"line_end":407,"column_start":3,"column_end":59}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":76079,"byte_end":76082,"line_start":408,"line_end":408,"column_start":3,"column_end":6}},{"value":"/ # Type Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":76085,"byte_end":76106,"line_start":409,"line_end":409,"column_start":3,"column_end":24}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":76109,"byte_end":76112,"line_start":410,"line_end":410,"column_start":3,"column_end":6}},{"value":"/ - `T`: The element type of the source `BitSlice` handle, including","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":76115,"byte_end":76185,"line_start":411,"line_end":411,"column_start":3,"column_end":73}},{"value":"/   aliasing markers.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":76188,"byte_end":76211,"line_start":412,"line_end":412,"column_start":3,"column_end":26}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":76214,"byte_end":76217,"line_start":413,"line_end":413,"column_start":3,"column_end":6}},{"value":"/ [`BitDomain`]: enum.BitDomain.html","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":76220,"byte_end":76258,"line_start":414,"line_end":414,"column_start":3,"column_end":41}},{"value":"/ [`BitDomainMut`]: enum.BitDomainMut.html","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":76261,"byte_end":76305,"line_start":415,"line_end":415,"column_start":3,"column_end":47}}]},{"kind":"Enum","id":{"krate":0,"index":2411},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":82273,"byte_end":82282,"line_start":637,"line_end":637,"column_start":9,"column_end":18},"name":"DomainMut","qualname":"::domain::DomainMut","value":"pub enum DomainMut<'a, T> where T: 'a + BitStore {\n    Enclave {\n        head: BitIdx<T::Mem>,\n        elem: &'a T::Alias,\n        tail: BitTail<T::Mem>,\n    },\n    Region {\n        head: Option<(BitIdx<T::Mem>, &'a T::Alias)>,\n        body: &'a mut [T::Mem],\n        tail: Option<(&'a T::Alias, BitTail<T::Mem>)>,\n    },\n}","parent":null,"children":[{"krate":0,"index":2414},{"krate":0,"index":2418}],"decl_id":null,"docs":" Granular representation of the memory region containing a\n `BitSlice`.","sig":null,"attributes":[{"value":"/ Granular representation of the memory region containing a","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":75099,"byte_end":75160,"line_start":388,"line_end":388,"column_start":3,"column_end":64}},{"value":"/ `BitSlice`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":75163,"byte_end":75178,"line_start":389,"line_end":389,"column_start":3,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":75181,"byte_end":75184,"line_start":390,"line_end":390,"column_start":3,"column_end":6}},{"value":"/ `BitSlice` regions can be described in terms of edge and center","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":75187,"byte_end":75254,"line_start":391,"line_end":391,"column_start":3,"column_end":70}},{"value":"/ elements, where the edge elements retain the aliasing status of the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":75257,"byte_end":75328,"line_start":392,"line_end":392,"column_start":3,"column_end":74}},{"value":"/ source `BitSlice` handle, and the center elements are known to be","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":75331,"byte_end":75400,"line_start":393,"line_end":393,"column_start":3,"column_end":72}},{"value":"/ completely unaliased by any other view. This property allows any","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":75403,"byte_end":75471,"line_start":394,"line_end":394,"column_start":3,"column_end":71}},{"value":"/ `BitSlice` handle to be decomposed into smaller regions, and safely","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":75474,"byte_end":75545,"line_start":395,"line_end":395,"column_start":3,"column_end":74}},{"value":"/ remove any aliasing markers from the subregion of memory that no","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":75548,"byte_end":75616,"line_start":396,"line_end":396,"column_start":3,"column_end":71}},{"value":"/ longer requires them for correct access.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":75619,"byte_end":75663,"line_start":397,"line_end":397,"column_start":3,"column_end":47}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":75666,"byte_end":75669,"line_start":398,"line_end":398,"column_start":3,"column_end":6}},{"value":"/ This enum splits the element region backing a `BitSlice` into","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":75672,"byte_end":75737,"line_start":399,"line_end":399,"column_start":3,"column_end":68}},{"value":"/ maybe-aliased and known-unaliased subslices. If you do not need to","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":75740,"byte_end":75810,"line_start":400,"line_end":400,"column_start":3,"column_end":73}},{"value":"/ work directly with the memory elements, and only need to firmly","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":75813,"byte_end":75880,"line_start":401,"line_end":401,"column_start":3,"column_end":70}},{"value":"/ specify the aliasing status of a `BitSlice`, see the [`BitDomain`]","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":75883,"byte_end":75953,"line_start":402,"line_end":402,"column_start":3,"column_end":73}},{"value":"/ and [`BitDomainMut`] enums.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":75956,"byte_end":75987,"line_start":403,"line_end":403,"column_start":3,"column_end":34}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":75990,"byte_end":75993,"line_start":404,"line_end":404,"column_start":3,"column_end":6}},{"value":"/ # Lifetimes","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":75996,"byte_end":76011,"line_start":405,"line_end":405,"column_start":3,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":76014,"byte_end":76017,"line_start":406,"line_end":406,"column_start":3,"column_end":6}},{"value":"/ - `'a`: The lifetime of the referent storage region.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":76020,"byte_end":76076,"line_start":407,"line_end":407,"column_start":3,"column_end":59}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":76079,"byte_end":76082,"line_start":408,"line_end":408,"column_start":3,"column_end":6}},{"value":"/ # Type Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":76085,"byte_end":76106,"line_start":409,"line_end":409,"column_start":3,"column_end":24}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":76109,"byte_end":76112,"line_start":410,"line_end":410,"column_start":3,"column_end":6}},{"value":"/ - `T`: The element type of the source `BitSlice` handle, including","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":76115,"byte_end":76185,"line_start":411,"line_end":411,"column_start":3,"column_end":73}},{"value":"/   aliasing markers.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":76188,"byte_end":76211,"line_start":412,"line_end":412,"column_start":3,"column_end":26}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":76214,"byte_end":76217,"line_start":413,"line_end":413,"column_start":3,"column_end":6}},{"value":"/ [`BitDomain`]: enum.BitDomain.html","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":76220,"byte_end":76258,"line_start":414,"line_end":414,"column_start":3,"column_end":41}},{"value":"/ [`BitDomainMut`]: enum.BitDomainMut.html","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":76261,"byte_end":76305,"line_start":415,"line_end":415,"column_start":3,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":498},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"field","qualname":"::field","value":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","parent":null,"children":[{"krate":0,"index":499},{"krate":0,"index":500},{"krate":0,"index":503},{"krate":0,"index":506},{"krate":0,"index":509},{"krate":0,"index":510},{"krate":0,"index":513},{"krate":0,"index":516},{"krate":0,"index":519},{"krate":0,"index":522},{"krate":0,"index":523},{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":532},{"krate":0,"index":535},{"krate":0,"index":538},{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":549},{"krate":0,"index":552},{"krate":0,"index":555},{"krate":0,"index":558},{"krate":0,"index":571},{"krate":0,"index":581},{"krate":0,"index":591},{"krate":0,"index":602},{"krate":0,"index":603},{"krate":0,"index":608},{"krate":0,"index":613},{"krate":0,"index":616}],"decl_id":null,"docs":" Parallel bitfield access.","sig":null,"attributes":[{"value":"* Parallel bitfield access.\n\nThis module provides parallel, multiple-bit, access to a `BitSlice`. This\nfunctionality permits the use of `BitSlice` as a library-level implementation of\nthe bitfield language feature found in C and C++.\n\nThe `BitField` trait is not sealed against client implementation, as there is no\nuseful way to automatically use a `BitOrder` implementation to provide a\nuniversal behavior. As such, the trait has some requirements that the compiler\ncannot enforce for client implementations.\n\n# Batch Behavior\n\nThe purpose of this trait is to provide access to arbitrary bit regions as if\nthey were an ordinary memory location. As such, it is important for\nimplementations of this trait to provide shift/mask register transfer behavior\nwhere possible, for as wide a span as possible in each action. Implementations\nof this trait should *not* use bit-by-bit iteration.\n\n# Register Bit Order Preservation\n\nAs a default assumption – user orderings *may* violate this, but *should* not –\neach element of slice memory used to store part of a value should not reorder\nthe value bits. Transfer between slice memory and a CPU register should solely\nbe an ordinary value load or store between memory and the register, and a\nshift/mask operation to select the part of the value that is live.\n\n# Endianness\n\nThe `_le` and `_be` methods of `BitField` refer to the order in which\n`T: BitStore` elements of the slice are assigned significance when containing\nfragments of a stored data value. Within any `T` element, the order of its\nconstituent bytes is *not* governed by the `BitField` trait method.\n\nThe provided `BitOrder` implementors `Lsb0` and `Msb0` use the local machine’s\nbyte ordering. Other cursors *may* implement ordering of bytes within `T`\nelements differently, for instance by calling `.to_be_bytes` before store and\n`from_be_bytes` after load.\n!*/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":85026,"byte_end":86904,"line_start":1,"line_end":39,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":558},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":88256,"byte_end":88264,"line_start":98,"line_end":98,"column_start":11,"column_end":19},"name":"BitField","qualname":"::field::BitField","value":"BitField","parent":null,"children":[{"krate":0,"index":559},{"krate":0,"index":561},{"krate":0,"index":563},{"krate":0,"index":565},{"krate":0,"index":567},{"krate":0,"index":569}],"decl_id":null,"docs":" Performs C-style bitfield access through a `BitSlice`.","sig":null,"attributes":[{"value":"* Performs C-style bitfield access through a `BitSlice`.\n\nBit orderings that permit batched access to regions of memory are enabled to\nload data from, and store data to, a `BitStore` with faster behavior than the\ndefault bit-by-bit traversal.\n\nThis trait transfers data between a `BitSlice` and a local element. The trait\nfunctions always place the live bit region of the slice against the least\nsignificant bit edge of the local element (return value of `load`, argument of\n`store`).\n\nImplementations are encouraged to preserve in-memory bit ordering within a\nmemory element, so that call sites can provide a value pattern that the user can\nclearly see matches what they expect for memory ordering. These methods should\nonly move data between locations, without modifying the data itself.\n\nMethods should be called as `bits[start .. end].load_or_store()`, where the\nrange subslice selects no mor than the `M::BITS` element width being\ntransferred.\n**/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":87291,"byte_end":88245,"line_start":78,"line_end":97,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":559},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":89294,"byte_end":89298,"line_start":129,"line_end":129,"column_start":5,"column_end":9},"name":"load","qualname":"::field::BitField::load","value":"pub fn load<M>(&Self) -> M where M: BitMemory","parent":{"krate":0,"index":558},"children":[],"decl_id":null,"docs":" Loads the bits in the `self` region into a local value.","sig":null,"attributes":[{"value":"/ Loads the bits in the `self` region into a local value.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":88268,"byte_end":88327,"line_start":99,"line_end":99,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":88329,"byte_end":88332,"line_start":100,"line_end":100,"column_start":2,"column_end":5}},{"value":"/ This can load into any of the unsigned integers which implement","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":88334,"byte_end":88401,"line_start":101,"line_end":101,"column_start":2,"column_end":69}},{"value":"/ `BitMemory`. Any further transformation must be done by the user.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":88403,"byte_end":88472,"line_start":102,"line_end":102,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":88474,"byte_end":88477,"line_start":103,"line_end":103,"column_start":2,"column_end":5}},{"value":"/ The default implementation of this function calls [`load_le`] on","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":88479,"byte_end":88547,"line_start":104,"line_end":104,"column_start":2,"column_end":70}},{"value":"/ little-endian byte-ordered CPUs, and [`load_be`] on big-endian","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":88549,"byte_end":88615,"line_start":105,"line_end":105,"column_start":2,"column_end":68}},{"value":"/ byte-ordered CPUs.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":88617,"byte_end":88639,"line_start":106,"line_end":106,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":88641,"byte_end":88644,"line_start":107,"line_end":107,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":88646,"byte_end":88662,"line_start":108,"line_end":108,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":88664,"byte_end":88667,"line_start":109,"line_end":109,"column_start":2,"column_end":5}},{"value":"/ - `&self`: A read reference to some bits in memory. This slice must be","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":88669,"byte_end":88743,"line_start":110,"line_end":110,"column_start":2,"column_end":76}},{"value":"/   trimmed to have a width no more than the `M::BITS` width of the type","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":88745,"byte_end":88819,"line_start":111,"line_end":111,"column_start":2,"column_end":76}},{"value":"/   being loaded. This can be accomplished with range indexing on a larger","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":88821,"byte_end":88897,"line_start":112,"line_end":112,"column_start":2,"column_end":78}},{"value":"/   slice.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":88899,"byte_end":88911,"line_start":113,"line_end":113,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":88913,"byte_end":88916,"line_start":114,"line_end":114,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":88918,"byte_end":88931,"line_start":115,"line_end":115,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":88933,"byte_end":88936,"line_start":116,"line_end":116,"column_start":2,"column_end":5}},{"value":"/ A value `M` whose least `self.len()` significant bits are filled with","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":88938,"byte_end":89011,"line_start":117,"line_end":117,"column_start":2,"column_end":75}},{"value":"/ the bits of `self`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":89013,"byte_end":89036,"line_start":118,"line_end":118,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":89038,"byte_end":89041,"line_start":119,"line_end":119,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":89043,"byte_end":89055,"line_start":120,"line_end":120,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":89057,"byte_end":89060,"line_start":121,"line_end":121,"column_start":2,"column_end":5}},{"value":"/ This method is encouraged to panic if `self` is empty, or wider than a","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":89062,"byte_end":89136,"line_start":122,"line_end":122,"column_start":2,"column_end":76}},{"value":"/ single element `M`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":89138,"byte_end":89161,"line_start":123,"line_end":123,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":89163,"byte_end":89166,"line_start":124,"line_end":124,"column_start":2,"column_end":5}},{"value":"/ [`load_be`]: #tymethod.load_be","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":89168,"byte_end":89202,"line_start":125,"line_end":125,"column_start":2,"column_end":36}},{"value":"/ [`load_le`]: #tymethod.load_le","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":89204,"byte_end":89238,"line_start":126,"line_end":126,"column_start":2,"column_end":36}},{"value":"inline(always)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":89240,"byte_end":89257,"line_start":127,"line_end":127,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":89259,"byte_end":89289,"line_start":128,"line_end":128,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":561},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":90618,"byte_end":90623,"line_start":170,"line_end":170,"column_start":5,"column_end":10},"name":"store","qualname":"::field::BitField::store","value":"pub fn store<M>(&mut Self, M) where M: BitMemory","parent":{"krate":0,"index":558},"children":[],"decl_id":null,"docs":" Stores a sequence of bits from the user into the domain of `self`.","sig":null,"attributes":[{"value":"/ Stores a sequence of bits from the user into the domain of `self`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":89469,"byte_end":89539,"line_start":138,"line_end":138,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":89541,"byte_end":89544,"line_start":139,"line_end":139,"column_start":2,"column_end":5}},{"value":"/ This can store any of the unsigned integers which implement","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":89546,"byte_end":89609,"line_start":140,"line_end":140,"column_start":2,"column_end":65}},{"value":"/ `BitMemory`. Any other types must first be transformed by the user.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":89611,"byte_end":89682,"line_start":141,"line_end":141,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":89684,"byte_end":89687,"line_start":142,"line_end":142,"column_start":2,"column_end":5}},{"value":"/ The default implementation of this function calls [`store_le`] on","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":89689,"byte_end":89758,"line_start":143,"line_end":143,"column_start":2,"column_end":71}},{"value":"/ little-endian byte-ordered CPUs, and [`store_be`] on big-endian","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":89760,"byte_end":89827,"line_start":144,"line_end":144,"column_start":2,"column_end":69}},{"value":"/ byte-ordered CPUs.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":89829,"byte_end":89851,"line_start":145,"line_end":145,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":89853,"byte_end":89856,"line_start":146,"line_end":146,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":89858,"byte_end":89874,"line_start":147,"line_end":147,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":89876,"byte_end":89879,"line_start":148,"line_end":148,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`: A write reference to some bits in memory. This slice must","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":89881,"byte_end":89957,"line_start":149,"line_end":149,"column_start":2,"column_end":78}},{"value":"/   be trimmed to have a width no more than the `M::BITS` width of the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":89959,"byte_end":90031,"line_start":150,"line_end":150,"column_start":2,"column_end":74}},{"value":"/   type being stored. This can be accomplished with range indexing on a","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":90033,"byte_end":90107,"line_start":151,"line_end":151,"column_start":2,"column_end":76}},{"value":"/   larger slice.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":90109,"byte_end":90128,"line_start":152,"line_end":152,"column_start":2,"column_end":21}},{"value":"/ - `value`: A value, whose `self.len()` least significant bits will be","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":90130,"byte_end":90203,"line_start":153,"line_end":153,"column_start":2,"column_end":75}},{"value":"/   stored into `self`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":90205,"byte_end":90230,"line_start":154,"line_end":154,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":90232,"byte_end":90235,"line_start":155,"line_end":155,"column_start":2,"column_end":5}},{"value":"/ # Behavior","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":90237,"byte_end":90251,"line_start":156,"line_end":156,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":90253,"byte_end":90256,"line_start":157,"line_end":157,"column_start":2,"column_end":5}},{"value":"/ The `self.len()` least significant bits of `value` are written into the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":90258,"byte_end":90333,"line_start":158,"line_end":158,"column_start":2,"column_end":77}},{"value":"/ domain of `self`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":90335,"byte_end":90356,"line_start":159,"line_end":159,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":90358,"byte_end":90361,"line_start":160,"line_end":160,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":90363,"byte_end":90375,"line_start":161,"line_end":161,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":90377,"byte_end":90380,"line_start":162,"line_end":162,"column_start":2,"column_end":5}},{"value":"/ This method is encouraged to panic if `self` is empty, or wider than a","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":90382,"byte_end":90456,"line_start":163,"line_end":163,"column_start":2,"column_end":76}},{"value":"/ single element `M`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":90458,"byte_end":90481,"line_start":164,"line_end":164,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":90483,"byte_end":90486,"line_start":165,"line_end":165,"column_start":2,"column_end":5}},{"value":"/ [`store_be`]: #tymethod.store_be","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":90488,"byte_end":90524,"line_start":166,"line_end":166,"column_start":2,"column_end":38}},{"value":"/ [`store_le`]: #tymethod.store_le","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":90526,"byte_end":90562,"line_start":167,"line_end":167,"column_start":2,"column_end":38}},{"value":"inline(always)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":90564,"byte_end":90581,"line_start":168,"line_end":168,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":90583,"byte_end":90613,"line_start":169,"line_end":169,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":563},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":91922,"byte_end":91929,"line_start":205,"line_end":205,"column_start":5,"column_end":12},"name":"load_le","qualname":"::field::BitField::load_le","value":"pub fn load_le<M>(&Self) -> M where M: BitMemory","parent":{"krate":0,"index":558},"children":[],"decl_id":null,"docs":" Loads from `self`, using little-endian element `T` ordering.","sig":null,"attributes":[{"value":"/ Loads from `self`, using little-endian element `T` ordering.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":90791,"byte_end":90855,"line_start":179,"line_end":179,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":90857,"byte_end":90860,"line_start":180,"line_end":180,"column_start":2,"column_end":5}},{"value":"/ This function interprets a multi-element slice as having its least","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":90862,"byte_end":90932,"line_start":181,"line_end":181,"column_start":2,"column_end":72}},{"value":"/ significant chunk in the low memory address, and its most significant","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":90934,"byte_end":91007,"line_start":182,"line_end":182,"column_start":2,"column_end":75}},{"value":"/ chunk in the high memory address. Each element `T` is still interpreted","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":91009,"byte_end":91084,"line_start":183,"line_end":183,"column_start":2,"column_end":77}},{"value":"/ from individual bytes according to the local CPU ordering.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":91086,"byte_end":91148,"line_start":184,"line_end":184,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":91150,"byte_end":91153,"line_start":185,"line_end":185,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":91155,"byte_end":91171,"line_start":186,"line_end":186,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":91173,"byte_end":91176,"line_start":187,"line_end":187,"column_start":2,"column_end":5}},{"value":"/ - `&self`: A read reference to some bits in memory. This slice must be","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":91178,"byte_end":91252,"line_start":188,"line_end":188,"column_start":2,"column_end":76}},{"value":"/   trimmed to have a width no more than the `M::BITS` width of the type","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":91254,"byte_end":91328,"line_start":189,"line_end":189,"column_start":2,"column_end":76}},{"value":"/   being loaded. This can be accomplished with range indexing on a larger","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":91330,"byte_end":91406,"line_start":190,"line_end":190,"column_start":2,"column_end":78}},{"value":"/   slice.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":91408,"byte_end":91420,"line_start":191,"line_end":191,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":91422,"byte_end":91425,"line_start":192,"line_end":192,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":91427,"byte_end":91440,"line_start":193,"line_end":193,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":91442,"byte_end":91445,"line_start":194,"line_end":194,"column_start":2,"column_end":5}},{"value":"/ A value `M` whose least `self.len()` significant bits are filled with","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":91447,"byte_end":91520,"line_start":195,"line_end":195,"column_start":2,"column_end":75}},{"value":"/ the bits of `self`. If `self` spans multiple elements `T`, then the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":91522,"byte_end":91593,"line_start":196,"line_end":196,"column_start":2,"column_end":73}},{"value":"/ lowest-address `T` is interpreted as containing the least significant","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":91595,"byte_end":91668,"line_start":197,"line_end":197,"column_start":2,"column_end":75}},{"value":"/ bits of the return value `M`, and the highest-address `T` is interpreted","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":91670,"byte_end":91746,"line_start":198,"line_end":198,"column_start":2,"column_end":78}},{"value":"/ as containing its most significant bits.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":91748,"byte_end":91792,"line_start":199,"line_end":199,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":91794,"byte_end":91797,"line_start":200,"line_end":200,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":91799,"byte_end":91811,"line_start":201,"line_end":201,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":91813,"byte_end":91816,"line_start":202,"line_end":202,"column_start":2,"column_end":5}},{"value":"/ This method is encouraged to panic if `self` is empty, or wider than a","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":91818,"byte_end":91892,"line_start":203,"line_end":203,"column_start":2,"column_end":76}},{"value":"/ single element `M`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":91894,"byte_end":91917,"line_start":204,"line_end":204,"column_start":2,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":565},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":93096,"byte_end":93103,"line_start":234,"line_end":234,"column_start":5,"column_end":12},"name":"load_be","qualname":"::field::BitField::load_be","value":"pub fn load_be<M>(&Self) -> M where M: BitMemory","parent":{"krate":0,"index":558},"children":[],"decl_id":null,"docs":" Loads from `self`, using big-endian element `T` ordering.","sig":null,"attributes":[{"value":"/ Loads from `self`, using big-endian element `T` ordering.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":91968,"byte_end":92029,"line_start":208,"line_end":208,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":92031,"byte_end":92034,"line_start":209,"line_end":209,"column_start":2,"column_end":5}},{"value":"/ This function interprets a multi-element slice as having its most","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":92036,"byte_end":92105,"line_start":210,"line_end":210,"column_start":2,"column_end":71}},{"value":"/ significant chunk in the low memory address, and its least significant","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":92107,"byte_end":92181,"line_start":211,"line_end":211,"column_start":2,"column_end":76}},{"value":"/ chunk in the high memory address. Each element `T` is still interpreted","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":92183,"byte_end":92258,"line_start":212,"line_end":212,"column_start":2,"column_end":77}},{"value":"/ from individual bytes according to the local CPU ordering.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":92260,"byte_end":92322,"line_start":213,"line_end":213,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":92324,"byte_end":92327,"line_start":214,"line_end":214,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":92329,"byte_end":92345,"line_start":215,"line_end":215,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":92347,"byte_end":92350,"line_start":216,"line_end":216,"column_start":2,"column_end":5}},{"value":"/ - `&self`: A read reference to some bits in memory. This slice must be","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":92352,"byte_end":92426,"line_start":217,"line_end":217,"column_start":2,"column_end":76}},{"value":"/   trimmed to have a width no more than the `M::BITS` width of the type","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":92428,"byte_end":92502,"line_start":218,"line_end":218,"column_start":2,"column_end":76}},{"value":"/   being loaded. This can be accomplished with range indexing on a larger","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":92504,"byte_end":92580,"line_start":219,"line_end":219,"column_start":2,"column_end":78}},{"value":"/   slice.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":92582,"byte_end":92594,"line_start":220,"line_end":220,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":92596,"byte_end":92599,"line_start":221,"line_end":221,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":92601,"byte_end":92614,"line_start":222,"line_end":222,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":92616,"byte_end":92619,"line_start":223,"line_end":223,"column_start":2,"column_end":5}},{"value":"/ A value `M` whose least `self.len()` significant bits are filled with","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":92621,"byte_end":92694,"line_start":224,"line_end":224,"column_start":2,"column_end":75}},{"value":"/ the bits of `self`. If `self` spans multiple elements `T`, then the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":92696,"byte_end":92767,"line_start":225,"line_end":225,"column_start":2,"column_end":73}},{"value":"/ lowest-address `T` is interpreted as containing the most significant","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":92769,"byte_end":92841,"line_start":226,"line_end":226,"column_start":2,"column_end":74}},{"value":"/ bits of the return value `M`, and the highest-address `T` is interpreted","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":92843,"byte_end":92919,"line_start":227,"line_end":227,"column_start":2,"column_end":78}},{"value":"/ as containing its least significant bits.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":92921,"byte_end":92966,"line_start":228,"line_end":228,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":92968,"byte_end":92971,"line_start":229,"line_end":229,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":92973,"byte_end":92985,"line_start":230,"line_end":230,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":92987,"byte_end":92990,"line_start":231,"line_end":231,"column_start":2,"column_end":5}},{"value":"/ This method is encouraged to panic if `self` is empty, or wider than a","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":92992,"byte_end":93066,"line_start":232,"line_end":232,"column_start":2,"column_end":76}},{"value":"/ single element `M`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":93068,"byte_end":93091,"line_start":233,"line_end":233,"column_start":2,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":567},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":94378,"byte_end":94386,"line_start":265,"line_end":265,"column_start":5,"column_end":13},"name":"store_le","qualname":"::field::BitField::store_le","value":"pub fn store_le<M>(&mut Self, M) where M: BitMemory","parent":{"krate":0,"index":558},"children":[],"decl_id":null,"docs":" Stores into `self`, using little-endian element ordering.","sig":null,"attributes":[{"value":"/ Stores into `self`, using little-endian element ordering.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":93142,"byte_end":93203,"line_start":237,"line_end":237,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":93205,"byte_end":93208,"line_start":238,"line_end":238,"column_start":2,"column_end":5}},{"value":"/ This function interprets a multi-element slice as having its least","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":93210,"byte_end":93280,"line_start":239,"line_end":239,"column_start":2,"column_end":72}},{"value":"/ significant chunk in the low memory address, and its most significant","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":93282,"byte_end":93355,"line_start":240,"line_end":240,"column_start":2,"column_end":75}},{"value":"/ chunk in the high memory address. Each element `T` is still interpreted","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":93357,"byte_end":93432,"line_start":241,"line_end":241,"column_start":2,"column_end":77}},{"value":"/ from individual bytes according to the local CPU ordering.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":93434,"byte_end":93496,"line_start":242,"line_end":242,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":93498,"byte_end":93501,"line_start":243,"line_end":243,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":93503,"byte_end":93519,"line_start":244,"line_end":244,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":93521,"byte_end":93524,"line_start":245,"line_end":245,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`: A write reference to some bits in memory. This slice must","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":93526,"byte_end":93602,"line_start":246,"line_end":246,"column_start":2,"column_end":78}},{"value":"/   be trimmed to have a width no more than the `M::BITS` width of the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":93604,"byte_end":93676,"line_start":247,"line_end":247,"column_start":2,"column_end":74}},{"value":"/   type being stored. This can be accomplished with range indexing on a","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":93678,"byte_end":93752,"line_start":248,"line_end":248,"column_start":2,"column_end":76}},{"value":"/   larger slice.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":93754,"byte_end":93773,"line_start":249,"line_end":249,"column_start":2,"column_end":21}},{"value":"/ - `value`: A value, whose `self.len()` least significant bits will be","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":93775,"byte_end":93848,"line_start":250,"line_end":250,"column_start":2,"column_end":75}},{"value":"/   stored into `self`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":93850,"byte_end":93875,"line_start":251,"line_end":251,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":93877,"byte_end":93880,"line_start":252,"line_end":252,"column_start":2,"column_end":5}},{"value":"/ # Behavior","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":93882,"byte_end":93896,"line_start":253,"line_end":253,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":93898,"byte_end":93901,"line_start":254,"line_end":254,"column_start":2,"column_end":5}},{"value":"/ The `self.len()` least significant bits of `value` are written into the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":93903,"byte_end":93978,"line_start":255,"line_end":255,"column_start":2,"column_end":77}},{"value":"/ domain of `self`. If `self` spans multiple elements `T`, then the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":93980,"byte_end":94049,"line_start":256,"line_end":256,"column_start":2,"column_end":71}},{"value":"/ lowest-address `T` is interpreted as containing the least significant","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":94051,"byte_end":94124,"line_start":257,"line_end":257,"column_start":2,"column_end":75}},{"value":"/ bits of the `M` return value, and the highest-address `T` is interpreted","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":94126,"byte_end":94202,"line_start":258,"line_end":258,"column_start":2,"column_end":78}},{"value":"/ as containing its most significant bits.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":94204,"byte_end":94248,"line_start":259,"line_end":259,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":94250,"byte_end":94253,"line_start":260,"line_end":260,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":94255,"byte_end":94267,"line_start":261,"line_end":261,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":94269,"byte_end":94272,"line_start":262,"line_end":262,"column_start":2,"column_end":5}},{"value":"/ This method is encouraged to panic if `self` is empty, or wider than a","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":94274,"byte_end":94348,"line_start":263,"line_end":263,"column_start":2,"column_end":76}},{"value":"/ single element `M`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":94350,"byte_end":94373,"line_start":264,"line_end":264,"column_start":2,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":569},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":95667,"byte_end":95675,"line_start":296,"line_end":296,"column_start":5,"column_end":13},"name":"store_be","qualname":"::field::BitField::store_be","value":"pub fn store_be<M>(&mut Self, M) where M: BitMemory","parent":{"krate":0,"index":558},"children":[],"decl_id":null,"docs":" Stores into `self`, using big-endian element ordering.","sig":null,"attributes":[{"value":"/ Stores into `self`, using big-endian element ordering.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":94434,"byte_end":94492,"line_start":268,"line_end":268,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":94494,"byte_end":94497,"line_start":269,"line_end":269,"column_start":2,"column_end":5}},{"value":"/ This function interprets a multi-element slice as having its most","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":94499,"byte_end":94568,"line_start":270,"line_end":270,"column_start":2,"column_end":71}},{"value":"/ significant chunk in the low memory address, and its least significant","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":94570,"byte_end":94644,"line_start":271,"line_end":271,"column_start":2,"column_end":76}},{"value":"/ chunk in the high memory address. Each element `T` is still interpreted","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":94646,"byte_end":94721,"line_start":272,"line_end":272,"column_start":2,"column_end":77}},{"value":"/ from individual bytes according to the local CPU ordering.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":94723,"byte_end":94785,"line_start":273,"line_end":273,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":94787,"byte_end":94790,"line_start":274,"line_end":274,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":94792,"byte_end":94808,"line_start":275,"line_end":275,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":94810,"byte_end":94813,"line_start":276,"line_end":276,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`: A write reference to some bits in memory. This slice must","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":94815,"byte_end":94891,"line_start":277,"line_end":277,"column_start":2,"column_end":78}},{"value":"/   be trimmed to have a width no more than the `M::BITS` width of the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":94893,"byte_end":94965,"line_start":278,"line_end":278,"column_start":2,"column_end":74}},{"value":"/   type being stored. This can be accomplished with range indexing on a","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":94967,"byte_end":95041,"line_start":279,"line_end":279,"column_start":2,"column_end":76}},{"value":"/   larger slice.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":95043,"byte_end":95062,"line_start":280,"line_end":280,"column_start":2,"column_end":21}},{"value":"/ - `value`: A value, whose `self.len()` least significant bits will be","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":95064,"byte_end":95137,"line_start":281,"line_end":281,"column_start":2,"column_end":75}},{"value":"/   stored into `self`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":95139,"byte_end":95164,"line_start":282,"line_end":282,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":95166,"byte_end":95169,"line_start":283,"line_end":283,"column_start":2,"column_end":5}},{"value":"/ # Behavior","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":95171,"byte_end":95185,"line_start":284,"line_end":284,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":95187,"byte_end":95190,"line_start":285,"line_end":285,"column_start":2,"column_end":5}},{"value":"/ The `self.len()` least significant bits of `value` are written into the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":95192,"byte_end":95267,"line_start":286,"line_end":286,"column_start":2,"column_end":77}},{"value":"/ domain of `self`. If `self` spans multiple elements `T`, then the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":95269,"byte_end":95338,"line_start":287,"line_end":287,"column_start":2,"column_end":71}},{"value":"/ lowest-address `T` is interpreted as containing the most significant","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":95340,"byte_end":95412,"line_start":288,"line_end":288,"column_start":2,"column_end":74}},{"value":"/ bits of the `M` return value, and the highest-address `T` is interpreted","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":95414,"byte_end":95490,"line_start":289,"line_end":289,"column_start":2,"column_end":78}},{"value":"/ as containing its least significant bits.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":95492,"byte_end":95537,"line_start":290,"line_end":290,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":95539,"byte_end":95542,"line_start":291,"line_end":291,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":95544,"byte_end":95556,"line_start":292,"line_end":292,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":95558,"byte_end":95561,"line_start":293,"line_end":293,"column_start":2,"column_end":5}},{"value":"/ This method is encouraged to panic if `self` is empty, or wider than a","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":95563,"byte_end":95637,"line_start":294,"line_end":294,"column_start":2,"column_end":76}},{"value":"/ single element `M`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":95639,"byte_end":95662,"line_start":295,"line_end":295,"column_start":2,"column_end":25}}]},{"kind":"Mod","id":{"krate":0,"index":619},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"index","qualname":"::index","value":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","parent":null,"children":[{"krate":0,"index":620},{"krate":0,"index":621},{"krate":0,"index":624},{"krate":0,"index":627},{"krate":0,"index":628},{"krate":0,"index":631},{"krate":0,"index":632},{"krate":0,"index":635},{"krate":0,"index":638},{"krate":0,"index":639},{"krate":0,"index":641},{"krate":0,"index":644},{"krate":0,"index":647},{"krate":0,"index":648},{"krate":0,"index":651},{"krate":0,"index":654},{"krate":0,"index":655},{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":661},{"krate":0,"index":664},{"krate":0,"index":2438},{"krate":0,"index":2442},{"krate":0,"index":2445},{"krate":0,"index":2447},{"krate":0,"index":2450},{"krate":0,"index":2452},{"krate":0,"index":2455},{"krate":0,"index":2459},{"krate":0,"index":2462},{"krate":0,"index":2464},{"krate":0,"index":2468},{"krate":0,"index":668},{"krate":0,"index":691},{"krate":0,"index":694},{"krate":0,"index":697},{"krate":0,"index":2471},{"krate":0,"index":2475},{"krate":0,"index":2478},{"krate":0,"index":2480},{"krate":0,"index":2483},{"krate":0,"index":2485},{"krate":0,"index":2488},{"krate":0,"index":2492},{"krate":0,"index":2495},{"krate":0,"index":2497},{"krate":0,"index":2501},{"krate":0,"index":700},{"krate":0,"index":707},{"krate":0,"index":710},{"krate":0,"index":2504},{"krate":0,"index":2508},{"krate":0,"index":2511},{"krate":0,"index":2513},{"krate":0,"index":2516},{"krate":0,"index":2518},{"krate":0,"index":2521},{"krate":0,"index":2525},{"krate":0,"index":2528},{"krate":0,"index":2530},{"krate":0,"index":2534},{"krate":0,"index":713},{"krate":0,"index":720},{"krate":0,"index":2537},{"krate":0,"index":2540},{"krate":0,"index":2543},{"krate":0,"index":2545},{"krate":0,"index":2548},{"krate":0,"index":2550},{"krate":0,"index":2553},{"krate":0,"index":2557},{"krate":0,"index":2560},{"krate":0,"index":2562},{"krate":0,"index":2566},{"krate":0,"index":723},{"krate":0,"index":732},{"krate":0,"index":735},{"krate":0,"index":2569},{"krate":0,"index":2572},{"krate":0,"index":2575},{"krate":0,"index":2577},{"krate":0,"index":2580},{"krate":0,"index":2582},{"krate":0,"index":2585},{"krate":0,"index":2589},{"krate":0,"index":2592},{"krate":0,"index":2594},{"krate":0,"index":2598},{"krate":0,"index":738},{"krate":0,"index":747},{"krate":0,"index":750},{"krate":0,"index":753},{"krate":0,"index":757},{"krate":0,"index":761},{"krate":0,"index":765}],"decl_id":null,"docs":" Typed metadata of memory elements.","sig":null,"attributes":[{"value":"* Typed metadata of memory elements.\n\nThis module provides types which guarantee certain properties about working with\nindividual bits of memory elements.\n\nThe main advantage of the types in this module is that they provide\ntype-dependent range constrictions for index values, making it impossible to\nhave an index out of bounds for a memory element, and creating a sequence of\ntype transformations that give assurance about the continued validity of each\nvalue in its surrounding context.\n\nBy eliminating public constructors from arbitrary integers, `bitvec` can\nguarantee that only it can produce seed values, and only trusted functions can\ntransform their numeric values or types, until the program reaches the property\nit requires. This chain of assurance means that operations that interact with\nmemory can be confident in the correctness of their actions and effects.\n\n# Type Sequence\n\nThe library produces `BitIdx` values from region computation. These types cannot\nbe publicly constructed, and are only ever the result of pointer analysis. As\nsuch, they rely on correctness of the memory regions provided to library entry\npoints, and those entry points can leverage the Rust type system to ensure\nsafety there.\n\n`BitIdx` is transformed to `BitPos` through the `BitOrder` trait, which has an\nassociated verification function to prove that implementations are correct.\n`BitPos` is the only type that can describe memory operations, and is used to\ncreate selection masks of `BitSel` and `BitMask`.\n!*/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":110819,"byte_end":112327,"line_start":1,"line_end":30,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":2438},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":114115,"byte_end":114121,"line_start":116,"line_end":116,"column_start":12,"column_end":18},"name":"BitIdx","qualname":"::index::BitIdx","value":"BitIdx {  }","parent":null,"children":[{"krate":0,"index":2440},{"krate":0,"index":2441}],"decl_id":null,"docs":" A semantic index of a single bit within a memory element `M`.","sig":null,"attributes":[{"value":"* A semantic index of a single bit within a memory element `M`.\n\nThis type is a counter in the range `0 .. M::BITS`, and marks the semantic\nposition of a bit according to some [`BitOrder`] implementation. As an abstract\ncounter, it can be used in arithmetic without having to go through `BitOrder`\ntranslation to an electrical position.\n\n# Type Parameters\n\n- `M`: The register type that values of this type govern.\n\n# Validity\n\nValues of this type are required to be in the range `0 .. M::BITS`. Any value\noutside this range will cause the program state to become invalid, and the\nlibrary’s behavior is unspecified. The library will never produce such an\ninvalid value.\n\n# Construction\n\nThis type cannot be constructed outside the `bitvec` crate. `bitvec` will\nconstruct safe values of this type, and allows users to view them and use them\nto construct other index types from them. All values of this type constructed by\n`bitvec` are known to be correct based on user input to the crate.\n**/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":112966,"byte_end":113961,"line_start":88,"line_end":112,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":114013,"byte_end":114033,"line_start":114,"line_end":114,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":676},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":116601,"byte_end":116609,"line_start":214,"line_end":214,"column_start":9,"column_end":17},"name":"position","qualname":"<BitIdx<M>>::position","value":"pub fn position<O>(Self) -> BitPos<M> where O: BitOrder","parent":null,"children":[],"decl_id":null,"docs":" Computes the bit position corresponding to `self` under some ordering.","sig":null,"attributes":[{"value":"/ Computes the bit position corresponding to `self` under some ordering.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":116395,"byte_end":116469,"line_start":209,"line_end":209,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":116471,"byte_end":116474,"line_start":210,"line_end":210,"column_start":2,"column_end":5}},{"value":"/ This forwards to `O::at::<M>`, and is the only public, safe, constructor","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":116476,"byte_end":116552,"line_start":211,"line_end":211,"column_start":2,"column_end":78}},{"value":"/ for a position counter.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":116554,"byte_end":116581,"line_start":212,"line_end":212,"column_start":2,"column_end":29}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":116583,"byte_end":116592,"line_start":213,"line_end":213,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":678},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":116881,"byte_end":116887,"line_start":224,"line_end":224,"column_start":9,"column_end":15},"name":"select","qualname":"<BitIdx<M>>::select","value":"pub fn select<O>(Self) -> BitSel<M> where O: BitOrder","parent":null,"children":[],"decl_id":null,"docs":" Computes the bit selector corresponding to `self` under an ordering.","sig":null,"attributes":[{"value":"/ Computes the bit selector corresponding to `self` under an ordering.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":116677,"byte_end":116749,"line_start":219,"line_end":219,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":116751,"byte_end":116754,"line_start":220,"line_end":220,"column_start":2,"column_end":5}},{"value":"/ This forwards to `O::select::<M>`, and is the only public, safe,","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":116756,"byte_end":116824,"line_start":221,"line_end":221,"column_start":2,"column_end":70}},{"value":"/ constructor for a bit selector.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":116826,"byte_end":116861,"line_start":222,"line_end":222,"column_start":2,"column_end":37}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":116863,"byte_end":116872,"line_start":223,"line_end":223,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":680},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":117165,"byte_end":117169,"line_start":234,"line_end":234,"column_start":9,"column_end":13},"name":"mask","qualname":"<BitIdx<M>>::mask","value":"pub fn mask<O>(Self) -> BitMask<M> where O: BitOrder","parent":null,"children":[],"decl_id":null,"docs":" Computes the bit selector for `self` as an accessor mask.","sig":null,"attributes":[{"value":"/ Computes the bit selector for `self` as an accessor mask.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":116959,"byte_end":117020,"line_start":229,"line_end":229,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":117022,"byte_end":117025,"line_start":230,"line_end":230,"column_start":2,"column_end":5}},{"value":"/ This is a type-cast over `Self::select`. It is one of the few public,","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":117027,"byte_end":117100,"line_start":231,"line_end":231,"column_start":2,"column_end":75}},{"value":"/ safe, constructors of a multi-bit mask.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":117102,"byte_end":117145,"line_start":232,"line_end":232,"column_start":2,"column_end":45}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":117147,"byte_end":117156,"line_start":233,"line_end":233,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":682},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":117302,"byte_end":117307,"line_start":241,"line_end":241,"column_start":9,"column_end":14},"name":"value","qualname":"<BitIdx<M>>::value","value":"pub fn value(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Views the internal index value.\n","sig":null,"attributes":[{"value":"/ Views the internal index value.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":117247,"byte_end":117282,"line_start":239,"line_end":239,"column_start":2,"column_end":37}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":117284,"byte_end":117293,"line_start":240,"line_end":240,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":686},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":118299,"byte_end":118304,"line_start":273,"line_end":273,"column_start":9,"column_end":14},"name":"range","qualname":"<BitIdx<M>>::range","value":"pub fn range(Self, BitTail<M>) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Constructs a range over all indices between a start and end point.","sig":null,"attributes":[{"value":"/ Constructs a range over all indices between a start and end point.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":117570,"byte_end":117640,"line_start":253,"line_end":253,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":117642,"byte_end":117645,"line_start":254,"line_end":254,"column_start":2,"column_end":5}},{"value":"/ Because implementation details of the `RangeOps` family are not yet","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":117647,"byte_end":117718,"line_start":255,"line_end":255,"column_start":2,"column_end":73}},{"value":"/ stable, and heterogenous ranges are not supported, this must be an","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":117720,"byte_end":117790,"line_start":256,"line_end":256,"column_start":2,"column_end":72}},{"value":"/ opaque iterator rather than a direct `Range<BitIdx<M>>`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":117792,"byte_end":117852,"line_start":257,"line_end":257,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":117854,"byte_end":117857,"line_start":258,"line_end":258,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":117859,"byte_end":117875,"line_start":259,"line_end":259,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":117877,"byte_end":117880,"line_start":260,"line_end":260,"column_start":2,"column_end":5}},{"value":"/ - `from`: The inclusive low bound of the range. This will be the first","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":117882,"byte_end":117956,"line_start":261,"line_end":261,"column_start":2,"column_end":76}},{"value":"/   index produced by the iterator.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":117958,"byte_end":117995,"line_start":262,"line_end":262,"column_start":2,"column_end":39}},{"value":"/ - `upto`: The exclusive high bound of the range. The iterator will halt","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":117997,"byte_end":118072,"line_start":263,"line_end":263,"column_start":2,"column_end":77}},{"value":"/   before yielding an index of this value.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":118074,"byte_end":118119,"line_start":264,"line_end":264,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":118121,"byte_end":118124,"line_start":265,"line_end":265,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":118126,"byte_end":118139,"line_start":266,"line_end":266,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":118141,"byte_end":118144,"line_start":267,"line_end":267,"column_start":2,"column_end":5}},{"value":"/ An opaque iterator that is equivalent to the range `from .. upto`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":118146,"byte_end":118216,"line_start":268,"line_end":268,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":118218,"byte_end":118221,"line_start":269,"line_end":269,"column_start":2,"column_end":5}},{"value":"/ # Requirements","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":118223,"byte_end":118241,"line_start":270,"line_end":270,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":118243,"byte_end":118246,"line_start":271,"line_end":271,"column_start":2,"column_end":5}},{"value":"/ `from` must be no greater than `upto`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":118248,"byte_end":118290,"line_start":272,"line_end":272,"column_start":2,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":2471},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":124455,"byte_end":124462,"line_start":453,"line_end":453,"column_start":12,"column_end":19},"name":"BitTail","qualname":"::index::BitTail","value":"BitTail {  }","parent":null,"children":[{"krate":0,"index":2473},{"krate":0,"index":2474}],"decl_id":null,"docs":" Semantic index of a dead bit *after* a live region.","sig":null,"attributes":[{"value":"* Semantic index of a dead bit *after* a live region.\n\nLike `BitIdx<M>`, this type indicates a semantic counter within a memory element\n`M`. However, it marks the position of a *dead* bit *after* a live range. This\nmeans that it is permitted to have the value of `M::BITS`, to indicate that a\nlive region touches the semantic back edge of the element `M`.\n\nInstances of this type will only contain the value `0` when the span that\ncreated them is empty. Otherwise, they will have the range `1 ..= M::BITS`.\n\nThis type cannot be used for indexing into an element `M`, and does not\ntranslate to a `BitPos<M>`. It has no behavior other than viewing its internal\ncounter for region arithmetic.\n\n# Type Parameters\n\n- `M`: The register type that values of this type govern.\n\n# Validity\n\nValues of this type are required to be in the range `0 ..= M::BITS`. Any value\noutside this range will cause the program state to become invalid, and the\nlibrary’s behavior is unspecified. The library will never produce such an\ninvalid value.\n\n# Construction\n\nThis type cannot be directly constructed outside the `bitvec` crate. `bitvec`\nwill construct safe values of this type, and allows users to view them and use\nthem for region computation. All values of this type constructed by `bitvec` are\nknown to be correct based on user input to the crate.\n**/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":122957,"byte_end":124297,"line_start":418,"line_end":449,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":124353,"byte_end":124373,"line_start":451,"line_end":451,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":705},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":125497,"byte_end":125502,"line_start":498,"line_end":498,"column_start":9,"column_end":14},"name":"value","qualname":"<BitTail<M>>::value","value":"pub fn value(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Views the internal tail value.\n","sig":null,"attributes":[{"value":"/ Views the internal tail value.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":125443,"byte_end":125477,"line_start":496,"line_end":496,"column_start":2,"column_end":36}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":125479,"byte_end":125488,"line_start":497,"line_end":497,"column_start":2,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":2504},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":128936,"byte_end":128942,"line_start":610,"line_end":610,"column_start":12,"column_end":18},"name":"BitPos","qualname":"::index::BitPos","value":"BitPos {  }","parent":null,"children":[{"krate":0,"index":2506},{"krate":0,"index":2507}],"decl_id":null,"docs":" An electrical position of a single bit within a memory element `M`.","sig":null,"attributes":[{"value":"* An electrical position of a single bit within a memory element `M`.\n\nThis type is used as the shift distance in the expression `1 << shamt`. It is\nonly produced by the translation of a semantic `BitIdx<M>` according to some\n[`BitOrder`] implementation using `BitOrder::at`. It can only be used for the\nconstruction of bit masks used to manipulate a register value during memory\naccess, and serves no other purpose.\n\n# Type Parameters\n\n- `M`: The register type that values of this type govern.\n\n# Validity\n\nValues of this type are required to be in the range `0 .. M::BITS`. Any value\noutside this range will cause the program state to become invalid, and the\nlibrary’s behavior is unspecified. The library will never produce such an\ninvalid value, and users are required to do the same.\n\n# Construction\n\nThis type offers public unsafe constructors. `bitvec` does not offer any public\nAPIs that take values of this type directly; it always routes through `BitOrder`\nimplementations. As `BitIdx` will only be constructed from safe, correct,\nvalues, and `BitOrder::at` is the only `BitIdx -> BitPos` transform function,\nall constructed `BitPos` values are known to be memory-correct.\n**/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":127592,"byte_end":128782,"line_start":580,"line_end":606,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":128834,"byte_end":128854,"line_start":608,"line_end":608,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":715},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":129650,"byte_end":129653,"line_start":638,"line_end":638,"column_start":16,"column_end":19},"name":"new","qualname":"<BitPos<M>>::new","value":"pub unsafe fn new(u8) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Wraps a value as a known-good position within an `M` element.","sig":null,"attributes":[{"value":"/ Wraps a value as a known-good position within an `M` element.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":129154,"byte_end":129219,"line_start":622,"line_end":622,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":129221,"byte_end":129224,"line_start":623,"line_end":623,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":129226,"byte_end":129242,"line_start":624,"line_end":624,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":129244,"byte_end":129247,"line_start":625,"line_end":625,"column_start":2,"column_end":5}},{"value":"/ - `pos`: An electrical position of a bit within an `M` element.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":129249,"byte_end":129316,"line_start":626,"line_end":626,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":129318,"byte_end":129321,"line_start":627,"line_end":627,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":129323,"byte_end":129336,"line_start":628,"line_end":628,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":129338,"byte_end":129341,"line_start":629,"line_end":629,"column_start":2,"column_end":5}},{"value":"/ If `pos` is outside the valid range `0 .. M::BITS`, this returns `None`;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":129343,"byte_end":129419,"line_start":630,"line_end":630,"column_start":2,"column_end":78}},{"value":"/ otherwise, it returns a `BitPos` wrapping the `pos` value.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":129421,"byte_end":129483,"line_start":631,"line_end":631,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":129485,"byte_end":129488,"line_start":632,"line_end":632,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":129490,"byte_end":129502,"line_start":633,"line_end":633,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":129504,"byte_end":129507,"line_start":634,"line_end":634,"column_start":2,"column_end":5}},{"value":"/ This function must only be called within a `BitOrder::at` implementation","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":129509,"byte_end":129585,"line_start":635,"line_end":635,"column_start":2,"column_end":78}},{"value":"/ which is verified to be correct.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":129587,"byte_end":129623,"line_start":636,"line_end":636,"column_start":2,"column_end":38}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":129625,"byte_end":129634,"line_start":637,"line_end":637,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":716},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":130349,"byte_end":130362,"line_start":665,"line_end":665,"column_start":16,"column_end":29},"name":"new_unchecked","qualname":"<BitPos<M>>::new_unchecked","value":"pub unsafe fn new_unchecked(u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps a value as an assumed-good position within an `M` element.","sig":null,"attributes":[{"value":"/ Wraps a value as an assumed-good position within an `M` element.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":129826,"byte_end":129894,"line_start":646,"line_end":646,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":129896,"byte_end":129899,"line_start":647,"line_end":647,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":129901,"byte_end":129917,"line_start":648,"line_end":648,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":129919,"byte_end":129922,"line_start":649,"line_end":649,"column_start":2,"column_end":5}},{"value":"/ - `pos`: An electrical position within an `M` element.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":129924,"byte_end":129982,"line_start":650,"line_end":650,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":129984,"byte_end":129987,"line_start":651,"line_end":651,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":129989,"byte_end":130002,"line_start":652,"line_end":652,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":130004,"byte_end":130007,"line_start":653,"line_end":653,"column_start":2,"column_end":5}},{"value":"/ `pos` wrapped in a `BitPos`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":130009,"byte_end":130041,"line_start":654,"line_end":654,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":130043,"byte_end":130046,"line_start":655,"line_end":655,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":130048,"byte_end":130060,"line_start":656,"line_end":656,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":130062,"byte_end":130065,"line_start":657,"line_end":657,"column_start":2,"column_end":5}},{"value":"/ `pos` **must** be within the valid range `0 .. M::BITS`. In debug","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":130067,"byte_end":130136,"line_start":658,"line_end":658,"column_start":2,"column_end":71}},{"value":"/ builds, invalid `pos` values cause a panic; release builds do not check","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":130138,"byte_end":130213,"line_start":659,"line_end":659,"column_start":2,"column_end":77}},{"value":"/ the input.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":130215,"byte_end":130229,"line_start":660,"line_end":660,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":130231,"byte_end":130234,"line_start":661,"line_end":661,"column_start":2,"column_end":5}},{"value":"/ This function must only be called in a correct `BitOrder::at`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":130236,"byte_end":130301,"line_start":662,"line_end":662,"column_start":2,"column_end":67}},{"value":"/ implementation.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":130303,"byte_end":130322,"line_start":663,"line_end":663,"column_start":2,"column_end":21}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":130324,"byte_end":130333,"line_start":664,"line_end":664,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":717},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":130776,"byte_end":130782,"line_start":687,"line_end":687,"column_start":9,"column_end":15},"name":"select","qualname":"<BitPos<M>>::select","value":"pub fn select(Self) -> BitSel<M>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a one-hot selection mask from the position counter.","sig":null,"attributes":[{"value":"/ Constructs a one-hot selection mask from the position counter.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":130513,"byte_end":130579,"line_start":675,"line_end":675,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":130581,"byte_end":130584,"line_start":676,"line_end":676,"column_start":2,"column_end":5}},{"value":"/ This is a well-typed `1 << pos`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":130586,"byte_end":130622,"line_start":677,"line_end":677,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":130624,"byte_end":130627,"line_start":678,"line_end":678,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":130629,"byte_end":130645,"line_start":679,"line_end":679,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":130647,"byte_end":130650,"line_start":680,"line_end":680,"column_start":2,"column_end":5}},{"value":"/ - `self`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":130652,"byte_end":130664,"line_start":681,"line_end":681,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":130666,"byte_end":130669,"line_start":682,"line_end":682,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":130671,"byte_end":130684,"line_start":683,"line_end":683,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":130686,"byte_end":130689,"line_start":684,"line_end":684,"column_start":2,"column_end":5}},{"value":"/ A one-hot mask for `M` selecting the bit specified by `self`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":130691,"byte_end":130756,"line_start":685,"line_end":685,"column_start":2,"column_end":67}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":130758,"byte_end":130767,"line_start":686,"line_end":686,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":718},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":131124,"byte_end":131128,"line_start":703,"line_end":703,"column_start":9,"column_end":13},"name":"mask","qualname":"<BitPos<M>>::mask","value":"pub fn mask(Self) -> BitMask<M>","parent":null,"children":[],"decl_id":null,"docs":" Constructs an untyped bitmask from the position counter.","sig":null,"attributes":[{"value":"/ Constructs an untyped bitmask from the position counter.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":130841,"byte_end":130901,"line_start":691,"line_end":691,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":130903,"byte_end":130906,"line_start":692,"line_end":692,"column_start":2,"column_end":5}},{"value":"/ This removes the one-hot requirement from the selection mask.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":130908,"byte_end":130973,"line_start":693,"line_end":693,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":130975,"byte_end":130978,"line_start":694,"line_end":694,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":130980,"byte_end":130996,"line_start":695,"line_end":695,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":130998,"byte_end":131001,"line_start":696,"line_end":696,"column_start":2,"column_end":5}},{"value":"/ - `self`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":131003,"byte_end":131015,"line_start":697,"line_end":697,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":131017,"byte_end":131020,"line_start":698,"line_end":698,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":131022,"byte_end":131035,"line_start":699,"line_end":699,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":131037,"byte_end":131040,"line_start":700,"line_end":700,"column_start":2,"column_end":5}},{"value":"/ A mask for `M` selecting only the bit specified by `self`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":131042,"byte_end":131104,"line_start":701,"line_end":701,"column_start":2,"column_end":64}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":131106,"byte_end":131115,"line_start":702,"line_end":702,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":719},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":131246,"byte_end":131251,"line_start":709,"line_end":709,"column_start":9,"column_end":14},"name":"value","qualname":"<BitPos<M>>::value","value":"pub fn value(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Views the internal position value.\n","sig":null,"attributes":[{"value":"/ Views the internal position value.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":131188,"byte_end":131226,"line_start":707,"line_end":707,"column_start":2,"column_end":40}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":131228,"byte_end":131237,"line_start":708,"line_end":708,"column_start":2,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":2537},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":132453,"byte_end":132459,"line_start":748,"line_end":748,"column_start":12,"column_end":18},"name":"BitSel","qualname":"::index::BitSel","value":"BitSel {  }","parent":null,"children":[{"krate":0,"index":2539}],"decl_id":null,"docs":" A one-hot selection mask, to be applied to a memory element `M`.","sig":null,"attributes":[{"value":"* A one-hot selection mask, to be applied to a memory element `M`.\n\nThis type selects exactly one bit, and is produced by the conversion of a\nsemantic [`BitIdx`] to a [`BitPos`] through a [`BitOrder`] implementation, and\nthen applying `1 << pos`. Values of this type are used to select only the bit\nspecified by a `BitIdx` when performing memory operations.\n\n# Type Parameters\n\n- `M`: The register type that values of this type govern.\n\n# Validity\n\nValues of this type are required to have exactly one bit set to `1` and all\nother bits set to `0`.\n\n# Construction\n\nThis type is only constructed from `BitPos` values, which are themselves only\nconstructed by a chain of known-good `BitIdx` values passed into known-correct\n`BitOrder` implementations. As such, `bitvec` can use `BitSel` values with full\nconfidence that they are correct in the surrounding context.\n**/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":131482,"byte_end":132350,"line_start":723,"line_end":745,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":132351,"byte_end":132371,"line_start":746,"line_end":746,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":725},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":133063,"byte_end":133066,"line_start":774,"line_end":774,"column_start":16,"column_end":19},"name":"new","qualname":"<BitSel<M>>::new","value":"pub unsafe fn new(M) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Wraps a selector value as a known-good selection of an `M` element.","sig":null,"attributes":[{"value":"/ Wraps a selector value as a known-good selection of an `M` element.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":132568,"byte_end":132639,"line_start":758,"line_end":758,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":132641,"byte_end":132644,"line_start":759,"line_end":759,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":132646,"byte_end":132662,"line_start":760,"line_end":760,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":132664,"byte_end":132667,"line_start":761,"line_end":761,"column_start":2,"column_end":5}},{"value":"/ - `sel`: A one-hot selection mask of a bit in an `M` element.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":132669,"byte_end":132734,"line_start":762,"line_end":762,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":132736,"byte_end":132739,"line_start":763,"line_end":763,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":132741,"byte_end":132754,"line_start":764,"line_end":764,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":132756,"byte_end":132759,"line_start":765,"line_end":765,"column_start":2,"column_end":5}},{"value":"/ If `sel` does not have exactly one bit set, this returns `None`;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":132761,"byte_end":132829,"line_start":766,"line_end":766,"column_start":2,"column_end":70}},{"value":"/ otherwise, it returns a `BitSel` wrapping the `sel` value.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":132831,"byte_end":132893,"line_start":767,"line_end":767,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":132895,"byte_end":132898,"line_start":768,"line_end":768,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":132900,"byte_end":132912,"line_start":769,"line_end":769,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":132914,"byte_end":132917,"line_start":770,"line_end":770,"column_start":2,"column_end":5}},{"value":"/ This function must only be called within a `BitOrder::select`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":132919,"byte_end":132984,"line_start":771,"line_end":771,"column_start":2,"column_end":67}},{"value":"/ implementation that is verified to be correct.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":132986,"byte_end":133036,"line_start":772,"line_end":772,"column_start":2,"column_end":52}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":133038,"byte_end":133047,"line_start":773,"line_end":773,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":726},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":133718,"byte_end":133731,"line_start":800,"line_end":800,"column_start":16,"column_end":29},"name":"new_unchecked","qualname":"<BitSel<M>>::new_unchecked","value":"pub unsafe fn new_unchecked(M) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps a selector value as an assumed-good selection of an `M` element.","sig":null,"attributes":[{"value":"/ Wraps a selector value as an assumed-good selection of an `M` element.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":133170,"byte_end":133244,"line_start":781,"line_end":781,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":133246,"byte_end":133249,"line_start":782,"line_end":782,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":133251,"byte_end":133267,"line_start":783,"line_end":783,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":133269,"byte_end":133272,"line_start":784,"line_end":784,"column_start":2,"column_end":5}},{"value":"/ - `sel`: A one-hot selection mask of a bit in an `M` element.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":133274,"byte_end":133339,"line_start":785,"line_end":785,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":133341,"byte_end":133344,"line_start":786,"line_end":786,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":133346,"byte_end":133359,"line_start":787,"line_end":787,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":133361,"byte_end":133364,"line_start":788,"line_end":788,"column_start":2,"column_end":5}},{"value":"/ `sel` wrapped in a `BitSel`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":133366,"byte_end":133398,"line_start":789,"line_end":789,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":133400,"byte_end":133403,"line_start":790,"line_end":790,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":133405,"byte_end":133417,"line_start":791,"line_end":791,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":133419,"byte_end":133422,"line_start":792,"line_end":792,"column_start":2,"column_end":5}},{"value":"/ `sel` **must** have exactly one bit set high and all others low. In","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":133424,"byte_end":133495,"line_start":793,"line_end":793,"column_start":2,"column_end":73}},{"value":"/ debug builds, invalid `sel` values cause a panic; release builds do not","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":133497,"byte_end":133572,"line_start":794,"line_end":794,"column_start":2,"column_end":77}},{"value":"/ check the input.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":133574,"byte_end":133594,"line_start":795,"line_end":795,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":133596,"byte_end":133599,"line_start":796,"line_end":796,"column_start":2,"column_end":5}},{"value":"/ This function must only be called in a correct `BitOrder::select`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":133601,"byte_end":133670,"line_start":797,"line_end":797,"column_start":2,"column_end":71}},{"value":"/ implementation.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":133672,"byte_end":133691,"line_start":798,"line_end":798,"column_start":2,"column_end":21}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":133693,"byte_end":133702,"line_start":799,"line_end":799,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":727},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":134009,"byte_end":134013,"line_start":814,"line_end":814,"column_start":9,"column_end":13},"name":"mask","qualname":"<BitSel<M>>::mask","value":"pub fn mask(Self) -> BitMask<M> where M: BitMemory","parent":null,"children":[],"decl_id":null,"docs":" Converts the selector into a bit mask.","sig":null,"attributes":[{"value":"/ Converts the selector into a bit mask.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":133916,"byte_end":133958,"line_start":810,"line_end":810,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":133960,"byte_end":133963,"line_start":811,"line_end":811,"column_start":2,"column_end":5}},{"value":"/ This is a type-cast.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":133965,"byte_end":133989,"line_start":812,"line_end":812,"column_start":2,"column_end":26}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":133991,"byte_end":134000,"line_start":813,"line_end":813,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":728},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":134142,"byte_end":134147,"line_start":821,"line_end":821,"column_start":9,"column_end":14},"name":"value","qualname":"<BitSel<M>>::value","value":"pub fn value(Self) -> M","parent":null,"children":[],"decl_id":null,"docs":" Views the internal selector value.\n","sig":null,"attributes":[{"value":"/ Views the internal selector value.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":134084,"byte_end":134122,"line_start":819,"line_end":819,"column_start":2,"column_end":40}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":134124,"byte_end":134133,"line_start":820,"line_end":820,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":729},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":134231,"byte_end":134240,"line_start":826,"line_end":826,"column_start":9,"column_end":18},"name":"range_all","qualname":"<BitSel<M>>::range_all","value":"pub fn range_all() -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Ranges over all possible selector values.\n","sig":null,"attributes":[{"value":"/ Ranges over all possible selector values.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":134177,"byte_end":134222,"line_start":825,"line_end":825,"column_start":2,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":2569},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":135429,"byte_end":135436,"line_start":868,"line_end":868,"column_start":12,"column_end":19},"name":"BitMask","qualname":"::index::BitMask","value":"BitMask {  }","parent":null,"children":[{"krate":0,"index":2571}],"decl_id":null,"docs":" A multi-bit selection mask.","sig":null,"attributes":[{"value":"* A multi-bit selection mask.\n\nUnlike [`BitSel`], which enforces a strict one-hot mask encoding, this mask type\npermits any number of bits to be set or unset. This is used to accumulate\nselections for a batch operation on a register.\n\n# Construction\n\nIt is only constructed by accumulating `BitSel` values. The chain of custody for\nsafe construction in this module and in `order` ensures that all masks that are\napplied to register values can be trusted to not cause memory unsafety.\n**/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":134837,"byte_end":135326,"line_start":854,"line_end":865,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":135327,"byte_end":135347,"line_start":866,"line_end":866,"column_start":1,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":740},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":135588,"byte_end":135591,"line_start":879,"line_end":879,"column_start":12,"column_end":15},"name":"ALL","qualname":"::index::BitMask::<M>::ALL","value":"Self","parent":{"krate":0,"index":738},"children":[],"decl_id":null,"docs":" A full mask.\n","sig":null,"attributes":[{"value":"/ A full mask.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":135560,"byte_end":135576,"line_start":878,"line_end":878,"column_start":2,"column_end":18}}]},{"kind":"Const","id":{"krate":0,"index":741},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":135651,"byte_end":135655,"line_start":881,"line_end":881,"column_start":12,"column_end":16},"name":"ZERO","qualname":"::index::BitMask::<M>::ZERO","value":"Self","parent":{"krate":0,"index":738},"children":[],"decl_id":null,"docs":" An empty mask.\n","sig":null,"attributes":[{"value":"/ An empty mask.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":135621,"byte_end":135639,"line_start":880,"line_end":880,"column_start":2,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":742},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":136300,"byte_end":136303,"line_start":904,"line_end":904,"column_start":16,"column_end":19},"name":"new","qualname":"<BitMask<M>>::new","value":"pub unsafe fn new(M) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps any `M` value as a bit-mask.","sig":null,"attributes":[{"value":"/ Wraps any `M` value as a bit-mask.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":135687,"byte_end":135725,"line_start":883,"line_end":883,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":135727,"byte_end":135730,"line_start":884,"line_end":884,"column_start":2,"column_end":5}},{"value":"/ This constructor is provided to explicitly declare that an operation is","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":135732,"byte_end":135807,"line_start":885,"line_end":885,"column_start":2,"column_end":77}},{"value":"/ discarding the numeric value of an integer and reading it only as a","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":135809,"byte_end":135880,"line_start":886,"line_end":886,"column_start":2,"column_end":73}},{"value":"/ bit-mask.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":135882,"byte_end":135895,"line_start":887,"line_end":887,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":135897,"byte_end":135900,"line_start":888,"line_end":888,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":135902,"byte_end":135918,"line_start":889,"line_end":889,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":135920,"byte_end":135923,"line_start":890,"line_end":890,"column_start":2,"column_end":5}},{"value":"/ - `mask`: Some integer value","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":135925,"byte_end":135957,"line_start":891,"line_end":891,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":135959,"byte_end":135962,"line_start":892,"line_end":892,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":135964,"byte_end":135977,"line_start":893,"line_end":893,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":135979,"byte_end":135982,"line_start":894,"line_end":894,"column_start":2,"column_end":5}},{"value":"/ `mask` wrapped as a bit-mask, with its numeric context discarded.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":135984,"byte_end":136053,"line_start":895,"line_end":895,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":136055,"byte_end":136058,"line_start":896,"line_end":896,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":136060,"byte_end":136072,"line_start":897,"line_end":897,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":136074,"byte_end":136077,"line_start":898,"line_end":898,"column_start":2,"column_end":5}},{"value":"/ This function must only be called within a `BitOrder::mask`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":136079,"byte_end":136142,"line_start":899,"line_end":899,"column_start":2,"column_end":65}},{"value":"/ implementation which is verified to be correct.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":136144,"byte_end":136195,"line_start":900,"line_end":900,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":136197,"byte_end":136200,"line_start":901,"line_end":901,"column_start":2,"column_end":5}},{"value":"/ Prefer accumulating `BitSel` values using the `Sum` implementation.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":136202,"byte_end":136273,"line_start":902,"line_end":902,"column_start":2,"column_end":73}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":136275,"byte_end":136284,"line_start":903,"line_end":903,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":743},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":136608,"byte_end":136615,"line_start":919,"line_end":919,"column_start":9,"column_end":16},"name":"combine","qualname":"<BitMask<M>>::combine","value":"pub fn combine(Self, BitSel<M>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new mask with a selector bit activated.","sig":null,"attributes":[{"value":"/ Creates a new mask with a selector bit activated.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":136347,"byte_end":136400,"line_start":908,"line_end":908,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":136402,"byte_end":136405,"line_start":909,"line_end":909,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":136407,"byte_end":136423,"line_start":910,"line_end":910,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":136425,"byte_end":136428,"line_start":911,"line_end":911,"column_start":2,"column_end":5}},{"value":"/ - `self`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":136430,"byte_end":136442,"line_start":912,"line_end":912,"column_start":2,"column_end":14}},{"value":"/ - `sel`: The selector bit to activate in the new mask.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":136444,"byte_end":136502,"line_start":913,"line_end":913,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":136504,"byte_end":136507,"line_start":914,"line_end":914,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":136509,"byte_end":136522,"line_start":915,"line_end":915,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":136524,"byte_end":136527,"line_start":916,"line_end":916,"column_start":2,"column_end":5}},{"value":"/ A copy of `self`, with the selector at `sel` activated.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":136529,"byte_end":136588,"line_start":917,"line_end":917,"column_start":2,"column_end":61}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":136590,"byte_end":136599,"line_start":918,"line_end":918,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":744},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":136936,"byte_end":136942,"line_start":935,"line_end":935,"column_start":9,"column_end":15},"name":"insert","qualname":"<BitMask<M>>::insert","value":"pub fn insert(&mut Self, BitSel<M>)","parent":null,"children":[],"decl_id":null,"docs":" Inserts a selector into an existing mask.","sig":null,"attributes":[{"value":"/ Inserts a selector into an existing mask.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":136684,"byte_end":136729,"line_start":924,"line_end":924,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":136731,"byte_end":136734,"line_start":925,"line_end":925,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":136736,"byte_end":136752,"line_start":926,"line_end":926,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":136754,"byte_end":136757,"line_start":927,"line_end":927,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":136759,"byte_end":136776,"line_start":928,"line_end":928,"column_start":2,"column_end":19}},{"value":"/ - `sel`: The selector bit to insert into the mask.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":136778,"byte_end":136832,"line_start":929,"line_end":929,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":136834,"byte_end":136837,"line_start":930,"line_end":930,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":136839,"byte_end":136852,"line_start":931,"line_end":931,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":136854,"byte_end":136857,"line_start":932,"line_end":932,"column_start":2,"column_end":5}},{"value":"/ The selector’s bit in the `self` mask is activated.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":136859,"byte_end":136916,"line_start":933,"line_end":933,"column_start":2,"column_end":57}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":136918,"byte_end":136927,"line_start":934,"line_end":934,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":745},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":137247,"byte_end":137251,"line_start":950,"line_end":950,"column_start":9,"column_end":13},"name":"test","qualname":"<BitMask<M>>::test","value":"pub fn test(Self, BitSel<M>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether a mask contains a given selector bit.","sig":null,"attributes":[{"value":"/ Tests whether a mask contains a given selector bit.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":137001,"byte_end":137056,"line_start":939,"line_end":939,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":137058,"byte_end":137061,"line_start":940,"line_end":940,"column_start":2,"column_end":5}},{"value":"/ # Paramters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":137063,"byte_end":137078,"line_start":941,"line_end":941,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":137080,"byte_end":137083,"line_start":942,"line_end":942,"column_start":2,"column_end":5}},{"value":"/ - `self`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":137085,"byte_end":137097,"line_start":943,"line_end":943,"column_start":2,"column_end":14}},{"value":"/ - `sel`: The selector bit to test in the `self` mask.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":137099,"byte_end":137156,"line_start":944,"line_end":944,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":137158,"byte_end":137161,"line_start":945,"line_end":945,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":137163,"byte_end":137176,"line_start":946,"line_end":946,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":137178,"byte_end":137181,"line_start":947,"line_end":947,"column_start":2,"column_end":5}},{"value":"/ Whether `self` has set the bit at `sel`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":137183,"byte_end":137227,"line_start":948,"line_end":948,"column_start":2,"column_end":46}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":137229,"byte_end":137238,"line_start":949,"line_end":949,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":746},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":137376,"byte_end":137381,"line_start":956,"line_end":956,"column_start":9,"column_end":14},"name":"value","qualname":"<BitMask<M>>::value","value":"pub fn value(Self) -> M","parent":null,"children":[],"decl_id":null,"docs":" Views the internal mask value.\n","sig":null,"attributes":[{"value":"/ Views the internal mask value.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":137322,"byte_end":137356,"line_start":954,"line_end":954,"column_start":2,"column_end":36}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":137358,"byte_end":137367,"line_start":955,"line_end":955,"column_start":2,"column_end":11}}]},{"kind":"Mod","id":{"krate":0,"index":769},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/mem.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mem","qualname":"::mem","value":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/mem.rs","parent":null,"children":[{"krate":0,"index":770},{"krate":0,"index":773},{"krate":0,"index":776},{"krate":0,"index":2601},{"krate":0,"index":2604},{"krate":0,"index":2605},{"krate":0,"index":2608},{"krate":0,"index":2609},{"krate":0,"index":2612},{"krate":0,"index":2613},{"krate":0,"index":2616},{"krate":0,"index":2617},{"krate":0,"index":2620},{"krate":0,"index":2621},{"krate":0,"index":2624},{"krate":0,"index":783},{"krate":0,"index":785},{"krate":0,"index":787},{"krate":0,"index":790}],"decl_id":null,"docs":" Descriptions of integer types","sig":null,"attributes":[{"value":"* Descriptions of integer types\n\nThis module describes the integer types used to hold bare data. This module\ngoverns the way the processor manipulates integer regions of memory, without\nconcern for interaction with specifics of register or bus behavior.\n!*/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/mem.rs","byte_start":140571,"byte_end":140830,"line_start":1,"line_end":6,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":776},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/mem.rs","byte_start":141237,"byte_end":141246,"line_start":21,"line_end":21,"column_start":11,"column_end":20},"name":"BitMemory","qualname":"::mem::BitMemory","value":"BitMemory: IsUnsigned + seal::Sealed","parent":null,"children":[{"krate":0,"index":777},{"krate":0,"index":778},{"krate":0,"index":779},{"krate":0,"index":780},{"krate":0,"index":781}],"decl_id":null,"docs":" Description of an integer type.","sig":null,"attributes":[{"value":"* Description of an integer type.\n\nThis trait provides information used to describe integer-typed regions of memory\nand enables other parts of the crate to adequately describe the memory bus. This\ntrait has **no** bearing on the processor instructions or registers used to\ninteract with memory.\n\nThis trait cannot be implemented outside this crate.\n**/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/mem.rs","byte_start":140872,"byte_end":141226,"line_start":12,"line_end":20,"column_start":1,"column_end":4}}]},{"kind":"Const","id":{"krate":0,"index":777},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/mem.rs","byte_start":141438,"byte_end":141442,"line_start":26,"line_end":26,"column_start":8,"column_end":12},"name":"BITS","qualname":"::mem::BitMemory::BITS","value":"u8","parent":{"krate":0,"index":776},"children":[],"decl_id":null,"docs":" The bit width of the integer.","sig":null,"attributes":[{"value":"/ The bit width of the integer.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/mem.rs","byte_start":141277,"byte_end":141310,"line_start":22,"line_end":22,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/mem.rs","byte_start":141312,"byte_end":141315,"line_start":23,"line_end":23,"column_start":2,"column_end":5}},{"value":"/ `mem::size_of` returns the size in bytes, and bytes are always eight","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/mem.rs","byte_start":141317,"byte_end":141389,"line_start":24,"line_end":24,"column_start":2,"column_end":74}},{"value":"/ bits on architectures Rust targets.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/mem.rs","byte_start":141391,"byte_end":141430,"line_start":25,"line_end":25,"column_start":2,"column_end":41}}]},{"kind":"Const","id":{"krate":0,"index":778},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/mem.rs","byte_start":141567,"byte_end":141571,"line_start":28,"line_end":28,"column_start":8,"column_end":12},"name":"INDX","qualname":"::mem::BitMemory::INDX","value":"u8","parent":{"krate":0,"index":776},"children":[],"decl_id":null,"docs":" The number of bits required to store an index in the range `0 .. BITS`.\n","sig":null,"attributes":[{"value":"/ The number of bits required to store an index in the range `0 .. BITS`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/mem.rs","byte_start":141484,"byte_end":141559,"line_start":27,"line_end":27,"column_start":2,"column_end":77}}]},{"kind":"Const","id":{"krate":0,"index":779},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/mem.rs","byte_start":141695,"byte_end":141699,"line_start":30,"line_end":30,"column_start":8,"column_end":12},"name":"MASK","qualname":"::mem::BitMemory::MASK","value":"u8","parent":{"krate":0,"index":776},"children":[],"decl_id":null,"docs":" A mask over all bits that can be used as an index within the element.\n","sig":null,"attributes":[{"value":"/ A mask over all bits that can be used as an index within the element.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/mem.rs","byte_start":141614,"byte_end":141687,"line_start":29,"line_end":29,"column_start":2,"column_end":75}}]},{"kind":"Const","id":{"krate":0,"index":780},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/mem.rs","byte_start":141793,"byte_end":141796,"line_start":33,"line_end":33,"column_start":8,"column_end":11},"name":"ONE","qualname":"::mem::BitMemory::ONE","value":"Self","parent":{"krate":0,"index":776},"children":[],"decl_id":null,"docs":" The value with only its least significant bit set to `1`.\n","sig":null,"attributes":[{"value":"/ The value with only its least significant bit set to `1`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/mem.rs","byte_start":141724,"byte_end":141785,"line_start":32,"line_end":32,"column_start":2,"column_end":63}}]},{"kind":"Const","id":{"krate":0,"index":781},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/mem.rs","byte_start":141859,"byte_end":141862,"line_start":35,"line_end":35,"column_start":8,"column_end":11},"name":"ALL","qualname":"::mem::BitMemory::ALL","value":"Self","parent":{"krate":0,"index":776},"children":[],"decl_id":null,"docs":" The value with all of its bits set to `1`.\n","sig":null,"attributes":[{"value":"/ The value with all of its bits set to `1`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/mem.rs","byte_start":141805,"byte_end":141851,"line_start":34,"line_end":34,"column_start":2,"column_end":48}}]},{"kind":"Function","id":{"krate":0,"index":783},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/mem.rs","byte_start":142468,"byte_end":142472,"line_start":64,"line_end":64,"column_start":14,"column_end":18},"name":"elts","qualname":"::mem::elts","value":"pub const fn elts<T>(usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Computes the number of elements required to store some number of bits.","sig":null,"attributes":[{"value":"* Computes the number of elements required to store some number of bits.\n\n# Parameters\n\n- `bits`: The number of bits to store in a `[T]` array.\n\n# Returns\n\nThe number of elements `T` required to store `bits`.\n\nAs this is a const function, when `bits` is a constant expression, this can be\nused to compute the size of an array type `[T; elts(bits)]`.\n**/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/mem.rs","byte_start":142084,"byte_end":142439,"line_start":50,"line_end":62,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":791},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/mem.rs","byte_start":143725,"byte_end":143731,"line_start":114,"line_end":114,"column_start":12,"column_end":18},"name":"Sealed","qualname":"::mem::seal::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":792},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"order","qualname":"::order","value":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","parent":null,"children":[{"krate":0,"index":793},{"krate":0,"index":794},{"krate":0,"index":795},{"krate":0,"index":798},{"krate":0,"index":801},{"krate":0,"index":804},{"krate":0,"index":807},{"krate":0,"index":810},{"krate":0,"index":813},{"krate":0,"index":2625},{"krate":0,"index":2627},{"krate":0,"index":2629},{"krate":0,"index":2630},{"krate":0,"index":2632},{"krate":0,"index":2634},{"krate":0,"index":2635},{"krate":0,"index":2637},{"krate":0,"index":2640},{"krate":0,"index":2642},{"krate":0,"index":2643},{"krate":0,"index":2645},{"krate":0,"index":822},{"krate":0,"index":2647},{"krate":0,"index":2649},{"krate":0,"index":2651},{"krate":0,"index":2652},{"krate":0,"index":2654},{"krate":0,"index":2656},{"krate":0,"index":2657},{"krate":0,"index":2659},{"krate":0,"index":2662},{"krate":0,"index":2664},{"krate":0,"index":2665},{"krate":0,"index":2667},{"krate":0,"index":831},{"krate":0,"index":840}],"decl_id":null,"docs":" Ordering of bits within register elements.","sig":null,"attributes":[{"value":"* Ordering of bits within register elements.\n\n`bitvec` structures are parametric over any ordering of bits within an element.\nThe `BitOrder` trait maps a cursor position (indicated by the `BitIdx` type) to an\nelectrical position (indicated by the `BitPos` type) within that element, and\nalso defines the order of traversal over an element.\n\nThe only requirement on implementors of `BitOrder` is that the transform function\nfrom cursor (`BitIdx`) to position (`BitPos`) is *total* (every integer in the\ndomain `0 .. T::BITS` is used) and *unique* (each cursor maps to one and only\none position, and each position is mapped by one and only one cursor).\nContiguity is not required.\n\n`BitOrder` is a stateless trait, and implementors should be zero-sized types.\n!*/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":143738,"byte_end":144501,"line_start":1,"line_end":15,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":813},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":146942,"byte_end":146950,"line_start":94,"line_end":94,"column_start":18,"column_end":26},"name":"BitOrder","qualname":"::order::BitOrder","value":"BitOrder","parent":null,"children":[{"krate":0,"index":814},{"krate":0,"index":816},{"krate":0,"index":818}],"decl_id":null,"docs":" An ordering over an element.","sig":null,"attributes":[{"value":"* An ordering over an element.\n\n# Usage\n\n`bitvec` structures store and operate on semantic counts, not bit positions. The\n`BitOrder::at` function takes a semantic ordering, `BitIdx`, and produces an\nelectrical position, `BitPos`.\n\n# Safety\n\nIf your implementation violates any of the requirements on these functions, then\nthe program will become incorrect and have unspecified behavior. The best-case\nscenario is that operations relying on your implementation will crash the\nprogram; the worst-case is that memory access will silently become corrupt.\n\nYou are responsible for adhering to the requirements of these functions. In the\nfuture, a verification function may be provided for your test suite; however, it\nis not yet possible to verify your implementation at compile-time.\n\nThis is an `unsafe trait` to implement, because you are responsible for\nupholding the state requirements. The types you manipulate have `unsafe fn`\nconstructors, because they require you to maintain correct and consistent\nprocesses in order for the rest of the library to use them.\n\nThe implementations of `BitOrder` are trusted to drive safe code, and once data\nleaves a `BitOrder` implementation, it is considered safe to use as the basis\nfor interaction with memory.\n\n# Verification\n\nRust currently lacks Zig’s compile-time computation capability. This means that\n`bitvec` cannot fail a compile if it detects that a `BitOrder` implementation is\ninvalid and breaks the stated requirements. `bitvec` does offer a function,\n[`verify`], which ensures the correctness of an implementation. When Rust gains\nthe capability to run this function in generic `const` contexts, `bitvec` will\nuse it to prevent at compile-time the construction of data structures that use\nincorrect ordering implementations.\n\nThe verifier function panics when it detects invalid behavior, with an error\nmessage intended to clearly indicate the broken requirement.\n\n```rust\nuse bitvec::{\n  index::{BitIdx, BitPos},\n  mem::BitMemory,\n  order::{self, BitOrder},\n};\n# use bitvec::{index::*, order::Lsb0};\n\npub struct Custom;\nunsafe impl BitOrder for Custom {\n  fn at<M: BitMemory>(idx: BitIdx<M>) -> BitPos<M> {\n  // impl\n  # return Lsb0::at::<M>(idx);\n  }\n}\n\n#[test]\n#[cfg(test)]\nfn prove_custom() {\n  order::verify::<Custom>();\n}\n```\n\n[`verify`]: fn.verify.html\n**/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":144603,"byte_end":146924,"line_start":28,"line_end":93,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":814},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":149163,"byte_end":149165,"line_start":153,"line_end":153,"column_start":5,"column_end":7},"name":"at","qualname":"::order::BitOrder::at","value":"pub fn at<M>(BitIdx<M>) -> BitPos<M> where M: BitMemory","parent":{"krate":0,"index":813},"children":[],"decl_id":null,"docs":" Converts a semantic bit index into an electrical bit position.","sig":null,"attributes":[{"value":"/ Converts a semantic bit index into an electrical bit position.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":146954,"byte_end":147020,"line_start":95,"line_end":95,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":147022,"byte_end":147025,"line_start":96,"line_end":96,"column_start":2,"column_end":5}},{"value":"/ This function is the basis of the trait, and must adhere to a number of","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":147027,"byte_end":147102,"line_start":97,"line_end":97,"column_start":2,"column_end":77}},{"value":"/ requirements in order for an implementation to be considered correct.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":147104,"byte_end":147177,"line_start":98,"line_end":98,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":147179,"byte_end":147182,"line_start":99,"line_end":99,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":147184,"byte_end":147200,"line_start":100,"line_end":100,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":147202,"byte_end":147205,"line_start":101,"line_end":101,"column_start":2,"column_end":5}},{"value":"/ - `index`: The semantic index of a bit within an element `M`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":147207,"byte_end":147272,"line_start":102,"line_end":102,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":147274,"byte_end":147277,"line_start":103,"line_end":103,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":147279,"byte_end":147292,"line_start":104,"line_end":104,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":147294,"byte_end":147297,"line_start":105,"line_end":105,"column_start":2,"column_end":5}},{"value":"/ The electrical position of the indexed bit within an element `M`. See","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":147299,"byte_end":147372,"line_start":106,"line_end":106,"column_start":2,"column_end":75}},{"value":"/ the `BitPos` documentation for what electrical positions are considered","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":147374,"byte_end":147449,"line_start":107,"line_end":107,"column_start":2,"column_end":77}},{"value":"/ to mean.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":147451,"byte_end":147463,"line_start":108,"line_end":108,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":147465,"byte_end":147468,"line_start":109,"line_end":109,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":147470,"byte_end":147491,"line_start":110,"line_end":110,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":147493,"byte_end":147496,"line_start":111,"line_end":111,"column_start":2,"column_end":5}},{"value":"/ - `M`: The element type which the index and position describe.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":147498,"byte_end":147564,"line_start":112,"line_end":112,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":147566,"byte_end":147569,"line_start":113,"line_end":113,"column_start":2,"column_end":5}},{"value":"/ # Requirements","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":147571,"byte_end":147589,"line_start":114,"line_end":114,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":147591,"byte_end":147594,"line_start":115,"line_end":115,"column_start":2,"column_end":5}},{"value":"/ This function must satisfy the following requirements for all possible","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":147596,"byte_end":147670,"line_start":116,"line_end":116,"column_start":2,"column_end":76}},{"value":"/ input and output values for all possible type parameters:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":147672,"byte_end":147733,"line_start":117,"line_end":117,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":147735,"byte_end":147738,"line_start":118,"line_end":118,"column_start":2,"column_end":5}},{"value":"/ ## Totality","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":147740,"byte_end":147755,"line_start":119,"line_end":119,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":147757,"byte_end":147760,"line_start":120,"line_end":120,"column_start":2,"column_end":5}},{"value":"/ This function must be able to accept every input in the `BitIdx<M>`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":147762,"byte_end":147833,"line_start":121,"line_end":121,"column_start":2,"column_end":73}},{"value":"/ value range, and produce a corresponding `BitPos<M>`. It must not abort","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":147835,"byte_end":147910,"line_start":122,"line_end":122,"column_start":2,"column_end":77}},{"value":"/ the program or return an invalid `BitPos<M>` for any input value in the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":147912,"byte_end":147987,"line_start":123,"line_end":123,"column_start":2,"column_end":77}},{"value":"/ `BitIdx<M>` range.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":147989,"byte_end":148011,"line_start":124,"line_end":124,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":148013,"byte_end":148016,"line_start":125,"line_end":125,"column_start":2,"column_end":5}},{"value":"/ ## Bijection","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":148018,"byte_end":148034,"line_start":126,"line_end":126,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":148036,"byte_end":148039,"line_start":127,"line_end":127,"column_start":2,"column_end":5}},{"value":"/ There must be an exactly one-to-one correspondence between input value","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":148041,"byte_end":148115,"line_start":128,"line_end":128,"column_start":2,"column_end":76}},{"value":"/ and output value. No input index may select from a set of more than one","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":148117,"byte_end":148192,"line_start":129,"line_end":129,"column_start":2,"column_end":77}},{"value":"/ output position, and no output position may be produced by more than one","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":148194,"byte_end":148270,"line_start":130,"line_end":130,"column_start":2,"column_end":78}},{"value":"/ input index.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":148272,"byte_end":148288,"line_start":131,"line_end":131,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":148290,"byte_end":148293,"line_start":132,"line_end":132,"column_start":2,"column_end":5}},{"value":"/ ## Purity","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":148295,"byte_end":148308,"line_start":133,"line_end":133,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":148310,"byte_end":148313,"line_start":134,"line_end":134,"column_start":2,"column_end":5}},{"value":"/ The translation from index to position must be consistent for the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":148315,"byte_end":148384,"line_start":135,"line_end":135,"column_start":2,"column_end":71}},{"value":"/ lifetime of the program. This function *may* refer to global state, but","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":148386,"byte_end":148461,"line_start":136,"line_end":136,"column_start":2,"column_end":77}},{"value":"/ that state **must** be immutable for the program lifetime, and must not","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":148463,"byte_end":148538,"line_start":137,"line_end":137,"column_start":2,"column_end":77}},{"value":"/ be used to violate the totality or bijection requirements.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":148540,"byte_end":148602,"line_start":138,"line_end":138,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":148604,"byte_end":148607,"line_start":139,"line_end":139,"column_start":2,"column_end":5}},{"value":"/ ## Output Validity","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":148609,"byte_end":148631,"line_start":140,"line_end":140,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":148633,"byte_end":148636,"line_start":141,"line_end":141,"column_start":2,"column_end":5}},{"value":"/ The produced `BitPos<M>` must be within the valid range of that type.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":148638,"byte_end":148711,"line_start":142,"line_end":142,"column_start":2,"column_end":75}},{"value":"/ Call sites of this function will not take any steps to constrain the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":148713,"byte_end":148785,"line_start":143,"line_end":143,"column_start":2,"column_end":74}},{"value":"/ output value. If you use `unsafe` code to produce an invalid","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":148787,"byte_end":148851,"line_start":144,"line_end":144,"column_start":2,"column_end":66}},{"value":"/ `BitPos<M>`, the program is permanently incorrect, and will likely","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":148853,"byte_end":148923,"line_start":145,"line_end":145,"column_start":2,"column_end":72}},{"value":"/ crash.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":148925,"byte_end":148935,"line_start":146,"line_end":146,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":148937,"byte_end":148940,"line_start":147,"line_end":147,"column_start":2,"column_end":5}},{"value":"/ # Usage","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":148942,"byte_end":148953,"line_start":148,"line_end":148,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":148955,"byte_end":148958,"line_start":149,"line_end":149,"column_start":2,"column_end":5}},{"value":"/ This function will only ever be called with input values in the valid","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":148960,"byte_end":149033,"line_start":150,"line_end":150,"column_start":2,"column_end":75}},{"value":"/ `BitIdx<M>` range. Implementors are not required to consider any values","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":149035,"byte_end":149110,"line_start":151,"line_end":151,"column_start":2,"column_end":77}},{"value":"/ outside this range in their function body.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":149112,"byte_end":149158,"line_start":152,"line_end":152,"column_start":2,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":816},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":150522,"byte_end":150528,"line_start":189,"line_end":189,"column_start":5,"column_end":11},"name":"select","qualname":"::order::BitOrder::select","value":"pub fn select<M>(BitIdx<M>) -> BitSel<M> where M: BitMemory","parent":{"krate":0,"index":813},"children":[],"decl_id":null,"docs":" Converts a semantic bit index into a one-hot selector mask.","sig":null,"attributes":[{"value":"/ Converts a semantic bit index into a one-hot selector mask.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":149223,"byte_end":149286,"line_start":156,"line_end":156,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":149288,"byte_end":149291,"line_start":157,"line_end":157,"column_start":2,"column_end":5}},{"value":"/ This is an optional function; a default implementation is provided for","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":149293,"byte_end":149367,"line_start":158,"line_end":158,"column_start":2,"column_end":76}},{"value":"/ you.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":149369,"byte_end":149377,"line_start":159,"line_end":159,"column_start":2,"column_end":10}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":149379,"byte_end":149382,"line_start":160,"line_end":160,"column_start":2,"column_end":5}},{"value":"/ The default implementation of this function calls `Self::at` to produce","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":149384,"byte_end":149459,"line_start":161,"line_end":161,"column_start":2,"column_end":77}},{"value":"/ an electrical position, then turns that into a selector mask by setting","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":149461,"byte_end":149536,"line_start":162,"line_end":162,"column_start":2,"column_end":77}},{"value":"/ the `n`th bit more significant than the least significant bit of the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":149538,"byte_end":149610,"line_start":163,"line_end":163,"column_start":2,"column_end":74}},{"value":"/ element. `BitOrder` implementations may choose to provide a faster mask","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":149612,"byte_end":149687,"line_start":164,"line_end":164,"column_start":2,"column_end":77}},{"value":"/ production here, but they must satisfy the requirements listed below.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":149689,"byte_end":149762,"line_start":165,"line_end":165,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":149764,"byte_end":149767,"line_start":166,"line_end":166,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":149769,"byte_end":149785,"line_start":167,"line_end":167,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":149787,"byte_end":149790,"line_start":168,"line_end":168,"column_start":2,"column_end":5}},{"value":"/ - `index`: The semantic index of a bit within an element `M`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":149792,"byte_end":149857,"line_start":169,"line_end":169,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":149859,"byte_end":149862,"line_start":170,"line_end":170,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":149864,"byte_end":149877,"line_start":171,"line_end":171,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":149879,"byte_end":149882,"line_start":172,"line_end":172,"column_start":2,"column_end":5}},{"value":"/ A one-hot selector mask for the bit indicated by the index value.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":149884,"byte_end":149953,"line_start":173,"line_end":173,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":149955,"byte_end":149958,"line_start":174,"line_end":174,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":149960,"byte_end":149981,"line_start":175,"line_end":175,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":149983,"byte_end":149986,"line_start":176,"line_end":176,"column_start":2,"column_end":5}},{"value":"/ - `M`: The storage type for which the mask will be calculated. The mask","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":149988,"byte_end":150063,"line_start":177,"line_end":177,"column_start":2,"column_end":77}},{"value":"/   must also be this type, as it will be applied to an element of `M` in","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":150065,"byte_end":150140,"line_start":178,"line_end":178,"column_start":2,"column_end":77}},{"value":"/   order to set, clear, or test a single bit.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":150142,"byte_end":150190,"line_start":179,"line_end":179,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":150192,"byte_end":150195,"line_start":180,"line_end":180,"column_start":2,"column_end":5}},{"value":"/ # Requirements","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":150197,"byte_end":150215,"line_start":181,"line_end":181,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":150217,"byte_end":150220,"line_start":182,"line_end":182,"column_start":2,"column_end":5}},{"value":"/ A one-hot encoding means that there is exactly one bit set in the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":150222,"byte_end":150291,"line_start":183,"line_end":183,"column_start":2,"column_end":71}},{"value":"/ produced value. It must be equivalent to `1 << Self::at::<M>(place)`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":150293,"byte_end":150366,"line_start":184,"line_end":184,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":150368,"byte_end":150371,"line_start":185,"line_end":185,"column_start":2,"column_end":5}},{"value":"/ As with `at`, this function must produce a unique mapping from each","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":150373,"byte_end":150444,"line_start":186,"line_end":186,"column_start":2,"column_end":73}},{"value":"/ legal index in the `M` domain to a one-hot value of `M`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":150446,"byte_end":150506,"line_start":187,"line_end":187,"column_start":2,"column_end":62}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":150508,"byte_end":150517,"line_start":188,"line_end":188,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":818},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":151669,"byte_end":151673,"line_start":227,"line_end":227,"column_start":5,"column_end":9},"name":"mask","qualname":"::order::BitOrder::mask","value":"pub fn mask<M, impl Into<Option<BitIdx<M>>>: Into<Option<BitIdx<M>>>,\n            impl Into<Option<BitTail<M>>>: Into<Option<BitTail<M>>>>(impl Into<Option<BitIdx<M>>>,\n                                                                     impl Into<Option<BitTail<M>>>)\n-> BitMask<M> where M: BitMemory","parent":{"krate":0,"index":813},"children":[],"decl_id":null,"docs":" Constructs a multi-bit selector mask for batch operations on a single\n memory element `M`.","sig":null,"attributes":[{"value":"/ Constructs a multi-bit selector mask for batch operations on a single","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":150622,"byte_end":150695,"line_start":194,"line_end":194,"column_start":2,"column_end":75}},{"value":"/ memory element `M`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":150697,"byte_end":150720,"line_start":195,"line_end":195,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":150722,"byte_end":150725,"line_start":196,"line_end":196,"column_start":2,"column_end":5}},{"value":"/ The default implementation of this function traverses the index range,","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":150727,"byte_end":150801,"line_start":197,"line_end":197,"column_start":2,"column_end":76}},{"value":"/ converting each index into a single-bit selector with `Self::select` and","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":150803,"byte_end":150879,"line_start":198,"line_end":198,"column_start":2,"column_end":78}},{"value":"/ accumulating into a combined register value.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":150881,"byte_end":150929,"line_start":199,"line_end":199,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":150931,"byte_end":150934,"line_start":200,"line_end":200,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":150936,"byte_end":150952,"line_start":201,"line_end":201,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":150954,"byte_end":150957,"line_start":202,"line_end":202,"column_start":2,"column_end":5}},{"value":"/ - `from`: The inclusive starting index for the mask.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":150959,"byte_end":151015,"line_start":203,"line_end":203,"column_start":2,"column_end":58}},{"value":"/ - `upto`: The exclusive ending index for the mask.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":151017,"byte_end":151071,"line_start":204,"line_end":204,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":151073,"byte_end":151076,"line_start":205,"line_end":205,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":151078,"byte_end":151091,"line_start":206,"line_end":206,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":151093,"byte_end":151096,"line_start":207,"line_end":207,"column_start":2,"column_end":5}},{"value":"/ A bit-mask with all bits corresponding to the input index range set high","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":151098,"byte_end":151174,"line_start":208,"line_end":208,"column_start":2,"column_end":78}},{"value":"/ and all others set low.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":151176,"byte_end":151203,"line_start":209,"line_end":209,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":151205,"byte_end":151208,"line_start":210,"line_end":210,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":151210,"byte_end":151231,"line_start":211,"line_end":211,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":151233,"byte_end":151236,"line_start":212,"line_end":212,"column_start":2,"column_end":5}},{"value":"/ - `M`: The storage type for which the mask will be calculated. The mask","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":151238,"byte_end":151313,"line_start":213,"line_end":213,"column_start":2,"column_end":77}},{"value":"/   must also be this type, as it will be applied to an element of `M` in","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":151315,"byte_end":151390,"line_start":214,"line_end":214,"column_start":2,"column_end":77}},{"value":"/   order to set, clear, or test all the selected bits.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":151392,"byte_end":151449,"line_start":215,"line_end":215,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":151451,"byte_end":151454,"line_start":216,"line_end":216,"column_start":2,"column_end":5}},{"value":"/ # Requirements","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":151456,"byte_end":151474,"line_start":217,"line_end":217,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":151476,"byte_end":151479,"line_start":218,"line_end":218,"column_start":2,"column_end":5}},{"value":"/ This function must always be equivalent to","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":151481,"byte_end":151527,"line_start":219,"line_end":219,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":151529,"byte_end":151532,"line_start":220,"line_end":220,"column_start":2,"column_end":5}},{"value":"/ ```rust,ignore","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":151534,"byte_end":151552,"line_start":221,"line_end":221,"column_start":2,"column_end":20}},{"value":"/ (from .. upto)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":151554,"byte_end":151572,"line_start":222,"line_end":222,"column_start":2,"column_end":20}},{"value":"/   .map(1 << Self::at::<M>)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":151574,"byte_end":151604,"line_start":223,"line_end":223,"column_start":2,"column_end":32}},{"value":"/   .fold(0, |mask, sel| mask | sel)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":151606,"byte_end":151644,"line_start":224,"line_end":224,"column_start":2,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":151646,"byte_end":151653,"line_start":225,"line_end":225,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":151655,"byte_end":151664,"line_start":226,"line_end":226,"column_start":2,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":2625},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":152254,"byte_end":152258,"line_start":246,"line_end":246,"column_start":12,"column_end":16},"name":"Msb0","qualname":"::order::Msb0","value":"","parent":null,"children":[],"decl_id":null,"docs":" Traverses an element from `MSbit` to `LSbit`.\n","sig":null,"attributes":[{"value":"/ Traverses an element from `MSbit` to `LSbit`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":152116,"byte_end":152165,"line_start":244,"line_end":244,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":2647},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":153732,"byte_end":153736,"line_start":291,"line_end":291,"column_start":12,"column_end":16},"name":"Lsb0","qualname":"::order::Lsb0","value":"","parent":null,"children":[],"decl_id":null,"docs":" Traverses an element from `LSbit` to `MSbit`.\n","sig":null,"attributes":[{"value":"/ Traverses an element from `LSbit` to `MSbit`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":153594,"byte_end":153643,"line_start":289,"line_end":289,"column_start":1,"column_end":50}}]},{"kind":"Type","id":{"krate":0,"index":840},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":155328,"byte_end":155337,"line_start":345,"line_end":345,"column_start":10,"column_end":19},"name":"LocalBits","qualname":"::order::LocalBits","value":"Lsb0","parent":null,"children":[],"decl_id":null,"docs":" A default bit ordering.","sig":null,"attributes":[{"value":"* A default bit ordering.\n\nTypically, your platform’s C compiler uses least-significant-bit-first ordering\nfor bitfields. The Lsb0 bit ordering and little-endian byte ordering are\notherwise completely unrelated.\n**/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":155066,"byte_end":155285,"line_start":338,"line_end":343,"column_start":1,"column_end":4}},{"value":"cfg(target_endian = \"little\")","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":155286,"byte_end":155318,"line_start":344,"line_end":344,"column_start":1,"column_end":33}}]},{"kind":"Mod","id":{"krate":0,"index":993},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/prelude.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/prelude.rs","parent":null,"children":[{"krate":0,"index":994},{"krate":0,"index":1015},{"krate":0,"index":1023},{"krate":0,"index":1040},{"krate":0,"index":1048},{"krate":0,"index":1073},{"krate":0,"index":1074},{"krate":0,"index":1075}],"decl_id":null,"docs":" `bitvec` symbol export","sig":null,"attributes":[{"value":"* `bitvec` symbol export\n\nThis module collects the general public API into a single spot for inclusion, as\n`use bitvec::prelude::*;`, without polluting the root namespace of the crate.\n\nThe prelude has a number of submodules, which can be used to limit the symbols\nimported.\n\nThe `base` module (`use bitvec::prelude::base::*;`) imports only the data types\nand macros needed to make direct use of the crate. It also imports trait\n*methods* from `BitField` and `BitView`, without importing those trait names.\n\nThe `macros` module imports only the constructor macros.\n\nThe `traits` module imports the names of all traits in the crate.\n\nThe `types` module imports all data types in the crate.\n\nYou may alternatively wish to import the crate root, or this prelude, under a\nshorter name, without bringing any other items into scope. The import statements\n\n```rust,ignore\nuse bitvec as bv;\n//  or\nuse bitvec::prelude as bv;\n```\n\nwill make the crate symbols available under the `bv` namespace instead of the\nlonger `bitvec`. The prelude contains all the major public symbols of the crate\ndirectly, while the crate root does not reëxport the items in its submodules.\nUse whichever path root you prefer: crate for full paths, and prelude for\nshortcuts.\n!*/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/prelude.rs","byte_start":190233,"byte_end":191482,"line_start":1,"line_end":33,"column_start":1,"column_end":4}}]},{"kind":"Mod","id":{"krate":0,"index":994},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/prelude.rs","byte_start":191567,"byte_end":191571,"line_start":36,"line_end":36,"column_start":9,"column_end":13},"name":"base","qualname":"::prelude::base","value":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/prelude.rs","parent":null,"children":[{"krate":0,"index":995},{"krate":0,"index":996},{"krate":0,"index":997},{"krate":0,"index":998},{"krate":0,"index":999},{"krate":0,"index":1002},{"krate":0,"index":1003},{"krate":0,"index":1006},{"krate":0,"index":1007},{"krate":0,"index":1009},{"krate":0,"index":1010},{"krate":0,"index":1012}],"decl_id":null,"docs":" The base symbols, containing only the minimum needed to use the crate.\n","sig":null,"attributes":[{"value":"/ The base symbols, containing only the minimum needed to use the crate.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/prelude.rs","byte_start":191484,"byte_end":191558,"line_start":35,"line_end":35,"column_start":1,"column_end":75}}]},{"kind":"Mod","id":{"krate":0,"index":1015},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/prelude.rs","byte_start":191872,"byte_end":191878,"line_start":60,"line_end":60,"column_start":9,"column_end":15},"name":"macros","qualname":"::prelude::macros","value":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/prelude.rs","parent":null,"children":[{"krate":0,"index":1016},{"krate":0,"index":1017},{"krate":0,"index":1020}],"decl_id":null,"docs":" Macros available for default export.\n","sig":null,"attributes":[{"value":"/ Macros available for default export.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/prelude.rs","byte_start":191823,"byte_end":191863,"line_start":59,"line_end":59,"column_start":1,"column_end":41}}]},{"kind":"Mod","id":{"krate":0,"index":1023},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/prelude.rs","byte_start":192043,"byte_end":192049,"line_start":74,"line_end":74,"column_start":9,"column_end":15},"name":"traits","qualname":"::prelude::traits","value":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/prelude.rs","parent":null,"children":[{"krate":0,"index":1024},{"krate":0,"index":1025},{"krate":0,"index":1028},{"krate":0,"index":1031},{"krate":0,"index":1034},{"krate":0,"index":1037}],"decl_id":null,"docs":" Traits available for default export.\n","sig":null,"attributes":[{"value":"/ Traits available for default export.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/prelude.rs","byte_start":191994,"byte_end":192034,"line_start":73,"line_end":73,"column_start":1,"column_end":41}}]},{"kind":"Mod","id":{"krate":0,"index":1040},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/prelude.rs","byte_start":192244,"byte_end":192257,"line_start":85,"line_end":85,"column_start":9,"column_end":22},"name":"trait_methods","qualname":"::prelude::trait_methods","value":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/prelude.rs","parent":null,"children":[{"krate":0,"index":1041},{"krate":0,"index":1042},{"krate":0,"index":1045}],"decl_id":null,"docs":" Imports trait methods without importing the traits themselves.\n","sig":null,"attributes":[{"value":"/ Imports trait methods without importing the traits themselves.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/prelude.rs","byte_start":192169,"byte_end":192235,"line_start":84,"line_end":84,"column_start":1,"column_end":67}}]},{"kind":"Mod","id":{"krate":0,"index":1048},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/prelude.rs","byte_start":192383,"byte_end":192388,"line_start":93,"line_end":93,"column_start":9,"column_end":14},"name":"types","qualname":"::prelude::types","value":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/prelude.rs","parent":null,"children":[{"krate":0,"index":1049},{"krate":0,"index":1050},{"krate":0,"index":1053},{"krate":0,"index":1054},{"krate":0,"index":1057},{"krate":0,"index":1060},{"krate":0,"index":1061},{"krate":0,"index":1064},{"krate":0,"index":1065},{"krate":0,"index":1067},{"krate":0,"index":1068},{"krate":0,"index":1070}],"decl_id":null,"docs":" Datatypes available for default export.\n","sig":null,"attributes":[{"value":"/ Datatypes available for default export.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/prelude.rs","byte_start":192331,"byte_end":192374,"line_start":92,"line_end":92,"column_start":1,"column_end":44}}]},{"kind":"Mod","id":{"krate":0,"index":1076},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"slice","qualname":"::slice","value":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","parent":null,"children":[{"krate":0,"index":1077},{"krate":0,"index":1078},{"krate":0,"index":1081},{"krate":0,"index":1084},{"krate":0,"index":1085},{"krate":0,"index":1088},{"krate":0,"index":1091},{"krate":0,"index":1094},{"krate":0,"index":1097},{"krate":0,"index":1098},{"krate":0,"index":1101},{"krate":0,"index":1104},{"krate":0,"index":1107},{"krate":0,"index":1108},{"krate":0,"index":1111},{"krate":0,"index":1112},{"krate":0,"index":1114},{"krate":0,"index":1117},{"krate":0,"index":1120},{"krate":0,"index":1121},{"krate":0,"index":1124},{"krate":0,"index":1125},{"krate":0,"index":1127},{"krate":0,"index":1130},{"krate":0,"index":1133},{"krate":0,"index":1136},{"krate":0,"index":1139},{"krate":0,"index":1142},{"krate":0,"index":1145},{"krate":0,"index":1151},{"krate":0,"index":1160},{"krate":0,"index":1210},{"krate":0,"index":1216},{"krate":0,"index":1221},{"krate":0,"index":1225},{"krate":0,"index":1229},{"krate":0,"index":1492},{"krate":0,"index":1661},{"krate":0,"index":1755},{"krate":0,"index":1833},{"krate":0,"index":2025},{"krate":0,"index":2026},{"krate":0,"index":2027},{"krate":0,"index":2030},{"krate":0,"index":2033},{"krate":0,"index":2036},{"krate":0,"index":2039},{"krate":0,"index":2042},{"krate":0,"index":2043},{"krate":0,"index":2046},{"krate":0,"index":2049},{"krate":0,"index":2052},{"krate":0,"index":2055},{"krate":0,"index":2058},{"krate":0,"index":2061},{"krate":0,"index":2064},{"krate":0,"index":2067},{"krate":0,"index":2070},{"krate":0,"index":2073},{"krate":0,"index":2076},{"krate":0,"index":2079},{"krate":0,"index":2082},{"krate":0,"index":2085},{"krate":0,"index":2088},{"krate":0,"index":2091},{"krate":0,"index":2094},{"krate":0,"index":2097},{"krate":0,"index":2100}],"decl_id":null,"docs":" A dynamically-sized view into individual bits of a memory region.","sig":null,"attributes":[{"value":"* A dynamically-sized view into individual bits of a memory region.\n\nYou can read the language’s [`slice` module documentation][std] here.\n\nThis module defines the [`BitSlice`] region, and all of its associated support\ncode.\n\n`BitSlice` is the primary working type of this crate. It is a wrapper type over\n`[T]` which enables you to view, manipulate, and take the address of individual\nbits in memory. It behaves in every possible respect exactly like an ordinary\nslice: it is dynamically-sized, and must be held by `&` or `&mut` reference,\njust like `[T]`, and implements every inherent method and trait that `[T]` does,\nto the absolute limits of what Rust permits.\n\nThe key to `BitSlice`’s powerful capability is that references to it use a\nspecial encoding that store, in addition to the address of the base element and\nthe bit length, the index of the starting bit in the base element. This custom\nreference encoding has some costs in what APIs are possible – for instance, Rust\nforbids it from supporting `&mut BitSlice[index] = bool` write indexing – but in\nexchange, enables it to be *far* more capable than any other bit-slice crate in\nexistence.\n\nBecause of the volume of code that must be written to match the `[T]` standard\nAPI, this module is organized very differently than the slice implementation in\nthe `core` and `std` distribution libraries.\n\n- the root module `slice` contains new APIs that have no counterpart in `[T]`\n- `slice/api` contains reïmplementations of the `[T]` inherent methods\n- `slice/iter` implements all of the iteration capability\n- `slice/ops` implements the traits in `core::ops`\n- `slice/proxy` implements the proxy reference used in place of `&mut bool`\n- `slice/traits` implements all other traits not in `core::ops`\n- lastly, `slice/tests` contains all the unit tests.\n\n[`BitSlice`]: struct.BitSlice.html\n[std]: https://doc.rust-lang.org/std/slice\n!*/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":192689,"byte_end":194595,"line_start":1,"line_end":37,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1145},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":208042,"byte_end":208050,"line_start":382,"line_end":382,"column_start":12,"column_end":20},"name":"BitSlice","qualname":"::slice::BitSlice","value":"BitSlice {  }","parent":null,"children":[{"krate":0,"index":1148},{"krate":0,"index":1149},{"krate":0,"index":1150}],"decl_id":null,"docs":" A slice of individual bits, anywhere in memory.","sig":null,"attributes":[{"value":"* A slice of individual bits, anywhere in memory.\n\nThis is the main working type of the crate. It is analagous to `[bool]`, and is\nwritten to be as close as possible to drop-in replacable for it. This type\ncontains most of the *methods* used to operate on memory, but it will rarely be\nnamed directly in your code. You should generally prefer to use [`BitArray`] for\nfixed-size arrays or [`BitVec`] for dynamic vectors, and use `&BitSlice`\nreferences only where you would directly use `&[bool]` or `&[u8]` references\nbefore using this crate.\n\nAs it is a slice wrapper, you are intended to work with this through references\n(`&BitSlice<O, T>` and `&mut BitSlice<O, T>`) or through the other data\nstructures provided by `bitvec` that are implemented atop it. Once created,\nreferences to `BitSlice` are guaranteed to work just like references to `[bool]`\nto the fullest extent possible in the Rust language.\n\nEvery bit-vector crate can give you an opaque type that hides shift/mask\noperations from you. `BitSlice` does far more than this: it offers you the full\nRust guarantees about reference behavior, including lifetime tracking,\nmutability and aliasing awareness, and explicit memory control, *as well as* the\nfull set of tools and APIs available to the standard `[bool]` slice type.\n`BitSlice` can arbitrarily split and subslice, just like `[bool]`. You can write\na linear consuming function and keep the patterns already know.\n\nFor example, to trim all the bits off either edge that match a condition, you\ncould write\n\n```rust\nuse bitvec::prelude::*;\n\nfn trim<O: BitOrder, T: BitStore>(\n  bits: &BitSlice<O, T>,\n  to_trim: bool,\n) -> &BitSlice<O, T> {\n  let stop = |b: &bool| *b != to_trim;\n  let front = bits.iter().position(stop).unwrap_or(0);\n  let back = bits.iter().rposition(stop).unwrap_or(0);\n  &bits[front ..= back]\n}\n# assert_eq!(trim(bits![0, 0, 1, 1, 0, 1, 0], false), bits![1, 1, 0, 1]);\n```\n\nto get behavior something like\n`trim(&BitSlice[0, 0, 1, 1, 0, 1, 0], false) == &BitSlice[1, 1, 0, 1]`.\n\n# Documentation\n\nAll APIs that mirror something in the standard library will have an `Original`\nsection linking to the corresponding item. All APIs that have a different\nsignature or behavior than the original will have an `API Differences` section\nexplaining what has changed, and how to adapt your existing code to the change.\n\nThese sections look like this:\n\n# Original\n\n[`slice`](https://doc.rust-lang.org/std/primitive.slice.html)\n\n# API Differences\n\nThe slice type `[bool]` has no type parameters. `BitSlice<O, T>` has two: one\nfor the memory type used as backing storage, and one for the order of bits\nwithin that memory type.\n\n`&BitSlice<O, T>` is capable of producing `&bool` references to read bits out\nof its memory, but is not capable of producing `&mut bool` references to write\nbits *into* its memory. Any `[bool]` API that would produce a `&mut bool` will\ninstead produce a [`BitMut<O, T>`] proxy reference.\n\n# Behavior\n\n`BitSlice` is a wrapper over `[T]`. It describes a region of memory, and must be\nhandled indirectly. This is most commonly through the reference types\n`&BitSlice` and `&mut BitSlice`, which borrow memory owned by some other value\nin the program. These buffers can be directly owned by the sibling types\n`BitBox`, which behavios like `Box<[T]>`, and `BitVec`, which behaves like\n`Vec<T>`. It cannot be used as the type parameter to a standard-library-provided\nhandle type.\n\nThe `BitSlice` region provides access to each individual bit in the region, as\nif each bit had a memory address that you could use to dereference it. It packs\neach logical bit into exactly one bit of storage memory, just like\n[`std::bitset`] and [`std::vector<bool>`] in C++.\n\n# Type Parameters\n\n`BitSlice` has two type parameters which propagate through nearly every public\nAPI in the crate. These are very important to its operation, and your choice\nof type arguments informs nearly every part of this library’s behavior.\n\n## `T: BitStore`\n\nThis is the simpler of the two parameters. It refers to the integer type used to\nhold bits. It must be one of the Rust unsigned integer fundamentals: `u8`,\n`u16`, `u32`, `usize`, and on 64-bit systems only, `u64`. In addition, it can\nalso be the `Cell<N>` wrapper over any of those, or their equivalent types in\n`core::sync::atomic`. Unless you know you need to have `Cell` or atomic\nproperties, though, you should use a plain integer.\n\nThe default type argument is `usize`.\n\nThe argument you choose is used as the basis of a `[T]` slice, over which the\n`BitSlice` view type is placed. `BitSlice<_, T>` is subject to all of the rules\nabout alignment that `[T]` is. If you are working with in-memory representation\nformats, chances are that you already have a `T` type with which you’ve been\nworking, and should use it here.\n\nIf you are only using this crate to discard the seven wasted bits per `bool`\nof a collection of `bool`s, and are not too concerned about the in-memory\nrepresentation, then you should use the default type argument of `usize`. This\nis because most processors work best when moving an entire `usize` between\nmemory and the processor itself, and using a smaller type may cause it to slow\ndown.\n\n## `O: BitOrder`\n\nThis is the more complex parameter. It has a default argument which, like\n`usize`, is the good-enough choice when you do not explicitly need to control\nthe representation of bits in memory.\n\nThis parameter determines how to index the bits within a single memory element\n`T`. Computers all agree that in a slice of elements `T`, the element with the\nlower index has a lower memory address than the element with the higher index.\nBut the individual bits within an element do not have addresses, and so there is\nno uniform standard of which bit is the zeroth, which is the first, which is the\npenultimate, and which is the last.\n\nTo make matters even more confusing, there are two predominant ideas of\nin-element ordering that often *correlate* with the in-element *byte* ordering\nof integer types, but are in fact wholly unrelated! `bitvec` provides these two\nmain orders as types for you, and if you need a different one, it also provides\nthe tools you need to make your own.\n\n### Least Significant Bit Comes First\n\nThis ordering, named the [`Lsb0`] type, indexes bits within an element by\nplacing the `0` index at the least significant bit (numeric value `1`) and the\nfinal index at the most significant bit (numeric value `T::min_value()`, for\nsigned integers on most machines).\n\nFor example, this is the ordering used by the [TCP wire format], and by most C\ncompilers to lay out bit-field struct members on little-endian **byte**-ordered\nmachines.\n\n### Most Significant Bit Comes First\n\nThis ordering, named the [`Msb0`] type, indexes bits within an element by\nplacing the `0` index at the most significant bit (numeric value `T::min_value()`\nfor most signed integers) and the final index at the least significant bit\n(numeric value `1`).\n\nThis is the ordering used by most C compilers to lay out bit-field struct\nmembers on big-endian **byte**-ordered machines.\n\n### Default Ordering\n\nThe default ordering is `Lsb0`, as it typically produces shorter object code\nthan `Msb0` does. If you are implementing a collection, then `Lsb0` is likely\nthe more performant ordering; if you are implementing a buffer protocol, then\nyour choice of ordering is dictated by the protocol definition.\n\n# Safety\n\n`BitSlice` is designed to never introduce new memory unsafety that you did not\nprovide yourself, either before or during the use of this crate. Bugs do, and\nhave, occured, and you are encouraged to submit any discovered flaw as a defect\nreport.\n\nThe `&BitSlice` reference type uses a private encoding scheme to hold all the\ninformation needed in its stack value. This encoding is **not** part of the\npublic API of the library, and is not binary-compatible with `&[T]`.\nFurthermore, in order to satisfy Rust’s requirements about alias conditions,\n`BitSlice` performs type transformations on the `T` parameter to ensure that it\nnever creates the potential for undefined behavior.\n\nYou must never attempt to type-cast a reference to `BitSlice` in any way. You\nmust not use `mem::transmute` with `BitSlice` anywhere in its type arguments.\nYou must not use `as`-casting to convert between `*BitSlice` and any other type.\nYou must not attempt to modify the binary representation of a `&BitSlice`\nreference value. These actions will all lead to runtime memory unsafety, are\n(hopefully) likely to induce a program crash, and may possibly cause undefined\nbehavior at compile-time.\n\nEverything in the `BitSlice` public API, even the `unsafe` parts, are guaranteed\nto have no more unsafety than their equivalent parts in the standard library.\nAll `unsafe` APIs will have documentation explicitly detailing what the API\nrequires you to uphold in order for it to function safely and correctly. All\nsafe APIs will do so themselves.\n\n# Performance\n\nLike the standard library’s `[T]` slice, `BitSlice` is designed to be very easy\nto use safely, while supporting `unsafe` when necessary. Rust has a powerful\noptimizing engine, and `BitSlice` will frequently be compiled to have zero\nruntime cost. Where it is slower, it will not be significantly slower than a\nmanual replacement.\n\nAs the machine instructions operate on registers rather than bits, your choice\nof `T: BitOrder` type parameter can influence your slice’s performance. Using\nlarger register types means that slices can gallop over completely-filled\ninterior elements faster, while narrower register types permit more graceful\nhandling of subslicing and aliased splits.\n\n# Construction\n\n`BitSlice` views of memory can be constructed over borrowed data in a number of\nways. As this is a reference-only type, it can only ever be built by borrowing\nan existing memory buffer and taking temporary control of your program’s view of\nthe region.\n\n## Macro Constructor\n\n`BitSlice` buffers can be constructed at compile-time through the [`bits!`]\nmacro. This macro accepts a superset of the `vec!` arguments, and creates an\nappropriate buffer in your program’s static memory.\n\n```rust\nuse bitvec::prelude::*;\n\nlet static_borrow = bits![0, 1, 0, 0, 1, 0, 0, 1];\nlet mutable_static: &mut BitSlice<_, _> = bits![mut 0; 8];\n\nassert_ne!(static_borrow, mutable_static);\nmutable_static.clone_from_bitslice(static_borrow);\nassert_eq!(static_borrow, mutable_static);\n```\n\nNote that, despite constructing a `static mut` binding, the `bits![mut …]` call\nis not `unsafe`, as the constructed symbol is hidden and only accessible by the\nsole `&mut` reference returned by the macro call.\n\n## Borrowing Constructors\n\nThe functions [`from_element`], [`from_element_mut`], [`from_slice`], and\n[`from_slice_mut`] take references to existing memory, and construct `BitSlice`\nreferences over them. These are the most basic ways to borrow memory and view it\nas bits.\n\n```rust\nuse bitvec::prelude::*;\n\nlet data = [0u16; 3];\nlet local_borrow = BitSlice::<Lsb0, _>::from_slice(&data);\n\nlet mut data = [0u8; 5];\nlet local_mut = BitSlice::<Lsb0, _>::from_slice_mut(&mut data);\n```\n\n## Trait Method Constructors\n\nThe [`BitView`] trait implements `.view_bits::<O>()` and `.view_bits_mut::<O>()`\nmethods on elements, arrays not larger than 32 elements, and slices. This trait,\nimported in the crate prelude, is *probably* the easiest way for you to borrow\nmemory.\n\n```rust\nuse bitvec::prelude::*;\n\nlet data = [0u32; 5];\nlet trait_view = data.view_bits::<Msb0>();\n\nlet mut data = 0usize;\nlet trait_mut = data.view_bits_mut::<Msb0>();\n```\n\n## Owned Bit Slices\n\nIf you wish to take ownership of a memory region and enforce that it is always\nviewed as a `BitSlice` by default, you can use one of the [`BitArray`],\n[`BitBox`], or [`BitVec`] types, rather than pairing ordinary buffer types with\nthe borrowing constructors.\n\n```rust\nuse bitvec::prelude::*;\n\nlet slice = bits![0; 27];\nlet array = bitarr![LocalBits, u8; 0; 10];\n# #[cfg(feature = \"alloc\")] fn allocs() {\nlet boxed = bitbox![0; 10];\nlet vec = bitvec![0; 20];\n# } #[cfg(feature = \"alloc\")] allocs();\n\n// arrays always round up\nassert_eq!(array.as_bitslice(), slice[.. 16]);\n# #[cfg(feature = \"alloc\")] fn allocs2() {\n# let slice = bits![0; 27];\n# let boxed = bitbox![0; 10];\n# let vec = bitvec![0; 20];\nassert_eq!(boxed.as_bitslice(), slice[.. 10]);\nassert_eq!(vec.as_bitslice(), slice[.. 20]);\n# } #[cfg(feature = \"alloc\")] allocs2();\n```\n\n[TCP wire format]: https://en.wikipedia.org/wiki/Transmission_Control_Protocol#TCP_segment_structure\n[`BitArray`]: ../array/struct.BitArray.html\n[`BitBox`]: ../boxed/struct.BitBox.html\n[`BitMut<O, T>`]: struct.BitMut.html\n[`BitVec`]: ../vec/struct.BitVec.html\n[`BitView`]: ../view/trait.BitView.html\n[`Lsb0`]: ../order/struct.Lsb0.html\n[`Msb0`]: ../order/struct.Msb0.html\n[`bits!`]: ../macro.bits.html\n[`bitvec::prelude::LocalBits`]: ../order/type.LocalBits.html\n[`std::bitset`]: https://en.cppreference.com/w/cpp/utility/bitset\n[`std::vector<bool>`]: https://en.cppreference.com/w/cpp/container/vector_bool\n**/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":194981,"byte_end":208009,"line_start":75,"line_end":380,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":208010,"byte_end":208030,"line_start":381,"line_end":381,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1154},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":210282,"byte_end":210294,"line_start":447,"line_end":447,"column_start":9,"column_end":21},"name":"from_element","qualname":"<BitSlice<O, T>>::from_element","value":"pub fn from_element(&T) -> &Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a shared `&BitSlice` reference over a shared element.","sig":null,"attributes":[{"value":"/ Constructs a shared `&BitSlice` reference over a shared element.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":209521,"byte_end":209589,"line_start":420,"line_end":420,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":209591,"byte_end":209594,"line_start":421,"line_end":421,"column_start":2,"column_end":5}},{"value":"/ The [`BitView`] trait, implemented on all `T` elements, provides a","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":209596,"byte_end":209666,"line_start":422,"line_end":422,"column_start":2,"column_end":72}},{"value":"/ method [`.view_bits::<O>()`] which delegates to this function and may be","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":209668,"byte_end":209744,"line_start":423,"line_end":423,"column_start":2,"column_end":78}},{"value":"/ more convenient for you to write.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":209746,"byte_end":209783,"line_start":424,"line_end":424,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":209785,"byte_end":209788,"line_start":425,"line_end":425,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":209790,"byte_end":209806,"line_start":426,"line_end":426,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":209808,"byte_end":209811,"line_start":427,"line_end":427,"column_start":2,"column_end":5}},{"value":"/ - `elem`: A shared reference to a memory element.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":209813,"byte_end":209866,"line_start":428,"line_end":428,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":209868,"byte_end":209871,"line_start":429,"line_end":429,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":209873,"byte_end":209886,"line_start":430,"line_end":430,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":209888,"byte_end":209891,"line_start":431,"line_end":431,"column_start":2,"column_end":5}},{"value":"/ A shared `&BitSlice` over the `elem` element.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":209893,"byte_end":209942,"line_start":432,"line_end":432,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":209944,"byte_end":209947,"line_start":433,"line_end":433,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":209949,"byte_end":209963,"line_start":434,"line_end":434,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":209965,"byte_end":209968,"line_start":435,"line_end":435,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":209970,"byte_end":209981,"line_start":436,"line_end":436,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":209983,"byte_end":210010,"line_start":437,"line_end":437,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":210012,"byte_end":210015,"line_start":438,"line_end":438,"column_start":2,"column_end":5}},{"value":"/ let elem = 0u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":210017,"byte_end":210036,"line_start":439,"line_end":439,"column_start":2,"column_end":21}},{"value":"/ let bits = BitSlice::<LocalBits, _>::from_element(&elem);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":210038,"byte_end":210099,"line_start":440,"line_end":440,"column_start":2,"column_end":63}},{"value":"/ assert_eq!(bits.len(), 8);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":210101,"byte_end":210131,"line_start":441,"line_end":441,"column_start":2,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":210133,"byte_end":210140,"line_start":442,"line_end":442,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":210142,"byte_end":210145,"line_start":443,"line_end":443,"column_start":2,"column_end":5}},{"value":"/ [`BitView`]: ../view/trait.BitView.html","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":210147,"byte_end":210190,"line_start":444,"line_end":444,"column_start":2,"column_end":45}},{"value":"/ [`.view_bits::<O>()`]: ../view/trait.BitView.html#method.view_bits","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":210192,"byte_end":210262,"line_start":445,"line_end":445,"column_start":2,"column_end":72}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":210264,"byte_end":210273,"line_start":446,"line_end":446,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1155},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":211417,"byte_end":211433,"line_start":487,"line_end":487,"column_start":9,"column_end":25},"name":"from_element_mut","qualname":"<BitSlice<O, T>>::from_element_mut","value":"pub fn from_element_mut(&mut T) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs an exclusive `&mut BitSlice` reference over an element.","sig":null,"attributes":[{"value":"/ Constructs an exclusive `&mut BitSlice` reference over an element.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":210425,"byte_end":210495,"line_start":454,"line_end":454,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":210497,"byte_end":210500,"line_start":455,"line_end":455,"column_start":2,"column_end":5}},{"value":"/ The [`BitView`] trait, implemented on all `T` elements, provides a","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":210502,"byte_end":210572,"line_start":456,"line_end":456,"column_start":2,"column_end":72}},{"value":"/ method [`.view_bits_mut::<O>()`] which delegates to this function and","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":210574,"byte_end":210647,"line_start":457,"line_end":457,"column_start":2,"column_end":75}},{"value":"/ may be more convenient for you to write.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":210649,"byte_end":210693,"line_start":458,"line_end":458,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":210695,"byte_end":210698,"line_start":459,"line_end":459,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":210700,"byte_end":210716,"line_start":460,"line_end":460,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":210718,"byte_end":210721,"line_start":461,"line_end":461,"column_start":2,"column_end":5}},{"value":"/ - `elem`: An exclusive reference to a memory element.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":210723,"byte_end":210780,"line_start":462,"line_end":462,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":210782,"byte_end":210785,"line_start":463,"line_end":463,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":210787,"byte_end":210800,"line_start":464,"line_end":464,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":210802,"byte_end":210805,"line_start":465,"line_end":465,"column_start":2,"column_end":5}},{"value":"/ An exclusive `&mut BitSlice` over the `elem` element.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":210807,"byte_end":210864,"line_start":466,"line_end":466,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":210866,"byte_end":210869,"line_start":467,"line_end":467,"column_start":2,"column_end":5}},{"value":"/ Note that the original `elem` reference will be inaccessible for the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":210871,"byte_end":210943,"line_start":468,"line_end":468,"column_start":2,"column_end":74}},{"value":"/ duration of the returned slice handle’s lifetime.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":210945,"byte_end":211000,"line_start":469,"line_end":469,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":211002,"byte_end":211005,"line_start":470,"line_end":470,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":211007,"byte_end":211021,"line_start":471,"line_end":471,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":211023,"byte_end":211026,"line_start":472,"line_end":472,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":211028,"byte_end":211039,"line_start":473,"line_end":473,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":211041,"byte_end":211068,"line_start":474,"line_end":474,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":211070,"byte_end":211073,"line_start":475,"line_end":475,"column_start":2,"column_end":5}},{"value":"/ let mut elem = 0u16;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":211075,"byte_end":211099,"line_start":476,"line_end":476,"column_start":2,"column_end":26}},{"value":"/ let bits = BitSlice::<Msb0, _>::from_element_mut(&mut elem);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":211101,"byte_end":211165,"line_start":477,"line_end":477,"column_start":2,"column_end":66}},{"value":"/ bits.set(15, true);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":211167,"byte_end":211190,"line_start":478,"line_end":478,"column_start":2,"column_end":25}},{"value":"/ assert!(bits.get(15).unwrap());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":211192,"byte_end":211227,"line_start":479,"line_end":479,"column_start":2,"column_end":37}},{"value":"/ assert_eq!(elem, 1);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":211229,"byte_end":211253,"line_start":480,"line_end":480,"column_start":2,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":211255,"byte_end":211262,"line_start":481,"line_end":481,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":211264,"byte_end":211267,"line_start":482,"line_end":482,"column_start":2,"column_end":5}},{"value":"/ [`BitView`]: ../view/trait.BitView.html","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":211269,"byte_end":211312,"line_start":483,"line_end":483,"column_start":2,"column_end":45}},{"value":"/ [`.view_bits_mut::<O>()`]:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":211314,"byte_end":211344,"line_start":484,"line_end":484,"column_start":2,"column_end":32}},{"value":"/ ../view/trait.BitView.html#method.view_bits_mut","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":211346,"byte_end":211397,"line_start":485,"line_end":485,"column_start":2,"column_end":53}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":211399,"byte_end":211408,"line_start":486,"line_end":486,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1156},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":212769,"byte_end":212779,"line_start":531,"line_end":531,"column_start":9,"column_end":19},"name":"from_slice","qualname":"<BitSlice<O, T>>::from_slice","value":"pub fn from_slice(&[T]) -> Option<&Self>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a shared `&BitSlice` reference over a shared element slice.","sig":null,"attributes":[{"value":"/ Constructs a shared `&BitSlice` reference over a shared element slice.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":211572,"byte_end":211646,"line_start":494,"line_end":494,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":211648,"byte_end":211651,"line_start":495,"line_end":495,"column_start":2,"column_end":5}},{"value":"/ The [`BitView`] trait, implemented on all `[T]` slices, provides a","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":211653,"byte_end":211723,"line_start":496,"line_end":496,"column_start":2,"column_end":72}},{"value":"/ method [`.view_bits::<O>()`] that is equivalent to this function and may","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":211725,"byte_end":211801,"line_start":497,"line_end":497,"column_start":2,"column_end":78}},{"value":"/ be more convenient for you to write.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":211803,"byte_end":211843,"line_start":498,"line_end":498,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":211845,"byte_end":211848,"line_start":499,"line_end":499,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":211850,"byte_end":211866,"line_start":500,"line_end":500,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":211868,"byte_end":211871,"line_start":501,"line_end":501,"column_start":2,"column_end":5}},{"value":"/ - `slice`: A shared reference over a sequence of memory elements.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":211873,"byte_end":211942,"line_start":502,"line_end":502,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":211944,"byte_end":211947,"line_start":503,"line_end":503,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":211949,"byte_end":211962,"line_start":504,"line_end":504,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":211964,"byte_end":211967,"line_start":505,"line_end":505,"column_start":2,"column_end":5}},{"value":"/ If `slice` does not have fewer than [`MAX_ELTS`] elements, this returns","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":211969,"byte_end":212044,"line_start":506,"line_end":506,"column_start":2,"column_end":77}},{"value":"/ `None`. Otherwise, it returns a shared `&BitSlice` over the `slice`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":212046,"byte_end":212117,"line_start":507,"line_end":507,"column_start":2,"column_end":73}},{"value":"/ elements.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":212119,"byte_end":212132,"line_start":508,"line_end":508,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":212134,"byte_end":212137,"line_start":509,"line_end":509,"column_start":2,"column_end":5}},{"value":"/ # Conditions","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":212139,"byte_end":212155,"line_start":510,"line_end":510,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":212157,"byte_end":212160,"line_start":511,"line_end":511,"column_start":2,"column_end":5}},{"value":"/ The produced `&BitSlice` handle always begins at the zeroth bit.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":212162,"byte_end":212230,"line_start":512,"line_end":512,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":212232,"byte_end":212235,"line_start":513,"line_end":513,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":212237,"byte_end":212251,"line_start":514,"line_end":514,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":212253,"byte_end":212256,"line_start":515,"line_end":515,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":212258,"byte_end":212269,"line_start":516,"line_end":516,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":212271,"byte_end":212298,"line_start":517,"line_end":517,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":212300,"byte_end":212303,"line_start":518,"line_end":518,"column_start":2,"column_end":5}},{"value":"/ let slice = &[0u8, 1];","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":212305,"byte_end":212331,"line_start":519,"line_end":519,"column_start":2,"column_end":28}},{"value":"/ let bits = BitSlice::<Msb0, _>::from_slice(slice).unwrap();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":212333,"byte_end":212396,"line_start":520,"line_end":520,"column_start":2,"column_end":65}},{"value":"/ assert!(bits[15]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":212398,"byte_end":212420,"line_start":521,"line_end":521,"column_start":2,"column_end":24}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":212422,"byte_end":212429,"line_start":522,"line_end":522,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":212431,"byte_end":212434,"line_start":523,"line_end":523,"column_start":2,"column_end":5}},{"value":"/ An example showing this function failing would require a slice exceeding","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":212436,"byte_end":212512,"line_start":524,"line_end":524,"column_start":2,"column_end":78}},{"value":"/ `!0usize >> 3` bytes in size, which is infeasible to produce.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":212514,"byte_end":212579,"line_start":525,"line_end":525,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":212581,"byte_end":212584,"line_start":526,"line_end":526,"column_start":2,"column_end":5}},{"value":"/ [`BitView`]: ../view/trait.BitView.html","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":212586,"byte_end":212629,"line_start":527,"line_end":527,"column_start":2,"column_end":45}},{"value":"/ [`MAX_ELTS`]: #associatedconstant.MAX_ELTS","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":212631,"byte_end":212677,"line_start":528,"line_end":528,"column_start":2,"column_end":48}},{"value":"/ [`.view_bits::<O>()`]: ../view/trait.BitView.html#method.view_bits","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":212679,"byte_end":212749,"line_start":529,"line_end":529,"column_start":2,"column_end":72}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":212751,"byte_end":212760,"line_start":530,"line_end":530,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1157},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":213504,"byte_end":213524,"line_start":555,"line_end":555,"column_start":16,"column_end":36},"name":"from_slice_unchecked","qualname":"<BitSlice<O, T>>::from_slice_unchecked","value":"pub unsafe fn from_slice_unchecked(&[T]) -> &Self","parent":null,"children":[],"decl_id":null,"docs":" Converts a slice reference into a `BitSlice` reference without checking\n that its size can be safely used.","sig":null,"attributes":[{"value":"/ Converts a slice reference into a `BitSlice` reference without checking","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":213044,"byte_end":213119,"line_start":541,"line_end":541,"column_start":2,"column_end":77}},{"value":"/ that its size can be safely used.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":213121,"byte_end":213158,"line_start":542,"line_end":542,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":213160,"byte_end":213163,"line_start":543,"line_end":543,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":213165,"byte_end":213177,"line_start":544,"line_end":544,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":213179,"byte_end":213182,"line_start":545,"line_end":545,"column_start":2,"column_end":5}},{"value":"/ If the `slice` length is too long, then it will be capped at","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":213184,"byte_end":213248,"line_start":546,"line_end":546,"column_start":2,"column_end":66}},{"value":"/ [`MAX_BITS`]. You are responsible for ensuring that the input slice is","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":213250,"byte_end":213324,"line_start":547,"line_end":547,"column_start":2,"column_end":76}},{"value":"/ not unduly truncated.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":213326,"byte_end":213351,"line_start":548,"line_end":548,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":213353,"byte_end":213356,"line_start":549,"line_end":549,"column_start":2,"column_end":5}},{"value":"/ Prefer [`from_slice`].","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":213358,"byte_end":213384,"line_start":550,"line_end":550,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":213386,"byte_end":213389,"line_start":551,"line_end":551,"column_start":2,"column_end":5}},{"value":"/ [`MAX_BITS`]: #associatedconstant.MAX_BITS","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":213391,"byte_end":213437,"line_start":552,"line_end":552,"column_start":2,"column_end":48}},{"value":"/ [`from_slice`]: #method.from_slice","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":213439,"byte_end":213477,"line_start":553,"line_end":553,"column_start":2,"column_end":40}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":213479,"byte_end":213488,"line_start":554,"line_end":554,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1158},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":215740,"byte_end":215754,"line_start":623,"line_end":623,"column_start":9,"column_end":23},"name":"from_slice_mut","qualname":"<BitSlice<O, T>>::from_slice_mut","value":"pub fn from_slice_mut(&mut [T]) -> Option<&mut Self>","parent":null,"children":[],"decl_id":null,"docs":" Constructs an exclusive `&mut BitSlice` reference over a slice.","sig":null,"attributes":[{"value":"/ Constructs an exclusive `&mut BitSlice` reference over a slice.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":213860,"byte_end":213927,"line_start":563,"line_end":563,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":213929,"byte_end":213932,"line_start":564,"line_end":564,"column_start":2,"column_end":5}},{"value":"/ The [`BitView`] trait, implemented on all `[T]` slices, provides a","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":213934,"byte_end":214004,"line_start":565,"line_end":565,"column_start":2,"column_end":72}},{"value":"/ method [`.view_bits_mut::<O>()`] that is equivalent to this function and","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":214006,"byte_end":214082,"line_start":566,"line_end":566,"column_start":2,"column_end":78}},{"value":"/ may be more convenient for you to write.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":214084,"byte_end":214128,"line_start":567,"line_end":567,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":214130,"byte_end":214133,"line_start":568,"line_end":568,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":214135,"byte_end":214151,"line_start":569,"line_end":569,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":214153,"byte_end":214156,"line_start":570,"line_end":570,"column_start":2,"column_end":5}},{"value":"/ - `slice`: An exclusive reference over a sequence of memory elements.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":214158,"byte_end":214231,"line_start":571,"line_end":571,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":214233,"byte_end":214236,"line_start":572,"line_end":572,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":214238,"byte_end":214251,"line_start":573,"line_end":573,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":214253,"byte_end":214256,"line_start":574,"line_end":574,"column_start":2,"column_end":5}},{"value":"/ An exclusive `&mut BitSlice` over the `slice` elements.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":214258,"byte_end":214317,"line_start":575,"line_end":575,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":214319,"byte_end":214322,"line_start":576,"line_end":576,"column_start":2,"column_end":5}},{"value":"/ Note that the original `slice` reference will be inaccessible for the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":214324,"byte_end":214397,"line_start":577,"line_end":577,"column_start":2,"column_end":75}},{"value":"/ duration of the returned slice handle’s lifetime.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":214399,"byte_end":214454,"line_start":578,"line_end":578,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":214456,"byte_end":214459,"line_start":579,"line_end":579,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":214461,"byte_end":214473,"line_start":580,"line_end":580,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":214475,"byte_end":214478,"line_start":581,"line_end":581,"column_start":2,"column_end":5}},{"value":"/ This panics if `slice` does not have fewer than [`MAX_ELTS`] elements.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":214480,"byte_end":214554,"line_start":582,"line_end":582,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":214556,"byte_end":214559,"line_start":583,"line_end":583,"column_start":2,"column_end":5}},{"value":"/ [`MAX_ELTS`]: #associatedconstant.MAX_ELTS","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":214561,"byte_end":214607,"line_start":584,"line_end":584,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":214609,"byte_end":214612,"line_start":585,"line_end":585,"column_start":2,"column_end":5}},{"value":"/ # Conditions","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":214614,"byte_end":214630,"line_start":586,"line_end":586,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":214632,"byte_end":214635,"line_start":587,"line_end":587,"column_start":2,"column_end":5}},{"value":"/ The produced `&mut BitSlice` handle always begins at the zeroth bit of","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":214637,"byte_end":214711,"line_start":588,"line_end":588,"column_start":2,"column_end":76}},{"value":"/ the zeroth element in `slice`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":214713,"byte_end":214747,"line_start":589,"line_end":589,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":214749,"byte_end":214752,"line_start":590,"line_end":590,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":214754,"byte_end":214768,"line_start":591,"line_end":591,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":214770,"byte_end":214773,"line_start":592,"line_end":592,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":214775,"byte_end":214786,"line_start":593,"line_end":593,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":214788,"byte_end":214815,"line_start":594,"line_end":594,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":214817,"byte_end":214820,"line_start":595,"line_end":595,"column_start":2,"column_end":5}},{"value":"/ let mut slice = [0u8; 2];","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":214822,"byte_end":214851,"line_start":596,"line_end":596,"column_start":2,"column_end":31}},{"value":"/ let bits = BitSlice::<Lsb0, _>::from_slice_mut(&mut slice).unwrap();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":214853,"byte_end":214925,"line_start":597,"line_end":597,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":214927,"byte_end":214930,"line_start":598,"line_end":598,"column_start":2,"column_end":5}},{"value":"/ assert!(!bits[0]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":214932,"byte_end":214954,"line_start":599,"line_end":599,"column_start":2,"column_end":24}},{"value":"/ bits.set(0, true);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":214956,"byte_end":214978,"line_start":600,"line_end":600,"column_start":2,"column_end":24}},{"value":"/ assert!(bits[0]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":214980,"byte_end":215001,"line_start":601,"line_end":601,"column_start":2,"column_end":23}},{"value":"/ assert_eq!(slice[0], 1);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":215003,"byte_end":215031,"line_start":602,"line_end":602,"column_start":2,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":215033,"byte_end":215040,"line_start":603,"line_end":603,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":215042,"byte_end":215045,"line_start":604,"line_end":604,"column_start":2,"column_end":5}},{"value":"/ This example attempts to construct a `&mut BitSlice` handle from a slice","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":215047,"byte_end":215123,"line_start":605,"line_end":605,"column_start":2,"column_end":78}},{"value":"/ that is too large to index. Either the `vec!` allocation will fail, or","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":215125,"byte_end":215199,"line_start":606,"line_end":606,"column_start":2,"column_end":76}},{"value":"/ the bit-slice constructor will fail.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":215201,"byte_end":215241,"line_start":607,"line_end":607,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":215243,"byte_end":215246,"line_start":608,"line_end":608,"column_start":2,"column_end":5}},{"value":"/ ```rust,should_panic","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":215248,"byte_end":215272,"line_start":609,"line_end":609,"column_start":2,"column_end":26}},{"value":"/ # #[cfg(feature = \"alloc\")] {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":215274,"byte_end":215307,"line_start":610,"line_end":610,"column_start":2,"column_end":35}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":215309,"byte_end":215336,"line_start":611,"line_end":611,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":215338,"byte_end":215341,"line_start":612,"line_end":612,"column_start":2,"column_end":5}},{"value":"/ let mut data = vec![0usize; BitSlice::<LocalBits, usize>::MAX_ELTS];","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":215343,"byte_end":215415,"line_start":613,"line_end":613,"column_start":2,"column_end":74}},{"value":"/ let bits = BitSlice::<LocalBits, _>::from_slice_mut(&mut data[..]).unwrap();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":215417,"byte_end":215497,"line_start":614,"line_end":614,"column_start":2,"column_end":82}},{"value":"/ # }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":215499,"byte_end":215506,"line_start":615,"line_end":615,"column_start":2,"column_end":9}},{"value":"/ # #[cfg(not(feature = \"alloc\"))] panic!(\"No allocator present\");","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":215508,"byte_end":215576,"line_start":616,"line_end":616,"column_start":2,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":215578,"byte_end":215585,"line_start":617,"line_end":617,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":215587,"byte_end":215590,"line_start":618,"line_end":618,"column_start":2,"column_end":5}},{"value":"/ [`BitView`]: ../view/trait.BitView.html","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":215592,"byte_end":215635,"line_start":619,"line_end":619,"column_start":2,"column_end":45}},{"value":"/ [`.view_bits_mut::<O>()`]:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":215637,"byte_end":215667,"line_start":620,"line_end":620,"column_start":2,"column_end":32}},{"value":"/ ../view/trait.BitView.html#method.view_bits_mut","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":215669,"byte_end":215720,"line_start":621,"line_end":621,"column_start":2,"column_end":53}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":215722,"byte_end":215731,"line_start":622,"line_end":622,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1159},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":216405,"byte_end":216429,"line_start":645,"line_end":645,"column_start":16,"column_end":40},"name":"from_slice_unchecked_mut","qualname":"<BitSlice<O, T>>::from_slice_unchecked_mut","value":"pub unsafe fn from_slice_unchecked_mut(&mut [T]) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Converts a slice reference into a `BitSlice` reference without checking\n that its size can be safely used.","sig":null,"attributes":[{"value":"/ Converts a slice reference into a `BitSlice` reference without checking","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":215933,"byte_end":216008,"line_start":631,"line_end":631,"column_start":2,"column_end":77}},{"value":"/ that its size can be safely used.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":216010,"byte_end":216047,"line_start":632,"line_end":632,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":216049,"byte_end":216052,"line_start":633,"line_end":633,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":216054,"byte_end":216066,"line_start":634,"line_end":634,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":216068,"byte_end":216071,"line_start":635,"line_end":635,"column_start":2,"column_end":5}},{"value":"/ If the `slice` length is too long, then it will be capped at","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":216073,"byte_end":216137,"line_start":636,"line_end":636,"column_start":2,"column_end":66}},{"value":"/ [`MAX_BITS`]. You are responsible for ensuring that the input slice is","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":216139,"byte_end":216213,"line_start":637,"line_end":637,"column_start":2,"column_end":76}},{"value":"/ not unduly truncated.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":216215,"byte_end":216240,"line_start":638,"line_end":638,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":216242,"byte_end":216245,"line_start":639,"line_end":639,"column_start":2,"column_end":5}},{"value":"/ Prefer [`from_slice_mut`].","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":216247,"byte_end":216277,"line_start":640,"line_end":640,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":216279,"byte_end":216282,"line_start":641,"line_end":641,"column_start":2,"column_end":5}},{"value":"/ [`MAX_BITS`]: #associatedconstant.MAX_BITS","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":216284,"byte_end":216330,"line_start":642,"line_end":642,"column_start":2,"column_end":48}},{"value":"/ [`from_slice_mut`]: #method.from_slice_mut","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":216332,"byte_end":216378,"line_start":643,"line_end":643,"column_start":2,"column_end":48}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":216380,"byte_end":216389,"line_start":644,"line_end":644,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1163},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":217019,"byte_end":217024,"line_start":670,"line_end":670,"column_start":9,"column_end":14},"name":"empty","qualname":"<BitSlice<O, T>>::empty","value":"pub fn empty<'a>() -> &'a Self","parent":null,"children":[],"decl_id":null,"docs":" Produces the empty slice. This is equivalent to `&[]` for ordinary\n slices.","sig":null,"attributes":[{"value":"/ Produces the empty slice. This is equivalent to `&[]` for ordinary","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":216757,"byte_end":216827,"line_start":658,"line_end":658,"column_start":2,"column_end":72}},{"value":"/ slices.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":216829,"byte_end":216840,"line_start":659,"line_end":659,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":216842,"byte_end":216845,"line_start":660,"line_end":660,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":216847,"byte_end":216861,"line_start":661,"line_end":661,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":216863,"byte_end":216866,"line_start":662,"line_end":662,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":216868,"byte_end":216879,"line_start":663,"line_end":663,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":216881,"byte_end":216908,"line_start":664,"line_end":664,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":216910,"byte_end":216913,"line_start":665,"line_end":665,"column_start":2,"column_end":5}},{"value":"/ let bits: &BitSlice = BitSlice::empty();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":216915,"byte_end":216959,"line_start":666,"line_end":666,"column_start":2,"column_end":46}},{"value":"/ assert!(bits.is_empty());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":216961,"byte_end":216990,"line_start":667,"line_end":667,"column_start":2,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":216992,"byte_end":216999,"line_start":668,"line_end":668,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":217001,"byte_end":217010,"line_start":669,"line_end":669,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1165},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":217366,"byte_end":217375,"line_start":686,"line_end":686,"column_start":9,"column_end":18},"name":"empty_mut","qualname":"<BitSlice<O, T>>::empty_mut","value":"pub fn empty_mut<'a>() -> &'a mut Self","parent":null,"children":[],"decl_id":null,"docs":" Produces the empty mutable slice. This is equivalent to `&mut []` for\n ordinary slices.","sig":null,"attributes":[{"value":"/ Produces the empty mutable slice. This is equivalent to `&mut []` for","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":217084,"byte_end":217157,"line_start":674,"line_end":674,"column_start":2,"column_end":75}},{"value":"/ ordinary slices.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":217159,"byte_end":217179,"line_start":675,"line_end":675,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":217181,"byte_end":217184,"line_start":676,"line_end":676,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":217186,"byte_end":217200,"line_start":677,"line_end":677,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":217202,"byte_end":217205,"line_start":678,"line_end":678,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":217207,"byte_end":217218,"line_start":679,"line_end":679,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":217220,"byte_end":217247,"line_start":680,"line_end":680,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":217249,"byte_end":217252,"line_start":681,"line_end":681,"column_start":2,"column_end":5}},{"value":"/ let bits: &mut BitSlice = BitSlice::empty_mut();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":217254,"byte_end":217306,"line_start":682,"line_end":682,"column_start":2,"column_end":54}},{"value":"/ assert!(bits.is_empty());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":217308,"byte_end":217337,"line_start":683,"line_end":683,"column_start":2,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":217339,"byte_end":217346,"line_start":684,"line_end":684,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":217348,"byte_end":217357,"line_start":685,"line_end":685,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1167},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":218424,"byte_end":218427,"line_start":730,"line_end":730,"column_start":9,"column_end":12},"name":"set","qualname":"<BitSlice<O, T>>::set","value":"pub fn set(&mut Self, usize, bool)","parent":null,"children":[],"decl_id":null,"docs":" Sets the bit value at the given position.","sig":null,"attributes":[{"value":"/ Sets the bit value at the given position.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":217439,"byte_end":217484,"line_start":690,"line_end":690,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":217486,"byte_end":217489,"line_start":691,"line_end":691,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":217491,"byte_end":217507,"line_start":692,"line_end":692,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":217509,"byte_end":217512,"line_start":693,"line_end":693,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":217514,"byte_end":217531,"line_start":694,"line_end":694,"column_start":2,"column_end":19}},{"value":"/ - `index`: The bit index to set. It must be in the range `0 ..","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":217533,"byte_end":217599,"line_start":695,"line_end":695,"column_start":2,"column_end":68}},{"value":"/   self.len()`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":217601,"byte_end":217619,"line_start":696,"line_end":696,"column_start":2,"column_end":20}},{"value":"/ - `value`: The value to be set, `true` for `1` and `false` for `0`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":217621,"byte_end":217692,"line_start":697,"line_end":697,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":217694,"byte_end":217697,"line_start":698,"line_end":698,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":217699,"byte_end":217712,"line_start":699,"line_end":699,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":217714,"byte_end":217717,"line_start":700,"line_end":700,"column_start":2,"column_end":5}},{"value":"/ If `index` is valid, then the bit to which it refers is set to `value`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":217719,"byte_end":217794,"line_start":701,"line_end":701,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":217796,"byte_end":217799,"line_start":702,"line_end":702,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":217801,"byte_end":217813,"line_start":703,"line_end":703,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":217815,"byte_end":217818,"line_start":704,"line_end":704,"column_start":2,"column_end":5}},{"value":"/ This method panics if `index` is outside the slice domain.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":217820,"byte_end":217882,"line_start":705,"line_end":705,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":217884,"byte_end":217887,"line_start":706,"line_end":706,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":217889,"byte_end":217903,"line_start":707,"line_end":707,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":217905,"byte_end":217908,"line_start":708,"line_end":708,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":217910,"byte_end":217921,"line_start":709,"line_end":709,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":217923,"byte_end":217950,"line_start":710,"line_end":710,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":217952,"byte_end":217955,"line_start":711,"line_end":711,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":217957,"byte_end":217980,"line_start":712,"line_end":712,"column_start":2,"column_end":25}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":217982,"byte_end":218026,"line_start":713,"line_end":713,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":218028,"byte_end":218031,"line_start":714,"line_end":714,"column_start":2,"column_end":5}},{"value":"/ assert!(!bits.get(7).unwrap());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":218033,"byte_end":218068,"line_start":715,"line_end":715,"column_start":2,"column_end":37}},{"value":"/ bits.set(7, true);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":218070,"byte_end":218092,"line_start":716,"line_end":716,"column_start":2,"column_end":24}},{"value":"/ assert!(bits.get(7).unwrap());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":218094,"byte_end":218128,"line_start":717,"line_end":717,"column_start":2,"column_end":36}},{"value":"/ assert_eq!(data, 1);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":218130,"byte_end":218154,"line_start":718,"line_end":718,"column_start":2,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":218156,"byte_end":218163,"line_start":719,"line_end":719,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":218165,"byte_end":218168,"line_start":720,"line_end":720,"column_start":2,"column_end":5}},{"value":"/ This example panics when it attempts to set a bit that is out of bounds.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":218170,"byte_end":218246,"line_start":721,"line_end":721,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":218248,"byte_end":218251,"line_start":722,"line_end":722,"column_start":2,"column_end":5}},{"value":"/ ```rust,should_panic","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":218253,"byte_end":218277,"line_start":723,"line_end":723,"column_start":2,"column_end":26}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":218279,"byte_end":218306,"line_start":724,"line_end":724,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":218308,"byte_end":218311,"line_start":725,"line_end":725,"column_start":2,"column_end":5}},{"value":"/ let bits = BitSlice::<LocalBits, usize>::empty_mut();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":218313,"byte_end":218370,"line_start":726,"line_end":726,"column_start":2,"column_end":59}},{"value":"/ bits.set(0, false);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":218372,"byte_end":218395,"line_start":727,"line_end":727,"column_start":2,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":218397,"byte_end":218404,"line_start":728,"line_end":728,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":218406,"byte_end":218415,"line_start":729,"line_end":729,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1168},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":219947,"byte_end":219960,"line_start":784,"line_end":784,"column_start":16,"column_end":29},"name":"set_unchecked","qualname":"<BitSlice<O, T>>::set_unchecked","value":"pub unsafe fn set_unchecked(&mut Self, usize, bool)","parent":null,"children":[],"decl_id":null,"docs":" Sets a bit at an index, without checking boundary conditions.","sig":null,"attributes":[{"value":"/ Sets a bit at an index, without checking boundary conditions.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":218617,"byte_end":218682,"line_start":738,"line_end":738,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":218684,"byte_end":218687,"line_start":739,"line_end":739,"column_start":2,"column_end":5}},{"value":"/ This is generally not recommended; use with caution! For a safe","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":218689,"byte_end":218756,"line_start":740,"line_end":740,"column_start":2,"column_end":69}},{"value":"/ alternative, see [`set`].","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":218758,"byte_end":218787,"line_start":741,"line_end":741,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":218789,"byte_end":218792,"line_start":742,"line_end":742,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":218794,"byte_end":218810,"line_start":743,"line_end":743,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":218812,"byte_end":218815,"line_start":744,"line_end":744,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":218817,"byte_end":218834,"line_start":745,"line_end":745,"column_start":2,"column_end":19}},{"value":"/ - `index`: The bit index to set. It must be in the range `0 ..","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":218836,"byte_end":218902,"line_start":746,"line_end":746,"column_start":2,"column_end":68}},{"value":"/   self.len()`. It will not be checked.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":218904,"byte_end":218946,"line_start":747,"line_end":747,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":218948,"byte_end":218951,"line_start":748,"line_end":748,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":218953,"byte_end":218966,"line_start":749,"line_end":749,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":218968,"byte_end":218971,"line_start":750,"line_end":750,"column_start":2,"column_end":5}},{"value":"/ The bit at `index` is set to `value`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":218973,"byte_end":219014,"line_start":751,"line_end":751,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":219016,"byte_end":219019,"line_start":752,"line_end":752,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":219021,"byte_end":219033,"line_start":753,"line_end":753,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":219035,"byte_end":219038,"line_start":754,"line_end":754,"column_start":2,"column_end":5}},{"value":"/ This method is **not** safe. It performs raw pointer arithmetic to seek","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":219040,"byte_end":219115,"line_start":755,"line_end":755,"column_start":2,"column_end":77}},{"value":"/ from the start of the slice to the requested index, and set the bit","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":219117,"byte_end":219188,"line_start":756,"line_end":756,"column_start":2,"column_end":73}},{"value":"/ there. It does not inspect the length of `self`, and it is free to","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":219190,"byte_end":219260,"line_start":757,"line_end":757,"column_start":2,"column_end":72}},{"value":"/ perform out-of-bounds memory *write* access.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":219262,"byte_end":219310,"line_start":758,"line_end":758,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":219312,"byte_end":219315,"line_start":759,"line_end":759,"column_start":2,"column_end":5}},{"value":"/ Use this method **only** when you have already performed the bounds","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":219317,"byte_end":219388,"line_start":760,"line_end":760,"column_start":2,"column_end":73}},{"value":"/ check, and can guarantee that the call occurs with a safely in-bounds","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":219390,"byte_end":219463,"line_start":761,"line_end":761,"column_start":2,"column_end":75}},{"value":"/ index.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":219465,"byte_end":219475,"line_start":762,"line_end":762,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":219477,"byte_end":219480,"line_start":763,"line_end":763,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":219482,"byte_end":219496,"line_start":764,"line_end":764,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":219498,"byte_end":219501,"line_start":765,"line_end":765,"column_start":2,"column_end":5}},{"value":"/ This example uses a bit slice of length 2, and demonstrates","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":219503,"byte_end":219566,"line_start":766,"line_end":766,"column_start":2,"column_end":65}},{"value":"/ out-of-bounds access to the last bit in the element.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":219568,"byte_end":219624,"line_start":767,"line_end":767,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":219626,"byte_end":219629,"line_start":768,"line_end":768,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":219631,"byte_end":219642,"line_start":769,"line_end":769,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":219644,"byte_end":219671,"line_start":770,"line_end":770,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":219673,"byte_end":219676,"line_start":771,"line_end":771,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":219678,"byte_end":219701,"line_start":772,"line_end":772,"column_start":2,"column_end":25}},{"value":"/ let bits = &mut data.view_bits_mut::<Msb0>()[2 .. 4];","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":219703,"byte_end":219760,"line_start":773,"line_end":773,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":219762,"byte_end":219765,"line_start":774,"line_end":774,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bits.len(), 2);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":219767,"byte_end":219797,"line_start":775,"line_end":775,"column_start":2,"column_end":32}},{"value":"/ unsafe {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":219799,"byte_end":219811,"line_start":776,"line_end":776,"column_start":2,"column_end":14}},{"value":"/   bits.set_unchecked(5, true);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":219813,"byte_end":219847,"line_start":777,"line_end":777,"column_start":2,"column_end":36}},{"value":"/ }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":219849,"byte_end":219854,"line_start":778,"line_end":778,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(data, 1);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":219856,"byte_end":219880,"line_start":779,"line_end":779,"column_start":2,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":219882,"byte_end":219889,"line_start":780,"line_end":780,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":219891,"byte_end":219894,"line_start":781,"line_end":781,"column_start":2,"column_end":5}},{"value":"/ [`set`]: #method.set","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":219896,"byte_end":219920,"line_start":782,"line_end":782,"column_start":2,"column_end":26}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":219922,"byte_end":219931,"line_start":783,"line_end":783,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1169},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":220590,"byte_end":220593,"line_start":818,"line_end":818,"column_start":9,"column_end":12},"name":"all","qualname":"<BitSlice<O, T>>::all","value":"pub fn all(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if *all* bits in the slice domain are set (logical `∧`).","sig":null,"attributes":[{"value":"/ Tests if *all* bits in the slice domain are set (logical `∧`).","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":220048,"byte_end":220116,"line_start":788,"line_end":788,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":220118,"byte_end":220121,"line_start":789,"line_end":789,"column_start":2,"column_end":5}},{"value":"/ # Truth Table","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":220123,"byte_end":220140,"line_start":790,"line_end":790,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":220142,"byte_end":220145,"line_start":791,"line_end":791,"column_start":2,"column_end":5}},{"value":"/ ```text","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":220147,"byte_end":220158,"line_start":792,"line_end":792,"column_start":2,"column_end":13}},{"value":"/ 0 0 => 0","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":220160,"byte_end":220172,"line_start":793,"line_end":793,"column_start":2,"column_end":14}},{"value":"/ 0 1 => 0","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":220174,"byte_end":220186,"line_start":794,"line_end":794,"column_start":2,"column_end":14}},{"value":"/ 1 0 => 0","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":220188,"byte_end":220200,"line_start":795,"line_end":795,"column_start":2,"column_end":14}},{"value":"/ 1 1 => 1","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":220202,"byte_end":220214,"line_start":796,"line_end":796,"column_start":2,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":220216,"byte_end":220223,"line_start":797,"line_end":797,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":220225,"byte_end":220228,"line_start":798,"line_end":798,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":220230,"byte_end":220246,"line_start":799,"line_end":799,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":220248,"byte_end":220251,"line_start":800,"line_end":800,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":220253,"byte_end":220266,"line_start":801,"line_end":801,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":220268,"byte_end":220271,"line_start":802,"line_end":802,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":220273,"byte_end":220286,"line_start":803,"line_end":803,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":220288,"byte_end":220291,"line_start":804,"line_end":804,"column_start":2,"column_end":5}},{"value":"/ Whether all bits in the slice domain are set. The empty slice returns","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":220293,"byte_end":220366,"line_start":805,"line_end":805,"column_start":2,"column_end":75}},{"value":"/ `true`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":220368,"byte_end":220379,"line_start":806,"line_end":806,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":220381,"byte_end":220384,"line_start":807,"line_end":807,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":220386,"byte_end":220400,"line_start":808,"line_end":808,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":220402,"byte_end":220405,"line_start":809,"line_end":809,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":220407,"byte_end":220418,"line_start":810,"line_end":810,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":220420,"byte_end":220447,"line_start":811,"line_end":811,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":220449,"byte_end":220452,"line_start":812,"line_end":812,"column_start":2,"column_end":5}},{"value":"/ let bits = 0xFDu8.view_bits::<Msb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":220454,"byte_end":220496,"line_start":813,"line_end":813,"column_start":2,"column_end":44}},{"value":"/ assert!(bits[.. 4].all());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":220498,"byte_end":220528,"line_start":814,"line_end":814,"column_start":2,"column_end":32}},{"value":"/ assert!(!bits[4 ..].all());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":220530,"byte_end":220561,"line_start":815,"line_end":815,"column_start":2,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":220563,"byte_end":220570,"line_start":816,"line_end":816,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":220572,"byte_end":220581,"line_start":817,"line_end":817,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1173},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":222214,"byte_end":222217,"line_start":878,"line_end":878,"column_start":9,"column_end":12},"name":"any","qualname":"<BitSlice<O, T>>::any","value":"pub fn any(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if *any* bit in the slice is set (logical `∨`).","sig":null,"attributes":[{"value":"/ Tests if *any* bit in the slice is set (logical `∨`).","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":221682,"byte_end":221741,"line_start":848,"line_end":848,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":221743,"byte_end":221746,"line_start":849,"line_end":849,"column_start":2,"column_end":5}},{"value":"/ # Truth Table","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":221748,"byte_end":221765,"line_start":850,"line_end":850,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":221767,"byte_end":221770,"line_start":851,"line_end":851,"column_start":2,"column_end":5}},{"value":"/ ```text","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":221772,"byte_end":221783,"line_start":852,"line_end":852,"column_start":2,"column_end":13}},{"value":"/ 0 0 => 0","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":221785,"byte_end":221797,"line_start":853,"line_end":853,"column_start":2,"column_end":14}},{"value":"/ 0 1 => 1","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":221799,"byte_end":221811,"line_start":854,"line_end":854,"column_start":2,"column_end":14}},{"value":"/ 1 0 => 1","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":221813,"byte_end":221825,"line_start":855,"line_end":855,"column_start":2,"column_end":14}},{"value":"/ 1 1 => 1","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":221827,"byte_end":221839,"line_start":856,"line_end":856,"column_start":2,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":221841,"byte_end":221848,"line_start":857,"line_end":857,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":221850,"byte_end":221853,"line_start":858,"line_end":858,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":221855,"byte_end":221871,"line_start":859,"line_end":859,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":221873,"byte_end":221876,"line_start":860,"line_end":860,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":221878,"byte_end":221891,"line_start":861,"line_end":861,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":221893,"byte_end":221896,"line_start":862,"line_end":862,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":221898,"byte_end":221911,"line_start":863,"line_end":863,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":221913,"byte_end":221916,"line_start":864,"line_end":864,"column_start":2,"column_end":5}},{"value":"/ Whether any bit in the slice domain is set. The empty slice returns","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":221918,"byte_end":221989,"line_start":865,"line_end":865,"column_start":2,"column_end":73}},{"value":"/ `false`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":221991,"byte_end":222003,"line_start":866,"line_end":866,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":222005,"byte_end":222008,"line_start":867,"line_end":867,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":222010,"byte_end":222024,"line_start":868,"line_end":868,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":222026,"byte_end":222029,"line_start":869,"line_end":869,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":222031,"byte_end":222042,"line_start":870,"line_end":870,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":222044,"byte_end":222071,"line_start":871,"line_end":871,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":222073,"byte_end":222076,"line_start":872,"line_end":872,"column_start":2,"column_end":5}},{"value":"/ let bits = 0x40u8.view_bits::<Msb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":222078,"byte_end":222120,"line_start":873,"line_end":873,"column_start":2,"column_end":44}},{"value":"/ assert!(bits[.. 4].any());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":222122,"byte_end":222152,"line_start":874,"line_end":874,"column_start":2,"column_end":32}},{"value":"/ assert!(!bits[4 ..].any());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":222154,"byte_end":222185,"line_start":875,"line_end":875,"column_start":2,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":222187,"byte_end":222194,"line_start":876,"line_end":876,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":222196,"byte_end":222205,"line_start":877,"line_end":877,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1177},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":223281,"byte_end":223288,"line_start":926,"line_end":926,"column_start":9,"column_end":16},"name":"not_all","qualname":"<BitSlice<O, T>>::not_all","value":"pub fn not_all(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if *any* bit in the slice is unset (logical `¬∧`).","sig":null,"attributes":[{"value":"/ Tests if *any* bit in the slice is unset (logical `¬∧`).","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":222774,"byte_end":222837,"line_start":897,"line_end":897,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":222839,"byte_end":222842,"line_start":898,"line_end":898,"column_start":2,"column_end":5}},{"value":"/ # Truth Table","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":222844,"byte_end":222861,"line_start":899,"line_end":899,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":222863,"byte_end":222866,"line_start":900,"line_end":900,"column_start":2,"column_end":5}},{"value":"/ ```text","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":222868,"byte_end":222879,"line_start":901,"line_end":901,"column_start":2,"column_end":13}},{"value":"/ 0 0 => 1","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":222881,"byte_end":222893,"line_start":902,"line_end":902,"column_start":2,"column_end":14}},{"value":"/ 0 1 => 1","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":222895,"byte_end":222907,"line_start":903,"line_end":903,"column_start":2,"column_end":14}},{"value":"/ 1 0 => 1","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":222909,"byte_end":222921,"line_start":904,"line_end":904,"column_start":2,"column_end":14}},{"value":"/ 1 1 => 0","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":222923,"byte_end":222935,"line_start":905,"line_end":905,"column_start":2,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":222937,"byte_end":222944,"line_start":906,"line_end":906,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":222946,"byte_end":222949,"line_start":907,"line_end":907,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":222951,"byte_end":222967,"line_start":908,"line_end":908,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":222969,"byte_end":222972,"line_start":909,"line_end":909,"column_start":2,"column_end":5}},{"value":"/ - `&self","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":222974,"byte_end":222986,"line_start":910,"line_end":910,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":222988,"byte_end":222991,"line_start":911,"line_end":911,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":222993,"byte_end":223006,"line_start":912,"line_end":912,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":223008,"byte_end":223011,"line_start":913,"line_end":913,"column_start":2,"column_end":5}},{"value":"/ Whether any bit in the slice domain is unset.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":223013,"byte_end":223062,"line_start":914,"line_end":914,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":223064,"byte_end":223067,"line_start":915,"line_end":915,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":223069,"byte_end":223083,"line_start":916,"line_end":916,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":223085,"byte_end":223088,"line_start":917,"line_end":917,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":223090,"byte_end":223101,"line_start":918,"line_end":918,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":223103,"byte_end":223130,"line_start":919,"line_end":919,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":223132,"byte_end":223135,"line_start":920,"line_end":920,"column_start":2,"column_end":5}},{"value":"/ let bits = 0xFDu8.view_bits::<Msb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":223137,"byte_end":223179,"line_start":921,"line_end":921,"column_start":2,"column_end":44}},{"value":"/ assert!(!bits[.. 4].not_all());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":223181,"byte_end":223216,"line_start":922,"line_end":922,"column_start":2,"column_end":37}},{"value":"/ assert!(bits[4 ..].not_all());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":223218,"byte_end":223252,"line_start":923,"line_end":923,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":223254,"byte_end":223261,"line_start":924,"line_end":924,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":223263,"byte_end":223272,"line_start":925,"line_end":925,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1178},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":223837,"byte_end":223844,"line_start":959,"line_end":959,"column_start":9,"column_end":16},"name":"not_any","qualname":"<BitSlice<O, T>>::not_any","value":"pub fn not_any(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if *all* bits in the slice are unset (logical `¬∨`).","sig":null,"attributes":[{"value":"/ Tests if *all* bits in the slice are unset (logical `¬∨`).","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":223325,"byte_end":223390,"line_start":930,"line_end":930,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":223392,"byte_end":223395,"line_start":931,"line_end":931,"column_start":2,"column_end":5}},{"value":"/ # Truth Table","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":223397,"byte_end":223414,"line_start":932,"line_end":932,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":223416,"byte_end":223419,"line_start":933,"line_end":933,"column_start":2,"column_end":5}},{"value":"/ ```text","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":223421,"byte_end":223432,"line_start":934,"line_end":934,"column_start":2,"column_end":13}},{"value":"/ 0 0 => 1","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":223434,"byte_end":223446,"line_start":935,"line_end":935,"column_start":2,"column_end":14}},{"value":"/ 0 1 => 0","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":223448,"byte_end":223460,"line_start":936,"line_end":936,"column_start":2,"column_end":14}},{"value":"/ 1 0 => 0","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":223462,"byte_end":223474,"line_start":937,"line_end":937,"column_start":2,"column_end":14}},{"value":"/ 1 1 => 0","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":223476,"byte_end":223488,"line_start":938,"line_end":938,"column_start":2,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":223490,"byte_end":223497,"line_start":939,"line_end":939,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":223499,"byte_end":223502,"line_start":940,"line_end":940,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":223504,"byte_end":223520,"line_start":941,"line_end":941,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":223522,"byte_end":223525,"line_start":942,"line_end":942,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":223527,"byte_end":223540,"line_start":943,"line_end":943,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":223542,"byte_end":223545,"line_start":944,"line_end":944,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":223547,"byte_end":223560,"line_start":945,"line_end":945,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":223562,"byte_end":223565,"line_start":946,"line_end":946,"column_start":2,"column_end":5}},{"value":"/ Whether all bits in the slice domain are unset.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":223567,"byte_end":223618,"line_start":947,"line_end":947,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":223620,"byte_end":223623,"line_start":948,"line_end":948,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":223625,"byte_end":223639,"line_start":949,"line_end":949,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":223641,"byte_end":223644,"line_start":950,"line_end":950,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":223646,"byte_end":223657,"line_start":951,"line_end":951,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":223659,"byte_end":223686,"line_start":952,"line_end":952,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":223688,"byte_end":223691,"line_start":953,"line_end":953,"column_start":2,"column_end":5}},{"value":"/ let bits = 0x40u8.view_bits::<Msb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":223693,"byte_end":223735,"line_start":954,"line_end":954,"column_start":2,"column_end":44}},{"value":"/ assert!(!bits[.. 4].not_any());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":223737,"byte_end":223772,"line_start":955,"line_end":955,"column_start":2,"column_end":37}},{"value":"/ assert!(bits[4 ..].not_any());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":223774,"byte_end":223808,"line_start":956,"line_end":956,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":223810,"byte_end":223817,"line_start":957,"line_end":957,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":223819,"byte_end":223828,"line_start":958,"line_end":958,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1179},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224660,"byte_end":224664,"line_start":1002,"line_end":1002,"column_start":9,"column_end":13},"name":"some","qualname":"<BitSlice<O, T>>::some","value":"pub fn some(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether the slice has some, but not all, bits set and some, but\n not all, bits unset.","sig":null,"attributes":[{"value":"/ Tests whether the slice has some, but not all, bits set and some, but","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":223881,"byte_end":223954,"line_start":963,"line_end":963,"column_start":2,"column_end":75}},{"value":"/ not all, bits unset.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":223956,"byte_end":223980,"line_start":964,"line_end":964,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":223982,"byte_end":223985,"line_start":965,"line_end":965,"column_start":2,"column_end":5}},{"value":"/ This is `false` if either [`.all`] or [`.not_any`] are `true`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":223987,"byte_end":224053,"line_start":966,"line_end":966,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224055,"byte_end":224058,"line_start":967,"line_end":967,"column_start":2,"column_end":5}},{"value":"/ # Truth Table","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224060,"byte_end":224077,"line_start":968,"line_end":968,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224079,"byte_end":224082,"line_start":969,"line_end":969,"column_start":2,"column_end":5}},{"value":"/ ```text","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224084,"byte_end":224095,"line_start":970,"line_end":970,"column_start":2,"column_end":13}},{"value":"/ 0 0 => 0","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224097,"byte_end":224109,"line_start":971,"line_end":971,"column_start":2,"column_end":14}},{"value":"/ 0 1 => 1","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224111,"byte_end":224123,"line_start":972,"line_end":972,"column_start":2,"column_end":14}},{"value":"/ 1 0 => 1","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224125,"byte_end":224137,"line_start":973,"line_end":973,"column_start":2,"column_end":14}},{"value":"/ 1 1 => 0","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224139,"byte_end":224151,"line_start":974,"line_end":974,"column_start":2,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224153,"byte_end":224160,"line_start":975,"line_end":975,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224162,"byte_end":224165,"line_start":976,"line_end":976,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224167,"byte_end":224183,"line_start":977,"line_end":977,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224185,"byte_end":224188,"line_start":978,"line_end":978,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224190,"byte_end":224203,"line_start":979,"line_end":979,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224205,"byte_end":224208,"line_start":980,"line_end":980,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224210,"byte_end":224223,"line_start":981,"line_end":981,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224225,"byte_end":224228,"line_start":982,"line_end":982,"column_start":2,"column_end":5}},{"value":"/ Whether the slice domain has mixed content. The empty slice returns","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224230,"byte_end":224301,"line_start":983,"line_end":983,"column_start":2,"column_end":73}},{"value":"/ `false`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224303,"byte_end":224315,"line_start":984,"line_end":984,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224317,"byte_end":224320,"line_start":985,"line_end":985,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224322,"byte_end":224336,"line_start":986,"line_end":986,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224338,"byte_end":224341,"line_start":987,"line_end":987,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224343,"byte_end":224354,"line_start":988,"line_end":988,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224356,"byte_end":224383,"line_start":989,"line_end":989,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224385,"byte_end":224388,"line_start":990,"line_end":990,"column_start":2,"column_end":5}},{"value":"/ let data = 0b111_000_10u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224390,"byte_end":224420,"line_start":991,"line_end":991,"column_start":2,"column_end":32}},{"value":"/ let bits = data.view_bits::<Msb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224422,"byte_end":224462,"line_start":992,"line_end":992,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224464,"byte_end":224467,"line_start":993,"line_end":993,"column_start":2,"column_end":5}},{"value":"/ assert!(!bits[.. 3].some());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224469,"byte_end":224501,"line_start":994,"line_end":994,"column_start":2,"column_end":34}},{"value":"/ assert!(!bits[3 .. 6].some());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224503,"byte_end":224537,"line_start":995,"line_end":995,"column_start":2,"column_end":36}},{"value":"/ assert!(bits.some());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224539,"byte_end":224564,"line_start":996,"line_end":996,"column_start":2,"column_end":27}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224566,"byte_end":224573,"line_start":997,"line_end":997,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224575,"byte_end":224578,"line_start":998,"line_end":998,"column_start":2,"column_end":5}},{"value":"/ [`.all`]: #method.all","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224580,"byte_end":224605,"line_start":999,"line_end":999,"column_start":2,"column_end":27}},{"value":"/ [`.not_any`]: #method.not_any","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224607,"byte_end":224640,"line_start":1000,"line_end":1000,"column_start":2,"column_end":35}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224642,"byte_end":224651,"line_start":1001,"line_end":1001,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1180},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":225189,"byte_end":225199,"line_start":1030,"line_end":1030,"column_start":9,"column_end":19},"name":"count_ones","qualname":"<BitSlice<O, T>>::count_ones","value":"pub fn count_ones(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of ones in the memory region backing `self`.","sig":null,"attributes":[{"value":"/ Returns the number of ones in the memory region backing `self`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224718,"byte_end":224785,"line_start":1006,"line_end":1006,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224787,"byte_end":224790,"line_start":1007,"line_end":1007,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224792,"byte_end":224808,"line_start":1008,"line_end":1008,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224810,"byte_end":224813,"line_start":1009,"line_end":1009,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224815,"byte_end":224828,"line_start":1010,"line_end":1010,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224830,"byte_end":224833,"line_start":1011,"line_end":1011,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224835,"byte_end":224848,"line_start":1012,"line_end":1012,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224850,"byte_end":224853,"line_start":1013,"line_end":1013,"column_start":2,"column_end":5}},{"value":"/ The number of high bits in the slice domain.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224855,"byte_end":224903,"line_start":1014,"line_end":1014,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224905,"byte_end":224908,"line_start":1015,"line_end":1015,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224910,"byte_end":224924,"line_start":1016,"line_end":1016,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224926,"byte_end":224929,"line_start":1017,"line_end":1017,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224931,"byte_end":224947,"line_start":1018,"line_end":1018,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224949,"byte_end":224952,"line_start":1019,"line_end":1019,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224954,"byte_end":224965,"line_start":1020,"line_end":1020,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224967,"byte_end":224994,"line_start":1021,"line_end":1021,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":224996,"byte_end":224999,"line_start":1022,"line_end":1022,"column_start":2,"column_end":5}},{"value":"/ let data = 0xF0u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":225001,"byte_end":225023,"line_start":1023,"line_end":1023,"column_start":2,"column_end":24}},{"value":"/ let bits = data.view_bits::<Msb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":225025,"byte_end":225065,"line_start":1024,"line_end":1024,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":225067,"byte_end":225070,"line_start":1025,"line_end":1025,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bits[.. 4].count_ones(), 4);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":225072,"byte_end":225115,"line_start":1026,"line_end":1026,"column_start":2,"column_end":45}},{"value":"/ assert_eq!(bits[4 ..].count_ones(), 0);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":225117,"byte_end":225160,"line_start":1027,"line_end":1027,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":225162,"byte_end":225169,"line_start":1028,"line_end":1028,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":225171,"byte_end":225180,"line_start":1029,"line_end":1029,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1184},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":226314,"byte_end":226325,"line_start":1078,"line_end":1078,"column_start":9,"column_end":20},"name":"count_zeros","qualname":"<BitSlice<O, T>>::count_zeros","value":"pub fn count_zeros(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of zeros in the memory region backing `self`.","sig":null,"attributes":[{"value":"/ Returns the number of zeros in the memory region backing `self`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":225841,"byte_end":225909,"line_start":1054,"line_end":1054,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":225911,"byte_end":225914,"line_start":1055,"line_end":1055,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":225916,"byte_end":225932,"line_start":1056,"line_end":1056,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":225934,"byte_end":225937,"line_start":1057,"line_end":1057,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":225939,"byte_end":225952,"line_start":1058,"line_end":1058,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":225954,"byte_end":225957,"line_start":1059,"line_end":1059,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":225959,"byte_end":225972,"line_start":1060,"line_end":1060,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":225974,"byte_end":225977,"line_start":1061,"line_end":1061,"column_start":2,"column_end":5}},{"value":"/ The number of low bits in the slice domain.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":225979,"byte_end":226026,"line_start":1062,"line_end":1062,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":226028,"byte_end":226031,"line_start":1063,"line_end":1063,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":226033,"byte_end":226047,"line_start":1064,"line_end":1064,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":226049,"byte_end":226052,"line_start":1065,"line_end":1065,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":226054,"byte_end":226070,"line_start":1066,"line_end":1066,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":226072,"byte_end":226075,"line_start":1067,"line_end":1067,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":226077,"byte_end":226088,"line_start":1068,"line_end":1068,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":226090,"byte_end":226117,"line_start":1069,"line_end":1069,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":226119,"byte_end":226122,"line_start":1070,"line_end":1070,"column_start":2,"column_end":5}},{"value":"/ let data = 0xF0u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":226124,"byte_end":226146,"line_start":1071,"line_end":1071,"column_start":2,"column_end":24}},{"value":"/ let bits = data.view_bits::<Msb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":226148,"byte_end":226188,"line_start":1072,"line_end":1072,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":226190,"byte_end":226193,"line_start":1073,"line_end":1073,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bits[.. 4].count_zeros(), 0);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":226195,"byte_end":226239,"line_start":1074,"line_end":1074,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(bits[4 ..].count_zeros(), 4);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":226241,"byte_end":226285,"line_start":1075,"line_end":1075,"column_start":2,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":226287,"byte_end":226294,"line_start":1076,"line_end":1076,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":226296,"byte_end":226305,"line_start":1077,"line_end":1077,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1188},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":227574,"byte_end":227581,"line_start":1126,"line_end":1126,"column_start":9,"column_end":16},"name":"set_all","qualname":"<BitSlice<O, T>>::set_all","value":"pub fn set_all(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Sets all bits in the slice to a value.","sig":null,"attributes":[{"value":"/ Sets all bits in the slice to a value.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":226992,"byte_end":227034,"line_start":1104,"line_end":1104,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":227036,"byte_end":227039,"line_start":1105,"line_end":1105,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":227041,"byte_end":227057,"line_start":1106,"line_end":1106,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":227059,"byte_end":227062,"line_start":1107,"line_end":1107,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":227064,"byte_end":227081,"line_start":1108,"line_end":1108,"column_start":2,"column_end":19}},{"value":"/ - `value`: The bit value to which all bits in the slice will be set.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":227083,"byte_end":227155,"line_start":1109,"line_end":1109,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":227157,"byte_end":227160,"line_start":1110,"line_end":1110,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":227162,"byte_end":227176,"line_start":1111,"line_end":1111,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":227178,"byte_end":227181,"line_start":1112,"line_end":1112,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":227183,"byte_end":227194,"line_start":1113,"line_end":1113,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":227196,"byte_end":227223,"line_start":1114,"line_end":1114,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":227225,"byte_end":227228,"line_start":1115,"line_end":1115,"column_start":2,"column_end":5}},{"value":"/ let mut src = 0u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":227230,"byte_end":227252,"line_start":1116,"line_end":1116,"column_start":2,"column_end":24}},{"value":"/ let bits = src.view_bits_mut::<Msb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":227254,"byte_end":227297,"line_start":1117,"line_end":1117,"column_start":2,"column_end":45}},{"value":"/ bits[2 .. 6].set_all(true);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":227299,"byte_end":227330,"line_start":1118,"line_end":1118,"column_start":2,"column_end":33}},{"value":"/ assert_eq!(bits.as_slice(), &[0b0011_1100]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":227332,"byte_end":227380,"line_start":1119,"line_end":1119,"column_start":2,"column_end":50}},{"value":"/ bits[3 .. 5].set_all(false);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":227382,"byte_end":227414,"line_start":1120,"line_end":1120,"column_start":2,"column_end":34}},{"value":"/ assert_eq!(bits.as_slice(), &[0b0010_0100]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":227416,"byte_end":227464,"line_start":1121,"line_end":1121,"column_start":2,"column_end":50}},{"value":"/ bits[.. 1].set_all(true);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":227466,"byte_end":227495,"line_start":1122,"line_end":1122,"column_start":2,"column_end":31}},{"value":"/ assert_eq!(bits.as_slice(), &[0b1010_0100]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":227497,"byte_end":227545,"line_start":1123,"line_end":1123,"column_start":2,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":227547,"byte_end":227554,"line_start":1124,"line_end":1124,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":227556,"byte_end":227565,"line_start":1125,"line_end":1125,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1189},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":229658,"byte_end":229666,"line_start":1195,"line_end":1195,"column_start":9,"column_end":17},"name":"for_each","qualname":"<BitSlice<O, T>>::for_each","value":"pub fn for_each<F>(&mut Self, F) where F: FnMut(usize, bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Applies a function to each bit in the slice.","sig":null,"attributes":[{"value":"/ Applies a function to each bit in the slice.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":228698,"byte_end":228746,"line_start":1165,"line_end":1165,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":228748,"byte_end":228751,"line_start":1166,"line_end":1166,"column_start":2,"column_end":5}},{"value":"/ `BitSlice` cannot implement `IndexMut`, as it cannot manifest `&mut","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":228753,"byte_end":228824,"line_start":1167,"line_end":1167,"column_start":2,"column_end":73}},{"value":"/ bool` references, and the [`BitMut`] proxy reference has an unavoidable","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":228826,"byte_end":228901,"line_start":1168,"line_end":1168,"column_start":2,"column_end":77}},{"value":"/ overhead. This method bypasses both problems, by applying a function to","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":228903,"byte_end":228978,"line_start":1169,"line_end":1169,"column_start":2,"column_end":77}},{"value":"/ each pair of index and value in the slice, without constructing a proxy","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":228980,"byte_end":229055,"line_start":1170,"line_end":1170,"column_start":2,"column_end":77}},{"value":"/ reference.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":229057,"byte_end":229071,"line_start":1171,"line_end":1171,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":229073,"byte_end":229076,"line_start":1172,"line_end":1172,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":229078,"byte_end":229094,"line_start":1173,"line_end":1173,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":229096,"byte_end":229099,"line_start":1174,"line_end":1174,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":229101,"byte_end":229118,"line_start":1175,"line_end":1175,"column_start":2,"column_end":19}},{"value":"/ - `func`: A function which receives two arguments, `index: usize` and","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":229120,"byte_end":229193,"line_start":1176,"line_end":1176,"column_start":2,"column_end":75}},{"value":"/   `value: bool`, and returns a `bool`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":229195,"byte_end":229237,"line_start":1177,"line_end":1177,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":229239,"byte_end":229242,"line_start":1178,"line_end":1178,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":229244,"byte_end":229257,"line_start":1179,"line_end":1179,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":229259,"byte_end":229262,"line_start":1180,"line_end":1180,"column_start":2,"column_end":5}},{"value":"/ For each index in the slice, the result of invoking `func` with the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":229264,"byte_end":229335,"line_start":1181,"line_end":1181,"column_start":2,"column_end":73}},{"value":"/ index number and current bit value is written into the slice.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":229337,"byte_end":229402,"line_start":1182,"line_end":1182,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":229404,"byte_end":229407,"line_start":1183,"line_end":1183,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":229409,"byte_end":229423,"line_start":1184,"line_end":1184,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":229425,"byte_end":229428,"line_start":1185,"line_end":1185,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":229430,"byte_end":229441,"line_start":1186,"line_end":1186,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":229443,"byte_end":229470,"line_start":1187,"line_end":1187,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":229472,"byte_end":229475,"line_start":1188,"line_end":1188,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":229477,"byte_end":229500,"line_start":1189,"line_end":1189,"column_start":2,"column_end":25}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":229502,"byte_end":229546,"line_start":1190,"line_end":1190,"column_start":2,"column_end":46}},{"value":"/ bits.for_each(|idx, _bit| idx % 3 == 0);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":229548,"byte_end":229592,"line_start":1191,"line_end":1191,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(data, 0b100_100_10);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":229594,"byte_end":229629,"line_start":1192,"line_end":1192,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":229631,"byte_end":229638,"line_start":1193,"line_end":1193,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":229640,"byte_end":229649,"line_start":1194,"line_end":1194,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1191},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":230512,"byte_end":230520,"line_start":1225,"line_end":1225,"column_start":9,"column_end":17},"name":"as_slice","qualname":"<BitSlice<O, T>>::as_slice","value":"pub fn as_slice(&Self) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" Accesses the total backing storage of the `BitSlice`, as a slice of its\n elements.","sig":null,"attributes":[{"value":"/ Accesses the total backing storage of the `BitSlice`, as a slice of its","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":229894,"byte_end":229969,"line_start":1206,"line_end":1206,"column_start":2,"column_end":77}},{"value":"/ elements.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":229971,"byte_end":229984,"line_start":1207,"line_end":1207,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":229986,"byte_end":229989,"line_start":1208,"line_end":1208,"column_start":2,"column_end":5}},{"value":"/ This method produces a slice over all the memory elements it touches,","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":229991,"byte_end":230064,"line_start":1209,"line_end":1209,"column_start":2,"column_end":75}},{"value":"/ using the current storage parameter. This is safe to do, as any events","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":230066,"byte_end":230140,"line_start":1210,"line_end":1210,"column_start":2,"column_end":76}},{"value":"/ that would create an aliasing view into the elements covered by the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":230142,"byte_end":230213,"line_start":1211,"line_end":1211,"column_start":2,"column_end":73}},{"value":"/ returned slice will also have caused the slice to use its alias-aware","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":230215,"byte_end":230288,"line_start":1212,"line_end":1212,"column_start":2,"column_end":75}},{"value":"/ type.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":230290,"byte_end":230299,"line_start":1213,"line_end":1213,"column_start":2,"column_end":11}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":230301,"byte_end":230304,"line_start":1214,"line_end":1214,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":230306,"byte_end":230322,"line_start":1215,"line_end":1215,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":230324,"byte_end":230327,"line_start":1216,"line_end":1216,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":230329,"byte_end":230342,"line_start":1217,"line_end":1217,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":230344,"byte_end":230347,"line_start":1218,"line_end":1218,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":230349,"byte_end":230362,"line_start":1219,"line_end":1219,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":230364,"byte_end":230367,"line_start":1220,"line_end":1220,"column_start":2,"column_end":5}},{"value":"/ A view of the entire memory region this slice covers, including the edge","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":230369,"byte_end":230445,"line_start":1221,"line_end":1221,"column_start":2,"column_end":78}},{"value":"/ elements.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":230447,"byte_end":230460,"line_start":1222,"line_end":1222,"column_start":2,"column_end":15}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":230462,"byte_end":230471,"line_start":1223,"line_end":1223,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":230473,"byte_end":230503,"line_start":1224,"line_end":1224,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1192},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":231828,"byte_end":231840,"line_start":1273,"line_end":1273,"column_start":9,"column_end":21},"name":"as_raw_slice","qualname":"<BitSlice<O, T>>::as_raw_slice","value":"pub fn as_raw_slice(&Self) -> &[T::Mem]","parent":null,"children":[],"decl_id":null,"docs":" Views the wholly-filled elements of the `BitSlice`.","sig":null,"attributes":[{"value":"/ Views the wholly-filled elements of the `BitSlice`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":230691,"byte_end":230746,"line_start":1231,"line_end":1231,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":230748,"byte_end":230751,"line_start":1232,"line_end":1232,"column_start":2,"column_end":5}},{"value":"/ This will not include partially-owned edge elements, as they may be","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":230753,"byte_end":230824,"line_start":1233,"line_end":1233,"column_start":2,"column_end":73}},{"value":"/ aliased by other handles. To gain access to all elements that the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":230826,"byte_end":230895,"line_start":1234,"line_end":1234,"column_start":2,"column_end":71}},{"value":"/ `BitSlice` region covers, use one of the following:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":230897,"byte_end":230952,"line_start":1235,"line_end":1235,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":230954,"byte_end":230957,"line_start":1236,"line_end":1236,"column_start":2,"column_end":5}},{"value":"/ - [`.as_slice`] produces a shared slice over all elements, marked","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":230959,"byte_end":231028,"line_start":1237,"line_end":1237,"column_start":2,"column_end":71}},{"value":"/   aliased as appropriate.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":231030,"byte_end":231059,"line_start":1238,"line_end":1238,"column_start":2,"column_end":31}},{"value":"/ - [`.domain`] produces a view describing each component of the region,","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":231061,"byte_end":231135,"line_start":1239,"line_end":1239,"column_start":2,"column_end":76}},{"value":"/   marking only the contended edges as aliased and the uncontended","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":231137,"byte_end":231206,"line_start":1240,"line_end":1240,"column_start":2,"column_end":71}},{"value":"/   interior as unaliased.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":231208,"byte_end":231236,"line_start":1241,"line_end":1241,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":231238,"byte_end":231241,"line_start":1242,"line_end":1242,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":231243,"byte_end":231259,"line_start":1243,"line_end":1243,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":231261,"byte_end":231264,"line_start":1244,"line_end":1244,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":231266,"byte_end":231279,"line_start":1245,"line_end":1245,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":231281,"byte_end":231284,"line_start":1246,"line_end":1246,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":231286,"byte_end":231299,"line_start":1247,"line_end":1247,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":231301,"byte_end":231304,"line_start":1248,"line_end":1248,"column_start":2,"column_end":5}},{"value":"/ A slice of all the wholly-filled elements in the `BitSlice` backing","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":231306,"byte_end":231377,"line_start":1249,"line_end":1249,"column_start":2,"column_end":73}},{"value":"/ storage.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":231379,"byte_end":231391,"line_start":1250,"line_end":1250,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":231393,"byte_end":231396,"line_start":1251,"line_end":1251,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":231398,"byte_end":231412,"line_start":1252,"line_end":1252,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":231414,"byte_end":231417,"line_start":1253,"line_end":1253,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":231419,"byte_end":231430,"line_start":1254,"line_end":1254,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":231432,"byte_end":231459,"line_start":1255,"line_end":1255,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":231461,"byte_end":231464,"line_start":1256,"line_end":1256,"column_start":2,"column_end":5}},{"value":"/ let data = [1u8, 66];","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":231466,"byte_end":231491,"line_start":1257,"line_end":1257,"column_start":2,"column_end":27}},{"value":"/ let bits = data.view_bits::<Msb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":231493,"byte_end":231533,"line_start":1258,"line_end":1258,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":231535,"byte_end":231538,"line_start":1259,"line_end":1259,"column_start":2,"column_end":5}},{"value":"/ let accum = bits","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":231540,"byte_end":231560,"line_start":1260,"line_end":1260,"column_start":2,"column_end":22}},{"value":"/   .as_raw_slice()","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":231562,"byte_end":231583,"line_start":1261,"line_end":1261,"column_start":2,"column_end":23}},{"value":"/   .iter()","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":231585,"byte_end":231598,"line_start":1262,"line_end":1262,"column_start":2,"column_end":15}},{"value":"/   .copied()","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":231600,"byte_end":231615,"line_start":1263,"line_end":1263,"column_start":2,"column_end":17}},{"value":"/   .map(u8::count_ones)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":231617,"byte_end":231643,"line_start":1264,"line_end":1264,"column_start":2,"column_end":28}},{"value":"/   .sum::<u32>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":231645,"byte_end":231665,"line_start":1265,"line_end":1265,"column_start":2,"column_end":22}},{"value":"/ assert_eq!(accum, 3);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":231667,"byte_end":231692,"line_start":1266,"line_end":1266,"column_start":2,"column_end":27}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":231694,"byte_end":231701,"line_start":1267,"line_end":1267,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":231703,"byte_end":231706,"line_start":1268,"line_end":1268,"column_start":2,"column_end":5}},{"value":"/ [`.as_slice`]: #method.as_slice","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":231708,"byte_end":231743,"line_start":1269,"line_end":1269,"column_start":2,"column_end":37}},{"value":"/ [`.domain`]: #method.domain","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":231745,"byte_end":231776,"line_start":1270,"line_end":1270,"column_start":2,"column_end":33}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":231778,"byte_end":231787,"line_start":1271,"line_end":1271,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":231789,"byte_end":231819,"line_start":1272,"line_end":1272,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1194},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":233094,"byte_end":233110,"line_start":1315,"line_end":1315,"column_start":9,"column_end":25},"name":"as_raw_slice_mut","qualname":"<BitSlice<O, T>>::as_raw_slice_mut","value":"pub fn as_raw_slice_mut(&mut Self) -> &mut [T::Mem]","parent":null,"children":[],"decl_id":null,"docs":" Views the wholly-filled elements of the `BitSlice`.","sig":null,"attributes":[{"value":"/ Views the wholly-filled elements of the `BitSlice`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":231920,"byte_end":231975,"line_start":1277,"line_end":1277,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":231977,"byte_end":231980,"line_start":1278,"line_end":1278,"column_start":2,"column_end":5}},{"value":"/ This will not include partially-owned edge elements, as they may be","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":231982,"byte_end":232053,"line_start":1279,"line_end":1279,"column_start":2,"column_end":73}},{"value":"/ aliased by other handles. To gain access to all elements that the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":232055,"byte_end":232124,"line_start":1280,"line_end":1280,"column_start":2,"column_end":71}},{"value":"/ `BitSlice` region covers, use one of the following:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":232126,"byte_end":232181,"line_start":1281,"line_end":1281,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":232183,"byte_end":232186,"line_start":1282,"line_end":1282,"column_start":2,"column_end":5}},{"value":"/ - [`.as_aliased_slice`] produces a shared slice over all elements,","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":232188,"byte_end":232258,"line_start":1283,"line_end":1283,"column_start":2,"column_end":72}},{"value":"/   marked as aliased to allow for the possibliity of mutation.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":232260,"byte_end":232325,"line_start":1284,"line_end":1284,"column_start":2,"column_end":67}},{"value":"/ - [`.domain_mut`] produces a view describing each component of the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":232327,"byte_end":232397,"line_start":1285,"line_end":1285,"column_start":2,"column_end":72}},{"value":"/   region, marking only the contended edges as aliased and the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":232399,"byte_end":232464,"line_start":1286,"line_end":1286,"column_start":2,"column_end":67}},{"value":"/   uncontended interior as unaliased.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":232466,"byte_end":232506,"line_start":1287,"line_end":1287,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":232508,"byte_end":232511,"line_start":1288,"line_end":1288,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":232513,"byte_end":232529,"line_start":1289,"line_end":1289,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":232531,"byte_end":232534,"line_start":1290,"line_end":1290,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":232536,"byte_end":232553,"line_start":1291,"line_end":1291,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":232555,"byte_end":232558,"line_start":1292,"line_end":1292,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":232560,"byte_end":232573,"line_start":1293,"line_end":1293,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":232575,"byte_end":232578,"line_start":1294,"line_end":1294,"column_start":2,"column_end":5}},{"value":"/ A mutable slice of all the wholly-filled elements in the `BitSlice`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":232580,"byte_end":232651,"line_start":1295,"line_end":1295,"column_start":2,"column_end":73}},{"value":"/ backing storage.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":232653,"byte_end":232673,"line_start":1296,"line_end":1296,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":232675,"byte_end":232678,"line_start":1297,"line_end":1297,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":232680,"byte_end":232694,"line_start":1298,"line_end":1298,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":232696,"byte_end":232699,"line_start":1299,"line_end":1299,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":232701,"byte_end":232712,"line_start":1300,"line_end":1300,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":232714,"byte_end":232741,"line_start":1301,"line_end":1301,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":232743,"byte_end":232746,"line_start":1302,"line_end":1302,"column_start":2,"column_end":5}},{"value":"/ let mut data = [1u8, 64];","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":232748,"byte_end":232777,"line_start":1303,"line_end":1303,"column_start":2,"column_end":31}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":232779,"byte_end":232823,"line_start":1304,"line_end":1304,"column_start":2,"column_end":46}},{"value":"/ for elt in bits.as_raw_slice_mut() {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":232825,"byte_end":232865,"line_start":1305,"line_end":1305,"column_start":2,"column_end":42}},{"value":"/   *elt |= 2;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":232867,"byte_end":232883,"line_start":1306,"line_end":1306,"column_start":2,"column_end":18}},{"value":"/ }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":232885,"byte_end":232890,"line_start":1307,"line_end":1307,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(&[3, 66], bits.as_slice());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":232892,"byte_end":232934,"line_start":1308,"line_end":1308,"column_start":2,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":232936,"byte_end":232943,"line_start":1309,"line_end":1309,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":232945,"byte_end":232948,"line_start":1310,"line_end":1310,"column_start":2,"column_end":5}},{"value":"/ [`.as_aliased_slice`]: #method.as_aliased_slice","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":232950,"byte_end":233001,"line_start":1311,"line_end":1311,"column_start":2,"column_end":53}},{"value":"/ [`.domain_mut`]: #method.domain_mut","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":233003,"byte_end":233042,"line_start":1312,"line_end":1312,"column_start":2,"column_end":41}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":233044,"byte_end":233053,"line_start":1313,"line_end":1313,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":233055,"byte_end":233085,"line_start":1314,"line_end":1314,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1196},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":236363,"byte_end":236373,"line_start":1403,"line_end":1403,"column_start":9,"column_end":19},"name":"bit_domain","qualname":"<BitSlice<O, T>>::bit_domain","value":"pub fn bit_domain(&Self) -> BitDomain<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Splits the slice into the logical components of its memory domain.","sig":null,"attributes":[{"value":"/ Splits the slice into the logical components of its memory domain.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":233206,"byte_end":233276,"line_start":1319,"line_end":1319,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":233278,"byte_end":233281,"line_start":1320,"line_end":1320,"column_start":2,"column_end":5}},{"value":"/ This produces a set of read-only subslices, marking as much as possible","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":233283,"byte_end":233358,"line_start":1321,"line_end":1321,"column_start":2,"column_end":77}},{"value":"/ as affirmatively lacking any write-capable view (`T::NoAlias`). The","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":233360,"byte_end":233431,"line_start":1322,"line_end":1322,"column_start":2,"column_end":73}},{"value":"/ unaliased view is able to safely perform unsynchronized reads from","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":233433,"byte_end":233503,"line_start":1323,"line_end":1323,"column_start":2,"column_end":72}},{"value":"/ memory without causing undefined behavior, as the type system is able to","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":233505,"byte_end":233581,"line_start":1324,"line_end":1324,"column_start":2,"column_end":78}},{"value":"/ statically prove that no other write-capable views exist.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":233583,"byte_end":233644,"line_start":1325,"line_end":1325,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":233646,"byte_end":233649,"line_start":1326,"line_end":1326,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":233651,"byte_end":233667,"line_start":1327,"line_end":1327,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":233669,"byte_end":233672,"line_start":1328,"line_end":1328,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":233674,"byte_end":233687,"line_start":1329,"line_end":1329,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":233689,"byte_end":233692,"line_start":1330,"line_end":1330,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":233694,"byte_end":233707,"line_start":1331,"line_end":1331,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":233709,"byte_end":233712,"line_start":1332,"line_end":1332,"column_start":2,"column_end":5}},{"value":"/ A `BitDomain` structure representing the logical components of the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":233714,"byte_end":233784,"line_start":1333,"line_end":1333,"column_start":2,"column_end":72}},{"value":"/ memory region.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":233786,"byte_end":233804,"line_start":1334,"line_end":1334,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":233806,"byte_end":233809,"line_start":1335,"line_end":1335,"column_start":2,"column_end":5}},{"value":"/ # Safety Exception","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":233811,"byte_end":233833,"line_start":1336,"line_end":1336,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":233835,"byte_end":233838,"line_start":1337,"line_end":1337,"column_start":2,"column_end":5}},{"value":"/ The following snippet describes a means of constructing a `T::NoAlias`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":233840,"byte_end":233914,"line_start":1338,"line_end":1338,"column_start":2,"column_end":76}},{"value":"/ view into memory that is, in fact, aliased:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":233916,"byte_end":233963,"line_start":1339,"line_end":1339,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":233965,"byte_end":233968,"line_start":1340,"line_end":1340,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":233970,"byte_end":233981,"line_start":1341,"line_end":1341,"column_start":2,"column_end":13}},{"value":"/ # #[cfg(feature = \"atomic\")] {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":233983,"byte_end":234017,"line_start":1342,"line_end":1342,"column_start":2,"column_end":36}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":234019,"byte_end":234046,"line_start":1343,"line_end":1343,"column_start":2,"column_end":29}},{"value":"/ use core::sync::atomic::AtomicU8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":234048,"byte_end":234085,"line_start":1344,"line_end":1344,"column_start":2,"column_end":39}},{"value":"/ type Bs<T> = BitSlice<LocalBits, T>;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":234087,"byte_end":234127,"line_start":1345,"line_end":1345,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":234129,"byte_end":234132,"line_start":1346,"line_end":1346,"column_start":2,"column_end":5}},{"value":"/ let data = [AtomicU8::new(0), AtomicU8::new(0), AtomicU8::new(0)];","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":234134,"byte_end":234204,"line_start":1347,"line_end":1347,"column_start":2,"column_end":72}},{"value":"/ let bits: &Bs<AtomicU8> = data.view_bits::<LocalBits>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":234206,"byte_end":234266,"line_start":1348,"line_end":1348,"column_start":2,"column_end":62}},{"value":"/ let subslice: &Bs<AtomicU8> = &bits[4 .. 20];","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":234268,"byte_end":234317,"line_start":1349,"line_end":1349,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":234319,"byte_end":234322,"line_start":1350,"line_end":1350,"column_start":2,"column_end":5}},{"value":"/ let (_, noalias, _): (_, &Bs<u8>, _) =","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":234324,"byte_end":234366,"line_start":1351,"line_end":1351,"column_start":2,"column_end":44}},{"value":"/   subslice.bit_domain().region().unwrap();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":234368,"byte_end":234414,"line_start":1352,"line_end":1352,"column_start":2,"column_end":48}},{"value":"/ # }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":234416,"byte_end":234423,"line_start":1353,"line_end":1353,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":234425,"byte_end":234432,"line_start":1354,"line_end":1354,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":234434,"byte_end":234437,"line_start":1355,"line_end":1355,"column_start":2,"column_end":5}},{"value":"/ The `noalias` reference, which has memory type `u8`, assumes that it can","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":234439,"byte_end":234515,"line_start":1356,"line_end":1356,"column_start":2,"column_end":78}},{"value":"/ act as an `&u8` reference: unsynchronized loads are permitted, as no","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":234517,"byte_end":234589,"line_start":1357,"line_end":1357,"column_start":2,"column_end":74}},{"value":"/ handle exists which is capable of modifying the middle bit of `data`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":234591,"byte_end":234664,"line_start":1358,"line_end":1358,"column_start":2,"column_end":75}},{"value":"/ This means that LLVM is permitted to issue loads from memory *wherever*","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":234666,"byte_end":234741,"line_start":1359,"line_end":1359,"column_start":2,"column_end":77}},{"value":"/ it wants in the block during which `noalias` is live, as all loads are","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":234743,"byte_end":234817,"line_start":1360,"line_end":1360,"column_start":2,"column_end":76}},{"value":"/ equivalent.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":234819,"byte_end":234834,"line_start":1361,"line_end":1361,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":234836,"byte_end":234839,"line_start":1362,"line_end":1362,"column_start":2,"column_end":5}},{"value":"/ Use of the `bits` or `subslice` handles, which are still live for the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":234841,"byte_end":234914,"line_start":1363,"line_end":1363,"column_start":2,"column_end":75}},{"value":"/ lifetime of `noalias`, to issue [`.set_aliased`] calls into the middle","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":234916,"byte_end":234990,"line_start":1364,"line_end":1364,"column_start":2,"column_end":76}},{"value":"/ element introduce **undefined behavior**. `bitvec` permits safe code to","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":234992,"byte_end":235067,"line_start":1365,"line_end":1365,"column_start":2,"column_end":77}},{"value":"/ introduce this undefined behavior solely because it requires deliberate","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":235069,"byte_end":235144,"line_start":1366,"line_end":1366,"column_start":2,"column_end":77}},{"value":"/ opt-in – you must start from atomic data; this cannot occur when `data`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":235146,"byte_end":235223,"line_start":1367,"line_end":1367,"column_start":2,"column_end":77}},{"value":"/ is non-atomic – and use of the shared-mutation facility simultaneously","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":235225,"byte_end":235301,"line_start":1368,"line_end":1368,"column_start":2,"column_end":76}},{"value":"/ with the unaliasing view.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":235303,"byte_end":235332,"line_start":1369,"line_end":1369,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":235334,"byte_end":235337,"line_start":1370,"line_end":1370,"column_start":2,"column_end":5}},{"value":"/ The [`.set_aliased`] method is speculative, and will be marked as","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":235339,"byte_end":235408,"line_start":1371,"line_end":1371,"column_start":2,"column_end":71}},{"value":"/ `unsafe` or removed at any suspicion that its presence in the library","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":235410,"byte_end":235483,"line_start":1372,"line_end":1372,"column_start":2,"column_end":75}},{"value":"/ has any costs.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":235485,"byte_end":235503,"line_start":1373,"line_end":1373,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":235505,"byte_end":235508,"line_start":1374,"line_end":1374,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":235510,"byte_end":235524,"line_start":1375,"line_end":1375,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":235526,"byte_end":235529,"line_start":1376,"line_end":1376,"column_start":2,"column_end":5}},{"value":"/ This method can be used to accelerate reads from a slice that is marked","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":235531,"byte_end":235606,"line_start":1377,"line_end":1377,"column_start":2,"column_end":77}},{"value":"/ as aliased.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":235608,"byte_end":235623,"line_start":1378,"line_end":1378,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":235625,"byte_end":235628,"line_start":1379,"line_end":1379,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":235630,"byte_end":235641,"line_start":1380,"line_end":1380,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":235643,"byte_end":235670,"line_start":1381,"line_end":1381,"column_start":2,"column_end":29}},{"value":"/ type Bs<T> = BitSlice<LocalBits, T>;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":235672,"byte_end":235712,"line_start":1382,"line_end":1382,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":235714,"byte_end":235717,"line_start":1383,"line_end":1383,"column_start":2,"column_end":5}},{"value":"/ let mut data = [0u8; 3];","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":235719,"byte_end":235747,"line_start":1384,"line_end":1384,"column_start":2,"column_end":30}},{"value":"/ let bits = data.view_bits_mut::<LocalBits>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":235749,"byte_end":235798,"line_start":1385,"line_end":1385,"column_start":2,"column_end":51}},{"value":"/ let (a, b): (","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":235800,"byte_end":235817,"line_start":1386,"line_end":1386,"column_start":2,"column_end":19}},{"value":"/   &mut Bs<<u8 as BitStore>::Alias>,","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":235819,"byte_end":235858,"line_start":1387,"line_end":1387,"column_start":2,"column_end":41}},{"value":"/   &mut Bs<<u8 as BitStore>::Alias>,","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":235860,"byte_end":235899,"line_start":1388,"line_end":1388,"column_start":2,"column_end":41}},{"value":"/ ) = bits.split_at_mut(4);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":235901,"byte_end":235930,"line_start":1389,"line_end":1389,"column_start":2,"column_end":31}},{"value":"/ let (partial, full, _): (","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":235932,"byte_end":235961,"line_start":1390,"line_end":1390,"column_start":2,"column_end":31}},{"value":"/   &Bs<<u8 as BitStore>::Alias>,","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":235963,"byte_end":235998,"line_start":1391,"line_end":1391,"column_start":2,"column_end":37}},{"value":"/   &Bs<<u8 as BitStore>::Mem>,","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":236000,"byte_end":236033,"line_start":1392,"line_end":1392,"column_start":2,"column_end":35}},{"value":"/   _,","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":236035,"byte_end":236043,"line_start":1393,"line_end":1393,"column_start":2,"column_end":10}},{"value":"/ ) = b.bit_domain().region().unwrap();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":236045,"byte_end":236086,"line_start":1394,"line_end":1394,"column_start":2,"column_end":43}},{"value":"/ read_from(partial); // uses alias-aware reads","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":236088,"byte_end":236137,"line_start":1395,"line_end":1395,"column_start":2,"column_end":51}},{"value":"/ read_from(full); // uses ordinary reads","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":236139,"byte_end":236182,"line_start":1396,"line_end":1396,"column_start":2,"column_end":45}},{"value":"/ # fn read_from<T: BitStore>(_: &BitSlice<LocalBits, T>) {}","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":236184,"byte_end":236246,"line_start":1397,"line_end":1397,"column_start":2,"column_end":64}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":236248,"byte_end":236255,"line_start":1398,"line_end":1398,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":236257,"byte_end":236260,"line_start":1399,"line_end":1399,"column_start":2,"column_end":5}},{"value":"/ [`.set_aliased`]: #method.set_aliased","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":236262,"byte_end":236303,"line_start":1400,"line_end":1400,"column_start":2,"column_end":43}},{"value":"inline(always)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":236305,"byte_end":236322,"line_start":1401,"line_end":1401,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":236324,"byte_end":236354,"line_start":1402,"line_end":1402,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1197},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":237610,"byte_end":237624,"line_start":1430,"line_end":1430,"column_start":9,"column_end":23},"name":"bit_domain_mut","qualname":"<BitSlice<O, T>>::bit_domain_mut","value":"pub fn bit_domain_mut(&mut Self) -> BitDomainMut<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Splits the slice into the logical components of its memory domain.","sig":null,"attributes":[{"value":"/ Splits the slice into the logical components of its memory domain.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":236430,"byte_end":236500,"line_start":1407,"line_end":1407,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":236502,"byte_end":236505,"line_start":1408,"line_end":1408,"column_start":2,"column_end":5}},{"value":"/ This produces a set of mutable subslices, marking as much as possible as","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":236507,"byte_end":236583,"line_start":1409,"line_end":1409,"column_start":2,"column_end":78}},{"value":"/ affirmatively lacking any other view (`T::Mem`). The bare view is able","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":236585,"byte_end":236659,"line_start":1410,"line_end":1410,"column_start":2,"column_end":76}},{"value":"/ to safely perform unsynchronized reads from and writes to memory without","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":236661,"byte_end":236737,"line_start":1411,"line_end":1411,"column_start":2,"column_end":78}},{"value":"/ causing undefined behavior, as the type system is able to statically","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":236739,"byte_end":236811,"line_start":1412,"line_end":1412,"column_start":2,"column_end":74}},{"value":"/ prove that no other views exist.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":236813,"byte_end":236849,"line_start":1413,"line_end":1413,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":236851,"byte_end":236854,"line_start":1414,"line_end":1414,"column_start":2,"column_end":5}},{"value":"/ # Why This Is More Sound Than `.bit_domain`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":236856,"byte_end":236903,"line_start":1415,"line_end":1415,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":236905,"byte_end":236908,"line_start":1416,"line_end":1416,"column_start":2,"column_end":5}},{"value":"/ The `&mut` exclusion rule makes it impossible to construct two","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":236910,"byte_end":236976,"line_start":1417,"line_end":1417,"column_start":2,"column_end":68}},{"value":"/ references over the same memory where one of them is marked `&mut`. This","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":236978,"byte_end":237054,"line_start":1418,"line_end":1418,"column_start":2,"column_end":78}},{"value":"/ makes it impossible to hold a live reference to memory *separately* from","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":237056,"byte_end":237132,"line_start":1419,"line_end":1419,"column_start":2,"column_end":78}},{"value":"/ any references produced from this method. For the duration of all","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":237134,"byte_end":237203,"line_start":1420,"line_end":1420,"column_start":2,"column_end":71}},{"value":"/ references produced by this method, all ancestor references used to","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":237205,"byte_end":237276,"line_start":1421,"line_end":1421,"column_start":2,"column_end":73}},{"value":"/ reach this method call are either suspended or dead, and the compiler","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":237278,"byte_end":237351,"line_start":1422,"line_end":1422,"column_start":2,"column_end":75}},{"value":"/ will not allow you to use them.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":237353,"byte_end":237388,"line_start":1423,"line_end":1423,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":237390,"byte_end":237393,"line_start":1424,"line_end":1424,"column_start":2,"column_end":5}},{"value":"/ As such, this method cannot introduce undefined behavior where a","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":237395,"byte_end":237463,"line_start":1425,"line_end":1425,"column_start":2,"column_end":70}},{"value":"/ reference incorrectly believes that the referent memory region is","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":237465,"byte_end":237534,"line_start":1426,"line_end":1426,"column_start":2,"column_end":71}},{"value":"/ immutable.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":237536,"byte_end":237550,"line_start":1427,"line_end":1427,"column_start":2,"column_end":16}},{"value":"inline(always)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":237552,"byte_end":237569,"line_start":1428,"line_end":1428,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":237571,"byte_end":237601,"line_start":1429,"line_end":1429,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1198},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":239289,"byte_end":239295,"line_start":1473,"line_end":1473,"column_start":9,"column_end":15},"name":"domain","qualname":"<BitSlice<O, T>>::domain","value":"pub fn domain(&Self) -> Domain<, T>","parent":null,"children":[],"decl_id":null,"docs":" Splits the slice into immutable references to its underlying memory\n components.","sig":null,"attributes":[{"value":"/ Splits the slice into immutable references to its underlying memory","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":237691,"byte_end":237762,"line_start":1434,"line_end":1434,"column_start":2,"column_end":73}},{"value":"/ components.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":237764,"byte_end":237779,"line_start":1435,"line_end":1435,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":237781,"byte_end":237784,"line_start":1436,"line_end":1436,"column_start":2,"column_end":5}},{"value":"/ Unlike [`.bit_domain`] and [`.bit_domain_mut`], this does not return","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":237786,"byte_end":237858,"line_start":1437,"line_end":1437,"column_start":2,"column_end":74}},{"value":"/ smaller `BitSlice` handles but rather appropriately-marked references to","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":237860,"byte_end":237936,"line_start":1438,"line_end":1438,"column_start":2,"column_end":78}},{"value":"/ the underlying memory elements.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":237938,"byte_end":237973,"line_start":1439,"line_end":1439,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":237975,"byte_end":237978,"line_start":1440,"line_end":1440,"column_start":2,"column_end":5}},{"value":"/ The aliased references allow mutation of these elements. You are","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":237980,"byte_end":238048,"line_start":1441,"line_end":1441,"column_start":2,"column_end":70}},{"value":"/ required to not use mutating methods on these references *at all*. This","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":238050,"byte_end":238125,"line_start":1442,"line_end":1442,"column_start":2,"column_end":77}},{"value":"/ function is not marked `unsafe`, but this is a contract you must uphold.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":238127,"byte_end":238203,"line_start":1443,"line_end":1443,"column_start":2,"column_end":78}},{"value":"/ Use [`.domain_mut`] to modify the underlying elements.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":238205,"byte_end":238263,"line_start":1444,"line_end":1444,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":238265,"byte_end":238268,"line_start":1445,"line_end":1445,"column_start":2,"column_end":5}},{"value":"/ > It is not currently possible to forbid mutation through these","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":238270,"byte_end":238337,"line_start":1446,"line_end":1446,"column_start":2,"column_end":69}},{"value":"/ > references. This may change in the future.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":238339,"byte_end":238387,"line_start":1447,"line_end":1447,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":238389,"byte_end":238392,"line_start":1448,"line_end":1448,"column_start":2,"column_end":5}},{"value":"/ # Safety Exception","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":238394,"byte_end":238416,"line_start":1449,"line_end":1449,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":238418,"byte_end":238421,"line_start":1450,"line_end":1450,"column_start":2,"column_end":5}},{"value":"/ As with [`.bit_domain`], this produces unsynchronized immutable","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":238423,"byte_end":238490,"line_start":1451,"line_end":1451,"column_start":2,"column_end":69}},{"value":"/ references over the fully-populated interior elements. If this view is","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":238492,"byte_end":238566,"line_start":1452,"line_end":1452,"column_start":2,"column_end":76}},{"value":"/ constructed from a `BitSlice` handle over atomic memory, then it will","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":238568,"byte_end":238641,"line_start":1453,"line_end":1453,"column_start":2,"column_end":75}},{"value":"/ remove the atomic access behavior for the interior elements. This *by","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":238643,"byte_end":238716,"line_start":1454,"line_end":1454,"column_start":2,"column_end":75}},{"value":"/ itself* is safe, as long as no contemporaneous atomic writes to that","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":238718,"byte_end":238790,"line_start":1455,"line_end":1455,"column_start":2,"column_end":74}},{"value":"/ memory can occur. You must not retain and use an atomic reference to the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":238792,"byte_end":238868,"line_start":1456,"line_end":1456,"column_start":2,"column_end":78}},{"value":"/ memory region marked as `NoAlias` for the duration of this view’s","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":238870,"byte_end":238941,"line_start":1457,"line_end":1457,"column_start":2,"column_end":71}},{"value":"/ existence.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":238943,"byte_end":238957,"line_start":1458,"line_end":1458,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":238959,"byte_end":238962,"line_start":1459,"line_end":1459,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":238964,"byte_end":238980,"line_start":1460,"line_end":1460,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":238982,"byte_end":238985,"line_start":1461,"line_end":1461,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":238987,"byte_end":239000,"line_start":1462,"line_end":1462,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":239002,"byte_end":239005,"line_start":1463,"line_end":1463,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":239007,"byte_end":239020,"line_start":1464,"line_end":1464,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":239022,"byte_end":239025,"line_start":1465,"line_end":1465,"column_start":2,"column_end":5}},{"value":"/ A read-only descriptor of the memory elements backing `*self`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":239027,"byte_end":239093,"line_start":1466,"line_end":1466,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":239095,"byte_end":239098,"line_start":1467,"line_end":1467,"column_start":2,"column_end":5}},{"value":"/ [`.bit_domain`]: #method.bit_domain","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":239100,"byte_end":239139,"line_start":1468,"line_end":1468,"column_start":2,"column_end":41}},{"value":"/ [`.bit_domain_mut`]: #method.bit_domain_mut","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":239141,"byte_end":239188,"line_start":1469,"line_end":1469,"column_start":2,"column_end":49}},{"value":"/ [`.domain_mut`]: #method.domain_mut","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":239190,"byte_end":239229,"line_start":1470,"line_end":1470,"column_start":2,"column_end":41}},{"value":"inline(always)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":239231,"byte_end":239248,"line_start":1471,"line_end":1471,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":239250,"byte_end":239280,"line_start":1472,"line_end":1472,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1199},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":240203,"byte_end":240213,"line_start":1502,"line_end":1502,"column_start":9,"column_end":19},"name":"domain_mut","qualname":"<BitSlice<O, T>>::domain_mut","value":"pub fn domain_mut(&mut Self) -> DomainMut<, T>","parent":null,"children":[],"decl_id":null,"docs":" Splits the slice into mutable references to its underlying memory\n elements.","sig":null,"attributes":[{"value":"/ Splits the slice into mutable references to its underlying memory","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":239343,"byte_end":239412,"line_start":1477,"line_end":1477,"column_start":2,"column_end":71}},{"value":"/ elements.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":239414,"byte_end":239427,"line_start":1478,"line_end":1478,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":239429,"byte_end":239432,"line_start":1479,"line_end":1479,"column_start":2,"column_end":5}},{"value":"/ Like [`.domain`], this returns appropriately-marked references to the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":239434,"byte_end":239507,"line_start":1480,"line_end":1480,"column_start":2,"column_end":75}},{"value":"/ underlying memory elements. These references are all writable.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":239509,"byte_end":239575,"line_start":1481,"line_end":1481,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":239577,"byte_end":239580,"line_start":1482,"line_end":1482,"column_start":2,"column_end":5}},{"value":"/ The aliased edge references permit modifying memory beyond their bit","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":239582,"byte_end":239654,"line_start":1483,"line_end":1483,"column_start":2,"column_end":74}},{"value":"/ marker. You are required to only mutate the region of these edge","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":239656,"byte_end":239724,"line_start":1484,"line_end":1484,"column_start":2,"column_end":70}},{"value":"/ elements that you currently govern. This function is not marked","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":239726,"byte_end":239793,"line_start":1485,"line_end":1485,"column_start":2,"column_end":69}},{"value":"/ `unsafe`, but this is a contract you must uphold.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":239795,"byte_end":239848,"line_start":1486,"line_end":1486,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":239850,"byte_end":239853,"line_start":1487,"line_end":1487,"column_start":2,"column_end":5}},{"value":"/ > It is not currently possible to forbid out-of-bounds mutation through","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":239855,"byte_end":239930,"line_start":1488,"line_end":1488,"column_start":2,"column_end":77}},{"value":"/ > these references. This may change in the future.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":239932,"byte_end":239986,"line_start":1489,"line_end":1489,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":239988,"byte_end":239991,"line_start":1490,"line_end":1490,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":239993,"byte_end":240009,"line_start":1491,"line_end":1491,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":240011,"byte_end":240014,"line_start":1492,"line_end":1492,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":240016,"byte_end":240033,"line_start":1493,"line_end":1493,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":240035,"byte_end":240038,"line_start":1494,"line_end":1494,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":240040,"byte_end":240053,"line_start":1495,"line_end":1495,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":240055,"byte_end":240058,"line_start":1496,"line_end":1496,"column_start":2,"column_end":5}},{"value":"/ A descriptor of the memory elements underneath `*self`, permitting","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":240060,"byte_end":240130,"line_start":1497,"line_end":1497,"column_start":2,"column_end":72}},{"value":"/ mutation.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":240132,"byte_end":240145,"line_start":1498,"line_end":1498,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":240147,"byte_end":240150,"line_start":1499,"line_end":1499,"column_start":2,"column_end":5}},{"value":"/ [`.domain`]: #method.domain","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":240152,"byte_end":240183,"line_start":1500,"line_end":1500,"column_start":2,"column_end":33}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":240185,"byte_end":240194,"line_start":1501,"line_end":1501,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1200},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":241387,"byte_end":241405,"line_start":1545,"line_end":1545,"column_start":16,"column_end":34},"name":"split_at_unchecked","qualname":"<BitSlice<O, T>>::split_at_unchecked","value":"pub unsafe fn split_at_unchecked(&Self, usize) -> (&Self, &Self)","parent":null,"children":[],"decl_id":null,"docs":" Splits a slice at some mid-point, without checking boundary conditions.","sig":null,"attributes":[{"value":"/ Splits a slice at some mid-point, without checking boundary conditions.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":240271,"byte_end":240346,"line_start":1506,"line_end":1506,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":240348,"byte_end":240351,"line_start":1507,"line_end":1507,"column_start":2,"column_end":5}},{"value":"/ This is generally not recommended; use with caution! For a safe","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":240353,"byte_end":240420,"line_start":1508,"line_end":1508,"column_start":2,"column_end":69}},{"value":"/ alternative, see [`split_at`].","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":240422,"byte_end":240456,"line_start":1509,"line_end":1509,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":240458,"byte_end":240461,"line_start":1510,"line_end":1510,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":240463,"byte_end":240479,"line_start":1511,"line_end":1511,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":240481,"byte_end":240484,"line_start":1512,"line_end":1512,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":240486,"byte_end":240499,"line_start":1513,"line_end":1513,"column_start":2,"column_end":15}},{"value":"/ - `mid`: The index at which to split the slice. This must be in the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":240501,"byte_end":240572,"line_start":1514,"line_end":1514,"column_start":2,"column_end":73}},{"value":"/   range `0 .. self.len()`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":240574,"byte_end":240604,"line_start":1515,"line_end":1515,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":240606,"byte_end":240609,"line_start":1516,"line_end":1516,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":240611,"byte_end":240624,"line_start":1517,"line_end":1517,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":240626,"byte_end":240629,"line_start":1518,"line_end":1518,"column_start":2,"column_end":5}},{"value":"/ - `.0`: `&self[.. mid]`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":240631,"byte_end":240658,"line_start":1519,"line_end":1519,"column_start":2,"column_end":29}},{"value":"/ - `.1`: `&self[mid ..]`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":240660,"byte_end":240687,"line_start":1520,"line_end":1520,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":240689,"byte_end":240692,"line_start":1521,"line_end":1521,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":240694,"byte_end":240706,"line_start":1522,"line_end":1522,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":240708,"byte_end":240711,"line_start":1523,"line_end":1523,"column_start":2,"column_end":5}},{"value":"/ This function is **not** safe. It performs raw pointer arithmetic to","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":240713,"byte_end":240785,"line_start":1524,"line_end":1524,"column_start":2,"column_end":74}},{"value":"/ construct two new references. If `mid` is out of bounds, then the first","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":240787,"byte_end":240862,"line_start":1525,"line_end":1525,"column_start":2,"column_end":77}},{"value":"/ slice will be too large, and the second will be *catastrophically*","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":240864,"byte_end":240934,"line_start":1526,"line_end":1526,"column_start":2,"column_end":72}},{"value":"/ incorrect. As both are references to invalid memory, they are undefined","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":240936,"byte_end":241011,"line_start":1527,"line_end":1527,"column_start":2,"column_end":77}},{"value":"/ to *construct*, and may not ever be used.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":241013,"byte_end":241058,"line_start":1528,"line_end":1528,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":241060,"byte_end":241063,"line_start":1529,"line_end":1529,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":241065,"byte_end":241079,"line_start":1530,"line_end":1530,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":241081,"byte_end":241084,"line_start":1531,"line_end":1531,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":241086,"byte_end":241097,"line_start":1532,"line_end":1532,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":241099,"byte_end":241126,"line_start":1533,"line_end":1533,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":241128,"byte_end":241131,"line_start":1534,"line_end":1534,"column_start":2,"column_end":5}},{"value":"/ let data = 0x0180u16;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":241133,"byte_end":241158,"line_start":1535,"line_end":1535,"column_start":2,"column_end":27}},{"value":"/ let bits = data.view_bits::<Msb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":241160,"byte_end":241200,"line_start":1536,"line_end":1536,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":241202,"byte_end":241205,"line_start":1537,"line_end":1537,"column_start":2,"column_end":5}},{"value":"/ let (one, two) = unsafe { bits.split_at_unchecked(8) };","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":241207,"byte_end":241266,"line_start":1538,"line_end":1538,"column_start":2,"column_end":61}},{"value":"/ assert!(one[7]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":241268,"byte_end":241288,"line_start":1539,"line_end":1539,"column_start":2,"column_end":22}},{"value":"/ assert!(two[0]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":241290,"byte_end":241310,"line_start":1540,"line_end":1540,"column_start":2,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":241312,"byte_end":241319,"line_start":1541,"line_end":1541,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":241321,"byte_end":241324,"line_start":1542,"line_end":1542,"column_start":2,"column_end":5}},{"value":"/ [`split_at`]: #method.split_at","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":241326,"byte_end":241360,"line_start":1543,"line_end":1543,"column_start":2,"column_end":36}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":241362,"byte_end":241371,"line_start":1544,"line_end":1544,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1201},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":242846,"byte_end":242868,"line_start":1595,"line_end":1595,"column_start":16,"column_end":38},"name":"split_at_unchecked_mut","qualname":"<BitSlice<O, T>>::split_at_unchecked_mut","value":"pub unsafe fn split_at_unchecked_mut(&mut Self, usize)\n-> (&mut BitSlice<O, T::Alias>, &mut BitSlice<O, T::Alias>)","parent":null,"children":[],"decl_id":null,"docs":" Splits a mutable slice at some mid-point, without checking boundary\n conditions.","sig":null,"attributes":[{"value":"/ Splits a mutable slice at some mid-point, without checking boundary","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":241615,"byte_end":241686,"line_start":1553,"line_end":1553,"column_start":2,"column_end":73}},{"value":"/ conditions.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":241688,"byte_end":241703,"line_start":1554,"line_end":1554,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":241705,"byte_end":241708,"line_start":1555,"line_end":1555,"column_start":2,"column_end":5}},{"value":"/ This is generally not recommended; use with caution! For a safe","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":241710,"byte_end":241777,"line_start":1556,"line_end":1556,"column_start":2,"column_end":69}},{"value":"/ alternative, see [`split_at_mut`].","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":241779,"byte_end":241817,"line_start":1557,"line_end":1557,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":241819,"byte_end":241822,"line_start":1558,"line_end":1558,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":241824,"byte_end":241840,"line_start":1559,"line_end":1559,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":241842,"byte_end":241845,"line_start":1560,"line_end":1560,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":241847,"byte_end":241864,"line_start":1561,"line_end":1561,"column_start":2,"column_end":19}},{"value":"/ - `mid`: The index at which to split the slice. This must be in the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":241866,"byte_end":241937,"line_start":1562,"line_end":1562,"column_start":2,"column_end":73}},{"value":"/   range `0 .. self.len()`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":241939,"byte_end":241969,"line_start":1563,"line_end":1563,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":241971,"byte_end":241974,"line_start":1564,"line_end":1564,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":241976,"byte_end":241989,"line_start":1565,"line_end":1565,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":241991,"byte_end":241994,"line_start":1566,"line_end":1566,"column_start":2,"column_end":5}},{"value":"/ - `.0`: `&mut self[.. mid]`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":241996,"byte_end":242027,"line_start":1567,"line_end":1567,"column_start":2,"column_end":33}},{"value":"/ - `.1`: `&mut self[mid ..]`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":242029,"byte_end":242060,"line_start":1568,"line_end":1568,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":242062,"byte_end":242065,"line_start":1569,"line_end":1569,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":242067,"byte_end":242079,"line_start":1570,"line_end":1570,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":242081,"byte_end":242084,"line_start":1571,"line_end":1571,"column_start":2,"column_end":5}},{"value":"/ This function is **not** safe. It performs raw pointer arithmetic to","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":242086,"byte_end":242158,"line_start":1572,"line_end":1572,"column_start":2,"column_end":74}},{"value":"/ construct two new references. If `mid` is out of bounds, then the first","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":242160,"byte_end":242235,"line_start":1573,"line_end":1573,"column_start":2,"column_end":77}},{"value":"/ slice will be too large, and the second will be *catastrophically*","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":242237,"byte_end":242307,"line_start":1574,"line_end":1574,"column_start":2,"column_end":72}},{"value":"/ incorrect. As both are references to invalid memory, they are undefined","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":242309,"byte_end":242384,"line_start":1575,"line_end":1575,"column_start":2,"column_end":77}},{"value":"/ to *construct*, and may not ever be used.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":242386,"byte_end":242431,"line_start":1576,"line_end":1576,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":242433,"byte_end":242436,"line_start":1577,"line_end":1577,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":242438,"byte_end":242452,"line_start":1578,"line_end":1578,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":242454,"byte_end":242457,"line_start":1579,"line_end":1579,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":242459,"byte_end":242470,"line_start":1580,"line_end":1580,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":242472,"byte_end":242499,"line_start":1581,"line_end":1581,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":242501,"byte_end":242504,"line_start":1582,"line_end":1582,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0u16;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":242506,"byte_end":242530,"line_start":1583,"line_end":1583,"column_start":2,"column_end":26}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":242532,"byte_end":242576,"line_start":1584,"line_end":1584,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":242578,"byte_end":242581,"line_start":1585,"line_end":1585,"column_start":2,"column_end":5}},{"value":"/ let (one, two) = unsafe { bits.split_at_unchecked_mut(8) };","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":242583,"byte_end":242646,"line_start":1586,"line_end":1586,"column_start":2,"column_end":65}},{"value":"/ one.set(7, true);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":242648,"byte_end":242669,"line_start":1587,"line_end":1587,"column_start":2,"column_end":23}},{"value":"/ two.set(0, true);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":242671,"byte_end":242692,"line_start":1588,"line_end":1588,"column_start":2,"column_end":23}},{"value":"/ assert_eq!(data, 0x0180u16);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":242694,"byte_end":242726,"line_start":1589,"line_end":1589,"column_start":2,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":242728,"byte_end":242735,"line_start":1590,"line_end":1590,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":242737,"byte_end":242740,"line_start":1591,"line_end":1591,"column_start":2,"column_end":5}},{"value":"/ [`split_at_mut`]: #method.split_at_mut","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":242742,"byte_end":242784,"line_start":1592,"line_end":1592,"column_start":2,"column_end":44}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":242786,"byte_end":242795,"line_start":1593,"line_end":1593,"column_start":2,"column_end":11}},{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":242797,"byte_end":242830,"line_start":1594,"line_end":1594,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1202},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":244214,"byte_end":244228,"line_start":1650,"line_end":1650,"column_start":16,"column_end":30},"name":"swap_unchecked","qualname":"<BitSlice<O, T>>::swap_unchecked","value":"pub unsafe fn swap_unchecked(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Swaps the bits at two indices without checking boundary conditions.","sig":null,"attributes":[{"value":"/ Swaps the bits at two indices without checking boundary conditions.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":243284,"byte_end":243355,"line_start":1613,"line_end":1613,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":243357,"byte_end":243360,"line_start":1614,"line_end":1614,"column_start":2,"column_end":5}},{"value":"/ This is generally not recommended; use with caution! For a safe","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":243362,"byte_end":243429,"line_start":1615,"line_end":1615,"column_start":2,"column_end":69}},{"value":"/ alternative, see [`swap`].","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":243431,"byte_end":243461,"line_start":1616,"line_end":1616,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":243463,"byte_end":243466,"line_start":1617,"line_end":1617,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":243468,"byte_end":243484,"line_start":1618,"line_end":1618,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":243486,"byte_end":243489,"line_start":1619,"line_end":1619,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":243491,"byte_end":243508,"line_start":1620,"line_end":1620,"column_start":2,"column_end":19}},{"value":"/ - `a`: One index to swap.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":243510,"byte_end":243539,"line_start":1621,"line_end":1621,"column_start":2,"column_end":31}},{"value":"/ - `b`: The other index to swap.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":243541,"byte_end":243576,"line_start":1622,"line_end":1622,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":243578,"byte_end":243581,"line_start":1623,"line_end":1623,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":243583,"byte_end":243596,"line_start":1624,"line_end":1624,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":243598,"byte_end":243601,"line_start":1625,"line_end":1625,"column_start":2,"column_end":5}},{"value":"/ The bit at index `a` is written into index `b`, and the bit at index `b`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":243603,"byte_end":243679,"line_start":1626,"line_end":1626,"column_start":2,"column_end":78}},{"value":"/ is written into `a`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":243681,"byte_end":243705,"line_start":1627,"line_end":1627,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":243707,"byte_end":243710,"line_start":1628,"line_end":1628,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":243712,"byte_end":243724,"line_start":1629,"line_end":1629,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":243726,"byte_end":243729,"line_start":1630,"line_end":1630,"column_start":2,"column_end":5}},{"value":"/ Both `a` and `b` must be less than `self.len()`. Indices greater than","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":243731,"byte_end":243804,"line_start":1631,"line_end":1631,"column_start":2,"column_end":75}},{"value":"/ the length will cause out-of-bounds memory access, which can lead to","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":243806,"byte_end":243878,"line_start":1632,"line_end":1632,"column_start":2,"column_end":74}},{"value":"/ memory unsafety and a program crash.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":243880,"byte_end":243920,"line_start":1633,"line_end":1633,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":243922,"byte_end":243925,"line_start":1634,"line_end":1634,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":243927,"byte_end":243941,"line_start":1635,"line_end":1635,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":243943,"byte_end":243946,"line_start":1636,"line_end":1636,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":243948,"byte_end":243959,"line_start":1637,"line_end":1637,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":243961,"byte_end":243988,"line_start":1638,"line_end":1638,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":243990,"byte_end":243993,"line_start":1639,"line_end":1639,"column_start":2,"column_end":5}},{"value":"/ let mut data = 8u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":243995,"byte_end":244018,"line_start":1640,"line_end":1640,"column_start":2,"column_end":25}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":244020,"byte_end":244064,"line_start":1641,"line_end":1641,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":244066,"byte_end":244069,"line_start":1642,"line_end":1642,"column_start":2,"column_end":5}},{"value":"/ unsafe { bits.swap_unchecked(0, 4); }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":244071,"byte_end":244112,"line_start":1643,"line_end":1643,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":244114,"byte_end":244117,"line_start":1644,"line_end":1644,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(data, 128);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":244119,"byte_end":244145,"line_start":1645,"line_end":1645,"column_start":2,"column_end":28}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":244147,"byte_end":244154,"line_start":1646,"line_end":1646,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":244156,"byte_end":244159,"line_start":1647,"line_end":1647,"column_start":2,"column_end":5}},{"value":"/ [`swap`]: #method.swap","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":244161,"byte_end":244187,"line_start":1648,"line_end":1648,"column_start":2,"column_end":28}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":244189,"byte_end":244198,"line_start":1649,"line_end":1649,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1203},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":245521,"byte_end":245535,"line_start":1694,"line_end":1694,"column_start":16,"column_end":30},"name":"copy_unchecked","qualname":"<BitSlice<O, T>>::copy_unchecked","value":"pub unsafe fn copy_unchecked(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Copies a bit from one index to another without checking boundary\n conditions.","sig":null,"attributes":[{"value":"/ Copies a bit from one index to another without checking boundary","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":244407,"byte_end":244475,"line_start":1657,"line_end":1657,"column_start":2,"column_end":70}},{"value":"/ conditions.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":244477,"byte_end":244492,"line_start":1658,"line_end":1658,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":244494,"byte_end":244497,"line_start":1659,"line_end":1659,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":244499,"byte_end":244515,"line_start":1660,"line_end":1660,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":244517,"byte_end":244520,"line_start":1661,"line_end":1661,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":244522,"byte_end":244539,"line_start":1662,"line_end":1662,"column_start":2,"column_end":19}},{"value":"/ - `from`: The index whose bit is to be copied","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":244541,"byte_end":244590,"line_start":1663,"line_end":1663,"column_start":2,"column_end":51}},{"value":"/ - `to`: The index into which the copied bit is written.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":244592,"byte_end":244651,"line_start":1664,"line_end":1664,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":244653,"byte_end":244656,"line_start":1665,"line_end":1665,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":244658,"byte_end":244671,"line_start":1666,"line_end":1666,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":244673,"byte_end":244676,"line_start":1667,"line_end":1667,"column_start":2,"column_end":5}},{"value":"/ The bit at `from` is written into `to`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":244678,"byte_end":244721,"line_start":1668,"line_end":1668,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":244723,"byte_end":244726,"line_start":1669,"line_end":1669,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":244728,"byte_end":244740,"line_start":1670,"line_end":1670,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":244742,"byte_end":244745,"line_start":1671,"line_end":1671,"column_start":2,"column_end":5}},{"value":"/ Both `from` and `to` must be less than `self.len()`, in order for","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":244747,"byte_end":244816,"line_start":1672,"line_end":1672,"column_start":2,"column_end":71}},{"value":"/ `self` to legally read from and write to them, respectively.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":244818,"byte_end":244882,"line_start":1673,"line_end":1673,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":244884,"byte_end":244887,"line_start":1674,"line_end":1674,"column_start":2,"column_end":5}},{"value":"/ If `self` had been split from a larger slice, reading from `from` or","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":244889,"byte_end":244961,"line_start":1675,"line_end":1675,"column_start":2,"column_end":74}},{"value":"/ writing to `to` may not *necessarily* cause a memory-safety violation in","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":244963,"byte_end":245039,"line_start":1676,"line_end":1676,"column_start":2,"column_end":78}},{"value":"/ the Rust model, due to the aliasing system `bitvec` employs. However,","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":245041,"byte_end":245114,"line_start":1677,"line_end":1677,"column_start":2,"column_end":75}},{"value":"/ writing outside the bounds of a slice reference is *always* a logical","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":245116,"byte_end":245189,"line_start":1678,"line_end":1678,"column_start":2,"column_end":75}},{"value":"/ error, as it causes changes observable by another reference handle.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":245191,"byte_end":245262,"line_start":1679,"line_end":1679,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":245264,"byte_end":245267,"line_start":1680,"line_end":1680,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":245269,"byte_end":245283,"line_start":1681,"line_end":1681,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":245285,"byte_end":245288,"line_start":1682,"line_end":1682,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":245290,"byte_end":245301,"line_start":1683,"line_end":1683,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":245303,"byte_end":245330,"line_start":1684,"line_end":1684,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":245332,"byte_end":245335,"line_start":1685,"line_end":1685,"column_start":2,"column_end":5}},{"value":"/ let mut data = 1u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":245337,"byte_end":245360,"line_start":1686,"line_end":1686,"column_start":2,"column_end":25}},{"value":"/ let bits = data.view_bits_mut::<Lsb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":245362,"byte_end":245406,"line_start":1687,"line_end":1687,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":245408,"byte_end":245411,"line_start":1688,"line_end":1688,"column_start":2,"column_end":5}},{"value":"/ unsafe { bits.copy_unchecked(0, 2) };","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":245413,"byte_end":245454,"line_start":1689,"line_end":1689,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":245456,"byte_end":245459,"line_start":1690,"line_end":1690,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(data, 5);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":245461,"byte_end":245485,"line_start":1691,"line_end":1691,"column_start":2,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":245487,"byte_end":245494,"line_start":1692,"line_end":1692,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":245496,"byte_end":245505,"line_start":1693,"line_end":1693,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1204},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":246674,"byte_end":246695,"line_start":1733,"line_end":1733,"column_start":16,"column_end":37},"name":"copy_within_unchecked","qualname":"<BitSlice<O, T>>::copy_within_unchecked","value":"pub unsafe fn copy_within_unchecked<R>(&mut Self, R, usize) where\nR: RangeBounds<usize>","parent":null,"children":[],"decl_id":null,"docs":" Copies bits from one part of the slice to another part of itself.","sig":null,"attributes":[{"value":"/ Copies bits from one part of the slice to another part of itself.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":245648,"byte_end":245717,"line_start":1699,"line_end":1699,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":245719,"byte_end":245722,"line_start":1700,"line_end":1700,"column_start":2,"column_end":5}},{"value":"/ `src` is the range within `self` to copy from. `dest` is the starting","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":245724,"byte_end":245797,"line_start":1701,"line_end":1701,"column_start":2,"column_end":75}},{"value":"/ index of the range within `self` to copy to, which will have the same","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":245799,"byte_end":245872,"line_start":1702,"line_end":1702,"column_start":2,"column_end":75}},{"value":"/ length as `src`. The two ranges may overlap. The ends of the two ranges","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":245874,"byte_end":245949,"line_start":1703,"line_end":1703,"column_start":2,"column_end":77}},{"value":"/ must be less than or equal to `self.len()`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":245951,"byte_end":245998,"line_start":1704,"line_end":1704,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":246000,"byte_end":246003,"line_start":1705,"line_end":1705,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":246005,"byte_end":246018,"line_start":1706,"line_end":1706,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":246020,"byte_end":246023,"line_start":1707,"line_end":1707,"column_start":2,"column_end":5}},{"value":"/ `self[src]` is copied to `self[dest .. dest + src.end() - src.start()]`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":246025,"byte_end":246101,"line_start":1708,"line_end":1708,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":246103,"byte_end":246106,"line_start":1709,"line_end":1709,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":246108,"byte_end":246120,"line_start":1710,"line_end":1710,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":246122,"byte_end":246125,"line_start":1711,"line_end":1711,"column_start":2,"column_end":5}},{"value":"/ This function will panic if either range exceeds the end of the slice,","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":246127,"byte_end":246201,"line_start":1712,"line_end":1712,"column_start":2,"column_end":76}},{"value":"/ or if the end of `src` is before the start.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":246203,"byte_end":246250,"line_start":1713,"line_end":1713,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":246252,"byte_end":246255,"line_start":1714,"line_end":1714,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":246257,"byte_end":246269,"line_start":1715,"line_end":1715,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":246271,"byte_end":246274,"line_start":1716,"line_end":1716,"column_start":2,"column_end":5}},{"value":"/ Both the `src` range and the target range `dest .. dest + src.len()`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":246276,"byte_end":246348,"line_start":1717,"line_end":1717,"column_start":2,"column_end":74}},{"value":"/ must not exceed the `self.len()` slice range.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":246350,"byte_end":246399,"line_start":1718,"line_end":1718,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":246401,"byte_end":246404,"line_start":1719,"line_end":1719,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":246406,"byte_end":246420,"line_start":1720,"line_end":1720,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":246422,"byte_end":246425,"line_start":1721,"line_end":1721,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":246427,"byte_end":246438,"line_start":1722,"line_end":1722,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":246440,"byte_end":246467,"line_start":1723,"line_end":1723,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":246469,"byte_end":246472,"line_start":1724,"line_end":1724,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0x07u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":246474,"byte_end":246500,"line_start":1725,"line_end":1725,"column_start":2,"column_end":28}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":246502,"byte_end":246546,"line_start":1726,"line_end":1726,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":246548,"byte_end":246551,"line_start":1727,"line_end":1727,"column_start":2,"column_end":5}},{"value":"/ unsafe { bits.copy_within_unchecked(5 .., 0); }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":246553,"byte_end":246604,"line_start":1728,"line_end":1728,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":246606,"byte_end":246609,"line_start":1729,"line_end":1729,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(data, 0xE7);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":246611,"byte_end":246638,"line_start":1730,"line_end":1730,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":246640,"byte_end":246647,"line_start":1731,"line_end":1731,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":246649,"byte_end":246658,"line_start":1732,"line_end":1732,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1214},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":249353,"byte_end":249373,"line_start":1820,"line_end":1820,"column_start":9,"column_end":29},"name":"split_at_aliased_mut","qualname":"<BitSlice<O, T>>::split_at_aliased_mut","value":"pub fn split_at_aliased_mut(&mut Self, usize) -> (&mut Self, &mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Splits a mutable slice at some mid-point.","sig":null,"attributes":[{"value":"/ Splits a mutable slice at some mid-point.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":248818,"byte_end":248863,"line_start":1806,"line_end":1806,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":248865,"byte_end":248868,"line_start":1807,"line_end":1807,"column_start":2,"column_end":5}},{"value":"/ This method has the same behavior as [`split_at_mut`], except that it","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":248870,"byte_end":248943,"line_start":1808,"line_end":1808,"column_start":2,"column_end":75}},{"value":"/ does not apply an aliasing marker to the partitioned subslices.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":248945,"byte_end":249012,"line_start":1809,"line_end":1809,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":249014,"byte_end":249017,"line_start":1810,"line_end":1810,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":249019,"byte_end":249031,"line_start":1811,"line_end":1811,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":249033,"byte_end":249036,"line_start":1812,"line_end":1812,"column_start":2,"column_end":5}},{"value":"/ Because this method is defined only on `BitSlice`s whose `T` type is","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":249038,"byte_end":249110,"line_start":1813,"line_end":1813,"column_start":2,"column_end":74}},{"value":"/ alias-safe, the subslices do not need to be additionally marked.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":249112,"byte_end":249180,"line_start":1814,"line_end":1814,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":249182,"byte_end":249185,"line_start":1815,"line_end":1815,"column_start":2,"column_end":5}},{"value":"/ [`split_at_mut`]: #method.split_at_mut","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":249187,"byte_end":249229,"line_start":1816,"line_end":1816,"column_start":2,"column_end":44}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":249231,"byte_end":249240,"line_start":1817,"line_end":1817,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":249314,"byte_end":249344,"line_start":1819,"line_end":1819,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1215},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":250125,"byte_end":250155,"line_start":1844,"line_end":1844,"column_start":16,"column_end":46},"name":"split_at_aliased_unchecked_mut","qualname":"<BitSlice<O, T>>::split_at_aliased_unchecked_mut","value":"pub unsafe fn split_at_aliased_unchecked_mut(&mut Self, usize)\n-> (&mut Self, &mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Splits a mutable slice at some mid-point, without checking boundary\n conditions.","sig":null,"attributes":[{"value":"/ Splits a mutable slice at some mid-point, without checking boundary","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":249548,"byte_end":249619,"line_start":1829,"line_end":1829,"column_start":2,"column_end":73}},{"value":"/ conditions.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":249621,"byte_end":249636,"line_start":1830,"line_end":1830,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":249638,"byte_end":249641,"line_start":1831,"line_end":1831,"column_start":2,"column_end":5}},{"value":"/ This method has the same behavior as [`split_at_unchecked_mut`], except","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":249643,"byte_end":249718,"line_start":1832,"line_end":1832,"column_start":2,"column_end":77}},{"value":"/ that it does not apply an aliasing marker to the partitioned subslices.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":249720,"byte_end":249795,"line_start":1833,"line_end":1833,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":249797,"byte_end":249800,"line_start":1834,"line_end":1834,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":249802,"byte_end":249814,"line_start":1835,"line_end":1835,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":249816,"byte_end":249819,"line_start":1836,"line_end":1836,"column_start":2,"column_end":5}},{"value":"/ See [`split_at_unchecked_mut`] for safety requirements.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":249821,"byte_end":249880,"line_start":1837,"line_end":1837,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":249882,"byte_end":249885,"line_start":1838,"line_end":1838,"column_start":2,"column_end":5}},{"value":"/ Because this method is defined only on `BitSlice`s whose `T` type is","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":249887,"byte_end":249959,"line_start":1839,"line_end":1839,"column_start":2,"column_end":74}},{"value":"/ alias-safe, the subslices do not need to be additionally marked.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":249961,"byte_end":250029,"line_start":1840,"line_end":1840,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":250031,"byte_end":250034,"line_start":1841,"line_end":1841,"column_start":2,"column_end":5}},{"value":"/ [`split_at_unchecked_mut`]: #method.split_at_unchecked_mut","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":250036,"byte_end":250098,"line_start":1842,"line_end":1842,"column_start":2,"column_end":64}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":250100,"byte_end":250109,"line_start":1843,"line_end":1843,"column_start":2,"column_end":11}}]},{"kind":"Const","id":{"krate":0,"index":1219},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":250887,"byte_end":250895,"line_start":1871,"line_end":1871,"column_start":12,"column_end":20},"name":"MAX_BITS","qualname":"::slice::BitSlice::<O, T>::MAX_BITS","value":"usize","parent":{"krate":0,"index":1216},"children":[],"decl_id":null,"docs":" The inclusive maximum length of a `BitSlice<_, T>`.","sig":null,"attributes":[{"value":"/ The inclusive maximum length of a `BitSlice<_, T>`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":250529,"byte_end":250584,"line_start":1862,"line_end":1862,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":250586,"byte_end":250589,"line_start":1863,"line_end":1863,"column_start":2,"column_end":5}},{"value":"/ As `BitSlice` is zero-indexed, the largest possible index is one less","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":250591,"byte_end":250664,"line_start":1864,"line_end":1864,"column_start":2,"column_end":75}},{"value":"/ than this value.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":250666,"byte_end":250686,"line_start":1865,"line_end":1865,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":250688,"byte_end":250691,"line_start":1866,"line_end":1866,"column_start":2,"column_end":5}},{"value":"/ |CPU word width|         Value         |","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":250693,"byte_end":250737,"line_start":1867,"line_end":1867,"column_start":2,"column_end":46}},{"value":"/ |-------------:|----------------------:|","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":250739,"byte_end":250783,"line_start":1868,"line_end":1868,"column_start":2,"column_end":46}},{"value":"/ |32 bits       |     `0x1fff_ffff`     |","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":250785,"byte_end":250829,"line_start":1869,"line_end":1869,"column_start":2,"column_end":46}},{"value":"/ |64 bits       |`0x1fff_ffff_ffff_ffff`|","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":250831,"byte_end":250875,"line_start":1870,"line_end":1870,"column_start":2,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":1220},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":251721,"byte_end":251729,"line_start":1886,"line_end":1886,"column_start":12,"column_end":20},"name":"MAX_ELTS","qualname":"::slice::BitSlice::<O, T>::MAX_ELTS","value":"usize","parent":{"krate":0,"index":1216},"children":[],"decl_id":null,"docs":" The inclusive maximum length that a slice `[T]` can be for\n `BitSlice<_, T>` to cover it.","sig":null,"attributes":[{"value":"/ The inclusive maximum length that a slice `[T]` can be for","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":250936,"byte_end":250998,"line_start":1872,"line_end":1872,"column_start":2,"column_end":64}},{"value":"/ `BitSlice<_, T>` to cover it.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":251000,"byte_end":251033,"line_start":1873,"line_end":1873,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":251035,"byte_end":251038,"line_start":1874,"line_end":1874,"column_start":2,"column_end":5}},{"value":"/ A `BitSlice<_, T>` that begins in the interior of an element and","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":251040,"byte_end":251108,"line_start":1875,"line_end":1875,"column_start":2,"column_end":70}},{"value":"/ contains the maximum number of bits will extend one element past the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":251110,"byte_end":251182,"line_start":1876,"line_end":1876,"column_start":2,"column_end":74}},{"value":"/ cutoff that would occur if the slice began at the zeroth bit. Such a","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":251184,"byte_end":251256,"line_start":1877,"line_end":1877,"column_start":2,"column_end":74}},{"value":"/ slice must be manually constructed, but will not otherwise fail.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":251258,"byte_end":251326,"line_start":1878,"line_end":1878,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":251328,"byte_end":251331,"line_start":1879,"line_end":1879,"column_start":2,"column_end":5}},{"value":"/ |Type Bits|Max Elements (32-bit)| Max Elements (64-bit) |","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":251333,"byte_end":251394,"line_start":1880,"line_end":1880,"column_start":2,"column_end":63}},{"value":"/ |--------:|--------------------:|----------------------:|","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":251396,"byte_end":251457,"line_start":1881,"line_end":1881,"column_start":2,"column_end":63}},{"value":"/ |        8|    `0x0400_0001`    |`0x0400_0000_0000_0001`|","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":251459,"byte_end":251520,"line_start":1882,"line_end":1882,"column_start":2,"column_end":63}},{"value":"/ |       16|    `0x0200_0001`    |`0x0200_0000_0000_0001`|","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":251522,"byte_end":251583,"line_start":1883,"line_end":1883,"column_start":2,"column_end":63}},{"value":"/ |       32|    `0x0100_0001`    |`0x0100_0000_0000_0001`|","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":251585,"byte_end":251646,"line_start":1884,"line_end":1884,"column_start":2,"column_end":63}},{"value":"/ |       64|    `0x0080_0001`    |`0x0080_0000_0000_0001`|","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":251648,"byte_end":251709,"line_start":1885,"line_end":1885,"column_start":2,"column_end":63}}]},{"kind":"Function","id":{"krate":0,"index":1221},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":253543,"byte_end":253562,"line_start":1935,"line_end":1935,"column_start":15,"column_end":34},"name":"bits_from_raw_parts","qualname":"::slice::bits_from_raw_parts","value":"pub unsafe fn bits_from_raw_parts<'a, O, T>(*const T, u8, usize)\n-> Option<&'a BitSlice<O, T>> where O: BitOrder, T: 'a + BitStore + BitMemory","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `&BitSlice` reference from its component data.","sig":null,"attributes":[{"value":"* Constructs a `&BitSlice` reference from its component data.\n\nThis is logically equivalent to [`slice::from_raw_parts`] for `[T]`.\n\n# Lifetimes\n\n- `'a`: The lifetime of the returned bitslice handle. This must be no longer\n  than the duration of the referent region, as it is illegal for references to\n  dangle.\n\n# Type Parameters\n\n- `O`: The ordering of bits within elements `T`.\n- `T`: The type of each memory element in the backing storage region.\n\n# Parameters\n\n- `addr`: The base address of the memory region that the `BitSlice` covers.\n- `head`: The index of the first live bit in `*addr`, at which the `BitSlice`\n  begins. This is required to be in the range `0 .. T::Mem::BITS`.\n- `bits`: The number of live bits, beginning at `head` in `*addr`, that the\n  `BitSlice` contains. This must be no greater than `BitSlice::MAX_BITS`.\n\n# Returns\n\nIf the input parameters are valid, this returns `Some` shared reference to a\n`BitSlice`. The failure conditions causing this to return `None` are:\n\n- `head` is not less than [`T::Mem::BITS`]\n- `bits` is greater than [`BitSlice::<O, T>::MAX_BITS`]\n- `addr` is not adequately aligned to `T`\n- `addr` is so high in the memory space that the region wraps to the base of the\n  memory space\n\n# Safety\n\nThe memory region described by the returned `BitSlice` must be validly allocated\nwithin the caller’s memory management system. It must also not be modified for\nthe duration of the lifetime `'a`, unless the `T` type parameter permits safe\nshared mutation.\n\n[`BitSlice::<O, T>::MAX_BITS`]: struct.BitSlice.html#associatedconstant.MAX_BITS\n[`T::Mem::BITS`]: ../mem/trait.BitMemory.html#associatedconstant.BITS\n[`slice::from_raw_parts`]: https://doc.rust-lang.org/core/slice/fn.from_raw_parts.html\n**/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":251772,"byte_end":253518,"line_start":1889,"line_end":1933,"column_start":1,"column_end":4}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":253519,"byte_end":253528,"line_start":1934,"line_end":1934,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1225},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":255586,"byte_end":255609,"line_start":1994,"line_end":1994,"column_start":15,"column_end":38},"name":"bits_from_raw_parts_mut","qualname":"::slice::bits_from_raw_parts_mut","value":"pub unsafe fn bits_from_raw_parts_mut<'a, O, T>(*mut T, u8, usize)\n-> Option<&'a mut BitSlice<O, T>> where O: BitOrder, T: 'a + BitStore +\nBitMemory","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `&mut BitSlice` reference from its component data.","sig":null,"attributes":[{"value":"* Constructs a `&mut BitSlice` reference from its component data.\n\nThis is logically equivalent to [`slice::from_raw_parts_mut`] for `[T]`.\n\n# Lifetimes\n\n- `'a`: The lifetime of the returned bitslice handle. This must be no longer\n  than the duration of the referent region, as it is illegal for references to\n  dangle.\n\n# Type Parameters\n\n- `O`: The ordering of bits within elements `T`.\n- `T`: The type of each memory element in the backing storage region.\n\n# Parameters\n\n- `addr`: The base address of the memory region that the `BitSlice` covers.\n- `head`: The index of the first live bit in `*addr`, at which the `BitSlice`\n  begins. This is required to be in the range `0 .. T::Mem::BITS`.\n- `bits`: The number of live bits, beginning at `head` in `*addr`, that the\n  `BitSlice` contains. This must be no greater than `BitSlice::MAX_BITS`.\n\n# Returns\n\nIf the input parameters are valid, this returns `Some` shared reference to a\n`BitSlice`. The failure conditions causing this to return `None` are:\n\n- `head` is not less than [`T::Mem::BITS`]\n- `bits` is greater than [`BitSlice::<O, T>::MAX_BITS`]\n- `addr` is not adequately aligned to `T`\n- `addr` is so high in the memory space that the region wraps to the base of the\n  memory space\n\n# Safety\n\nThe memory region described by the returned `BitSlice` must be validly allocated\nwithin the caller’s memory management system. It must also not be reachable for\nthe lifetime `'a` by any path other than references derived from the return\nvalue.\n\n[`BitSlice::<O, T>::MAX_BITS`]: struct.BitSlice.html#associatedconstant.MAX_BITS\n[`T::Mem::BITS`]: ../mem/trait.BitMemory.html#associatedconstant.BITS\n[`slice::from_raw_parts_mut`]: https://doc.rust-lang.org/core/slice/fn.from_raw_parts_mut.html\n**/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":253810,"byte_end":255561,"line_start":1948,"line_end":1992,"column_start":1,"column_end":4}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":255562,"byte_end":255571,"line_start":1993,"line_end":1993,"column_start":1,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":1350},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":257511,"byte_end":257514,"line_start":80,"line_end":80,"column_start":9,"column_end":12},"name":"len","qualname":"<BitSlice<O, T>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bits in the slice.","sig":null,"attributes":[{"value":"/ Returns the number of bits in the slice.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":257154,"byte_end":257198,"line_start":64,"line_end":64,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":257200,"byte_end":257203,"line_start":65,"line_end":65,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":257205,"byte_end":257219,"line_start":66,"line_end":66,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":257221,"byte_end":257224,"line_start":67,"line_end":67,"column_start":2,"column_end":5}},{"value":"/ [`slice::len`](https://doc.rust-lang.org/std/primitive.slice.html#method.len)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":257226,"byte_end":257307,"line_start":68,"line_end":68,"column_start":2,"column_end":83}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":257309,"byte_end":257312,"line_start":69,"line_end":69,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":257314,"byte_end":257328,"line_start":70,"line_end":70,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":257330,"byte_end":257333,"line_start":71,"line_end":71,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":257335,"byte_end":257346,"line_start":72,"line_end":72,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":257348,"byte_end":257375,"line_start":73,"line_end":73,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":257377,"byte_end":257380,"line_start":74,"line_end":74,"column_start":2,"column_end":5}},{"value":"/ let data = 0u32;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":257382,"byte_end":257402,"line_start":75,"line_end":75,"column_start":2,"column_end":22}},{"value":"/ let bits = data.view_bits::<LocalBits>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":257404,"byte_end":257449,"line_start":76,"line_end":76,"column_start":2,"column_end":47}},{"value":"/ assert_eq!(bits.len(), 32);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":257451,"byte_end":257482,"line_start":77,"line_end":77,"column_start":2,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":257484,"byte_end":257491,"line_start":78,"line_end":78,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":257493,"byte_end":257502,"line_start":79,"line_end":79,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1351},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":257951,"byte_end":257959,"line_start":99,"line_end":99,"column_start":9,"column_end":17},"name":"is_empty","qualname":"<BitSlice<O, T>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the slice has a length of 0.","sig":null,"attributes":[{"value":"/ Returns `true` if the slice has a length of 0.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":257560,"byte_end":257610,"line_start":84,"line_end":84,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":257612,"byte_end":257615,"line_start":85,"line_end":85,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":257617,"byte_end":257631,"line_start":86,"line_end":86,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":257633,"byte_end":257636,"line_start":87,"line_end":87,"column_start":2,"column_end":5}},{"value":"/ [`slice::is_empty`](https://doc.rust-lang.org/std/primitive.slice.html#method.is_empty)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":257638,"byte_end":257729,"line_start":88,"line_end":88,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":257731,"byte_end":257734,"line_start":89,"line_end":89,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":257736,"byte_end":257750,"line_start":90,"line_end":90,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":257752,"byte_end":257755,"line_start":91,"line_end":91,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":257757,"byte_end":257768,"line_start":92,"line_end":92,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":257770,"byte_end":257797,"line_start":93,"line_end":93,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":257799,"byte_end":257802,"line_start":94,"line_end":94,"column_start":2,"column_end":5}},{"value":"/ assert!(BitSlice::<LocalBits, u8>::empty().is_empty());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":257804,"byte_end":257863,"line_start":95,"line_end":95,"column_start":2,"column_end":61}},{"value":"/ assert!(!(0u32.view_bits::<LocalBits>()).is_empty());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":257865,"byte_end":257922,"line_start":96,"line_end":96,"column_start":2,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":257924,"byte_end":257931,"line_start":97,"line_end":97,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":257933,"byte_end":257942,"line_start":98,"line_end":98,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1352},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":258857,"byte_end":258862,"line_start":129,"line_end":129,"column_start":9,"column_end":14},"name":"first","qualname":"<BitSlice<O, T>>::first","value":"pub fn first(&Self) -> Option<&bool>","parent":null,"children":[],"decl_id":null,"docs":" Returns the first bit of the slice, or `None` if it is empty.","sig":null,"attributes":[{"value":"/ Returns the first bit of the slice, or `None` if it is empty.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":258371,"byte_end":258436,"line_start":110,"line_end":110,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":258438,"byte_end":258441,"line_start":111,"line_end":111,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":258443,"byte_end":258457,"line_start":112,"line_end":112,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":258459,"byte_end":258462,"line_start":113,"line_end":113,"column_start":2,"column_end":5}},{"value":"/ [`slice::first`](https://doc.rust-lang.org/std/primitive.slice.html#method.first)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":258464,"byte_end":258549,"line_start":114,"line_end":114,"column_start":2,"column_end":87}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":258551,"byte_end":258554,"line_start":115,"line_end":115,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":258556,"byte_end":258570,"line_start":116,"line_end":116,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":258572,"byte_end":258575,"line_start":117,"line_end":117,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":258577,"byte_end":258588,"line_start":118,"line_end":118,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":258590,"byte_end":258617,"line_start":119,"line_end":119,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":258619,"byte_end":258622,"line_start":120,"line_end":120,"column_start":2,"column_end":5}},{"value":"/ let data = 1u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":258624,"byte_end":258643,"line_start":121,"line_end":121,"column_start":2,"column_end":21}},{"value":"/ let bits = data.view_bits::<Lsb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":258645,"byte_end":258685,"line_start":122,"line_end":122,"column_start":2,"column_end":42}},{"value":"/ assert_eq!(Some(&true), bits.first());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":258687,"byte_end":258729,"line_start":123,"line_end":123,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":258731,"byte_end":258734,"line_start":124,"line_end":124,"column_start":2,"column_end":5}},{"value":"/ let empty = BitSlice::<LocalBits, usize>::empty();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":258736,"byte_end":258790,"line_start":125,"line_end":125,"column_start":2,"column_end":56}},{"value":"/ assert_eq!(None, empty.first());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":258792,"byte_end":258828,"line_start":126,"line_end":126,"column_start":2,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":258830,"byte_end":258837,"line_start":127,"line_end":127,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":258839,"byte_end":258848,"line_start":128,"line_end":128,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1353},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":259666,"byte_end":259675,"line_start":161,"line_end":161,"column_start":9,"column_end":18},"name":"first_mut","qualname":"<BitSlice<O, T>>::first_mut","value":"pub fn first_mut(&mut Self) -> Option<BitMut<, O, T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable pointer to the first bit of the slice, or `None` if it\n is empty.","sig":null,"attributes":[{"value":"/ Returns a mutable pointer to the first bit of the slice, or `None` if it","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":258908,"byte_end":258984,"line_start":133,"line_end":133,"column_start":2,"column_end":78}},{"value":"/ is empty.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":258986,"byte_end":258999,"line_start":134,"line_end":134,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":259001,"byte_end":259004,"line_start":135,"line_end":135,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":259006,"byte_end":259020,"line_start":136,"line_end":136,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":259022,"byte_end":259025,"line_start":137,"line_end":137,"column_start":2,"column_end":5}},{"value":"/ [`slice::first_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.first_mut)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":259027,"byte_end":259120,"line_start":138,"line_end":138,"column_start":2,"column_end":95}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":259122,"byte_end":259125,"line_start":139,"line_end":139,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":259127,"byte_end":259148,"line_start":140,"line_end":140,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":259150,"byte_end":259153,"line_start":141,"line_end":141,"column_start":2,"column_end":5}},{"value":"/ This crate cannot manifest `&mut bool` references, and must use the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":259155,"byte_end":259226,"line_start":142,"line_end":142,"column_start":2,"column_end":73}},{"value":"/ `BitMut` proxy type where `&mut bool` exists in the standard library","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":259228,"byte_end":259300,"line_start":143,"line_end":143,"column_start":2,"column_end":74}},{"value":"/ API. The proxy value must be bound as `mut` in order to write through","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":259302,"byte_end":259375,"line_start":144,"line_end":144,"column_start":2,"column_end":75}},{"value":"/ it.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":259377,"byte_end":259384,"line_start":145,"line_end":145,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":259386,"byte_end":259389,"line_start":146,"line_end":146,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":259391,"byte_end":259405,"line_start":147,"line_end":147,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":259407,"byte_end":259410,"line_start":148,"line_end":148,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":259412,"byte_end":259423,"line_start":149,"line_end":149,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":259425,"byte_end":259452,"line_start":150,"line_end":150,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":259454,"byte_end":259457,"line_start":151,"line_end":151,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":259459,"byte_end":259482,"line_start":152,"line_end":152,"column_start":2,"column_end":25}},{"value":"/ let bits = data.view_bits_mut::<Lsb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":259484,"byte_end":259528,"line_start":153,"line_end":153,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":259530,"byte_end":259533,"line_start":154,"line_end":154,"column_start":2,"column_end":5}},{"value":"/ if let Some(mut first) = bits.first_mut() {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":259535,"byte_end":259582,"line_start":155,"line_end":155,"column_start":2,"column_end":49}},{"value":"/   *first = true;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":259584,"byte_end":259604,"line_start":156,"line_end":156,"column_start":2,"column_end":22}},{"value":"/ }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":259606,"byte_end":259611,"line_start":157,"line_end":157,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(data, 1);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":259613,"byte_end":259637,"line_start":158,"line_end":158,"column_start":2,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":259639,"byte_end":259646,"line_start":159,"line_end":159,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":259648,"byte_end":259657,"line_start":160,"line_end":160,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1354},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":260200,"byte_end":260211,"line_start":184,"line_end":184,"column_start":9,"column_end":20},"name":"split_first","qualname":"<BitSlice<O, T>>::split_first","value":"pub fn split_first(&Self) -> Option<(&bool, &Self)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the first and all the rest of the bits of the slice, or `None`\n if it is empty.","sig":null,"attributes":[{"value":"/ Returns the first and all the rest of the bits of the slice, or `None`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":259736,"byte_end":259810,"line_start":165,"line_end":165,"column_start":2,"column_end":76}},{"value":"/ if it is empty.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":259812,"byte_end":259831,"line_start":166,"line_end":166,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":259833,"byte_end":259836,"line_start":167,"line_end":167,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":259838,"byte_end":259852,"line_start":168,"line_end":168,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":259854,"byte_end":259857,"line_start":169,"line_end":169,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_first`](https://doc.rust-lang.org/std/primitive.slice.html#split_first)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":259859,"byte_end":259949,"line_start":170,"line_end":170,"column_start":2,"column_end":92}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":259951,"byte_end":259954,"line_start":171,"line_end":171,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":259956,"byte_end":259970,"line_start":172,"line_end":172,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":259972,"byte_end":259975,"line_start":173,"line_end":173,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":259977,"byte_end":259988,"line_start":174,"line_end":174,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":259990,"byte_end":260017,"line_start":175,"line_end":175,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":260019,"byte_end":260022,"line_start":176,"line_end":176,"column_start":2,"column_end":5}},{"value":"/ let data = 1u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":260024,"byte_end":260043,"line_start":177,"line_end":177,"column_start":2,"column_end":21}},{"value":"/ let bits = data.view_bits::<Lsb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":260045,"byte_end":260085,"line_start":178,"line_end":178,"column_start":2,"column_end":42}},{"value":"/ if let Some((first, rest)) = bits.split_first() {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":260087,"byte_end":260140,"line_start":179,"line_end":179,"column_start":2,"column_end":55}},{"value":"/   assert!(*first);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":260142,"byte_end":260164,"line_start":180,"line_end":180,"column_start":2,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":260166,"byte_end":260171,"line_start":181,"line_end":181,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":260173,"byte_end":260180,"line_start":182,"line_end":182,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":260182,"byte_end":260191,"line_start":183,"line_end":183,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1355},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":261657,"byte_end":261672,"line_start":232,"line_end":232,"column_start":9,"column_end":24},"name":"split_first_mut","qualname":"<BitSlice<O, T>>::split_first_mut","value":"pub fn split_first_mut(&mut Self)\n-> Option<(BitMut<, O, T::Alias>, &mut BitSlice<O, T::Alias>)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the first and all the rest of the bits of the slice, or `None`\n if it is empty.","sig":null,"attributes":[{"value":"/ Returns the first and all the rest of the bits of the slice, or `None`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":260405,"byte_end":260479,"line_start":194,"line_end":194,"column_start":2,"column_end":76}},{"value":"/ if it is empty.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":260481,"byte_end":260500,"line_start":195,"line_end":195,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":260502,"byte_end":260505,"line_start":196,"line_end":196,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":260507,"byte_end":260521,"line_start":197,"line_end":197,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":260523,"byte_end":260526,"line_start":198,"line_end":198,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_first_mut`](https://doc.rust-lang.org/std/primitive.slice.html#split_first_mut)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":260528,"byte_end":260626,"line_start":199,"line_end":199,"column_start":2,"column_end":100}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":260628,"byte_end":260631,"line_start":200,"line_end":200,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":260633,"byte_end":260654,"line_start":201,"line_end":201,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":260656,"byte_end":260659,"line_start":202,"line_end":202,"column_start":2,"column_end":5}},{"value":"/ This crate cannot manifest `&mut bool` references, and must use the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":260661,"byte_end":260732,"line_start":203,"line_end":203,"column_start":2,"column_end":73}},{"value":"/ `BitMut` proxy type where `&mut bool` exists in the standard library","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":260734,"byte_end":260806,"line_start":204,"line_end":204,"column_start":2,"column_end":74}},{"value":"/ API. The proxy value must be bound as `mut` in order to write through","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":260808,"byte_end":260881,"line_start":205,"line_end":205,"column_start":2,"column_end":75}},{"value":"/ it.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":260883,"byte_end":260890,"line_start":206,"line_end":206,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":260892,"byte_end":260895,"line_start":207,"line_end":207,"column_start":2,"column_end":5}},{"value":"/ Because the references are permitted to use the same memory address,","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":260897,"byte_end":260969,"line_start":208,"line_end":208,"column_start":2,"column_end":74}},{"value":"/ they are marked as aliasing in order to satisfy Rust’s requirements","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":260971,"byte_end":261044,"line_start":209,"line_end":209,"column_start":2,"column_end":73}},{"value":"/ about freedom from data races.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":261046,"byte_end":261080,"line_start":210,"line_end":210,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":261082,"byte_end":261085,"line_start":211,"line_end":211,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":261087,"byte_end":261101,"line_start":212,"line_end":212,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":261103,"byte_end":261106,"line_start":213,"line_end":213,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":261108,"byte_end":261119,"line_start":214,"line_end":214,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":261121,"byte_end":261148,"line_start":215,"line_end":215,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":261150,"byte_end":261153,"line_start":216,"line_end":216,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0usize;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":261155,"byte_end":261181,"line_start":217,"line_end":217,"column_start":2,"column_end":28}},{"value":"/ let bits = data.view_bits_mut::<Lsb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":261183,"byte_end":261227,"line_start":218,"line_end":218,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":261229,"byte_end":261232,"line_start":219,"line_end":219,"column_start":2,"column_end":5}},{"value":"/ if let Some((mut first, rest)) = bits.split_first_mut() {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":261234,"byte_end":261295,"line_start":220,"line_end":220,"column_start":2,"column_end":63}},{"value":"/   *first = true;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":261297,"byte_end":261317,"line_start":221,"line_end":221,"column_start":2,"column_end":22}},{"value":"/   *rest.get_mut(1).unwrap() = true;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":261319,"byte_end":261358,"line_start":222,"line_end":222,"column_start":2,"column_end":41}},{"value":"/ }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":261360,"byte_end":261365,"line_start":223,"line_end":223,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(data, 5);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":261367,"byte_end":261391,"line_start":224,"line_end":224,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":261393,"byte_end":261396,"line_start":225,"line_end":225,"column_start":2,"column_end":5}},{"value":"/ assert!(BitSlice::<LocalBits, usize>::empty_mut().split_first_mut().is_none());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":261398,"byte_end":261481,"line_start":226,"line_end":226,"column_start":2,"column_end":85}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":261483,"byte_end":261490,"line_start":227,"line_end":227,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":261492,"byte_end":261501,"line_start":228,"line_end":228,"column_start":2,"column_end":11}},{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":261615,"byte_end":261648,"line_start":231,"line_end":231,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1356},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":262389,"byte_end":262399,"line_start":264,"line_end":264,"column_start":9,"column_end":19},"name":"split_last","qualname":"<BitSlice<O, T>>::split_last","value":"pub fn split_last(&Self) -> Option<(&bool, &Self)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the last and all the rest of the bits of the slice, or `None` if\n it is empty.","sig":null,"attributes":[{"value":"/ Returns the last and all the rest of the bits of the slice, or `None` if","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":261919,"byte_end":261995,"line_start":244,"line_end":244,"column_start":2,"column_end":78}},{"value":"/ it is empty.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":261997,"byte_end":262013,"line_start":245,"line_end":245,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":262015,"byte_end":262018,"line_start":246,"line_end":246,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":262020,"byte_end":262034,"line_start":247,"line_end":247,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":262036,"byte_end":262039,"line_start":248,"line_end":248,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_last`](https://doc.rust-lang.org/std/primitive.slice.html#method.split_last)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":262041,"byte_end":262136,"line_start":249,"line_end":249,"column_start":2,"column_end":97}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":262138,"byte_end":262141,"line_start":250,"line_end":250,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":262143,"byte_end":262157,"line_start":251,"line_end":251,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":262159,"byte_end":262162,"line_start":252,"line_end":252,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":262164,"byte_end":262175,"line_start":253,"line_end":253,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":262177,"byte_end":262204,"line_start":254,"line_end":254,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":262206,"byte_end":262209,"line_start":255,"line_end":255,"column_start":2,"column_end":5}},{"value":"/ let data = 1u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":262211,"byte_end":262230,"line_start":256,"line_end":256,"column_start":2,"column_end":21}},{"value":"/ let bits = data.view_bits::<Msb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":262232,"byte_end":262272,"line_start":257,"line_end":257,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":262274,"byte_end":262277,"line_start":258,"line_end":258,"column_start":2,"column_end":5}},{"value":"/ if let Some((last, rest)) = bits.split_last() {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":262279,"byte_end":262330,"line_start":259,"line_end":259,"column_start":2,"column_end":53}},{"value":"/   assert!(*last);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":262332,"byte_end":262353,"line_start":260,"line_end":260,"column_start":2,"column_end":23}},{"value":"/ }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":262355,"byte_end":262360,"line_start":261,"line_end":261,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":262362,"byte_end":262369,"line_start":262,"line_end":262,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":262371,"byte_end":262380,"line_start":263,"line_end":263,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1357},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":263862,"byte_end":263876,"line_start":312,"line_end":312,"column_start":9,"column_end":23},"name":"split_last_mut","qualname":"<BitSlice<O, T>>::split_last_mut","value":"pub fn split_last_mut(&mut Self)\n-> Option<(BitMut<, O, T::Alias>, &mut BitSlice<O, T::Alias>)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the last and all the rest of the bits of the slice, or `None` if\n it is empty.","sig":null,"attributes":[{"value":"/ Returns the last and all the rest of the bits of the slice, or `None` if","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":262613,"byte_end":262689,"line_start":274,"line_end":274,"column_start":2,"column_end":78}},{"value":"/ it is empty.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":262691,"byte_end":262707,"line_start":275,"line_end":275,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":262709,"byte_end":262712,"line_start":276,"line_end":276,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":262714,"byte_end":262728,"line_start":277,"line_end":277,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":262730,"byte_end":262733,"line_start":278,"line_end":278,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_last_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.split_last_mut)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":262735,"byte_end":262838,"line_start":279,"line_end":279,"column_start":2,"column_end":105}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":262840,"byte_end":262843,"line_start":280,"line_end":280,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":262845,"byte_end":262866,"line_start":281,"line_end":281,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":262868,"byte_end":262871,"line_start":282,"line_end":282,"column_start":2,"column_end":5}},{"value":"/ This crate cannot manifest `&mut bool` references, and must use the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":262873,"byte_end":262944,"line_start":283,"line_end":283,"column_start":2,"column_end":73}},{"value":"/ `BitMut` proxy type where `&mut bool` exists in the standard library","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":262946,"byte_end":263018,"line_start":284,"line_end":284,"column_start":2,"column_end":74}},{"value":"/ API. The proxy value must be bound as `mut` in order to write through","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":263020,"byte_end":263093,"line_start":285,"line_end":285,"column_start":2,"column_end":75}},{"value":"/ it.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":263095,"byte_end":263102,"line_start":286,"line_end":286,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":263104,"byte_end":263107,"line_start":287,"line_end":287,"column_start":2,"column_end":5}},{"value":"/ Because the references are permitted to use the same memory address,","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":263109,"byte_end":263181,"line_start":288,"line_end":288,"column_start":2,"column_end":74}},{"value":"/ they are marked as aliasing in order to satisfy Rust’s requirements","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":263183,"byte_end":263256,"line_start":289,"line_end":289,"column_start":2,"column_end":73}},{"value":"/ about freedom from data races.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":263258,"byte_end":263292,"line_start":290,"line_end":290,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":263294,"byte_end":263297,"line_start":291,"line_end":291,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":263299,"byte_end":263313,"line_start":292,"line_end":292,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":263315,"byte_end":263318,"line_start":293,"line_end":293,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":263320,"byte_end":263331,"line_start":294,"line_end":294,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":263333,"byte_end":263360,"line_start":295,"line_end":295,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":263362,"byte_end":263365,"line_start":296,"line_end":296,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":263367,"byte_end":263390,"line_start":297,"line_end":297,"column_start":2,"column_end":25}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":263392,"byte_end":263436,"line_start":298,"line_end":298,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":263438,"byte_end":263441,"line_start":299,"line_end":299,"column_start":2,"column_end":5}},{"value":"/ if let Some((mut last, rest)) = bits.split_last_mut() {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":263443,"byte_end":263502,"line_start":300,"line_end":300,"column_start":2,"column_end":61}},{"value":"/   *last = true;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":263504,"byte_end":263523,"line_start":301,"line_end":301,"column_start":2,"column_end":21}},{"value":"/   *rest.get_mut(5).unwrap() = true;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":263525,"byte_end":263564,"line_start":302,"line_end":302,"column_start":2,"column_end":41}},{"value":"/ }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":263566,"byte_end":263571,"line_start":303,"line_end":303,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(data, 5);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":263573,"byte_end":263597,"line_start":304,"line_end":304,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":263599,"byte_end":263602,"line_start":305,"line_end":305,"column_start":2,"column_end":5}},{"value":"/ assert!(BitSlice::<LocalBits, usize>::empty_mut().split_last_mut().is_none());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":263604,"byte_end":263686,"line_start":306,"line_end":306,"column_start":2,"column_end":84}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":263688,"byte_end":263695,"line_start":307,"line_end":307,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":263697,"byte_end":263706,"line_start":308,"line_end":308,"column_start":2,"column_end":11}},{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":263820,"byte_end":263853,"line_start":311,"line_end":311,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1358},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":264612,"byte_end":264616,"line_start":343,"line_end":343,"column_start":9,"column_end":13},"name":"last","qualname":"<BitSlice<O, T>>::last","value":"pub fn last(&Self) -> Option<&bool>","parent":null,"children":[],"decl_id":null,"docs":" Returns the last bit of the slice, or `None` if it is empty.","sig":null,"attributes":[{"value":"/ Returns the last bit of the slice, or `None` if it is empty.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":264131,"byte_end":264195,"line_start":324,"line_end":324,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":264197,"byte_end":264200,"line_start":325,"line_end":325,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":264202,"byte_end":264216,"line_start":326,"line_end":326,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":264218,"byte_end":264221,"line_start":327,"line_end":327,"column_start":2,"column_end":5}},{"value":"/ [`slice::last`](https://doc.rust-lang.org/std/primitive.slice.html#method.last)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":264223,"byte_end":264306,"line_start":328,"line_end":328,"column_start":2,"column_end":85}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":264308,"byte_end":264311,"line_start":329,"line_end":329,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":264313,"byte_end":264327,"line_start":330,"line_end":330,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":264329,"byte_end":264332,"line_start":331,"line_end":331,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":264334,"byte_end":264345,"line_start":332,"line_end":332,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":264347,"byte_end":264374,"line_start":333,"line_end":333,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":264376,"byte_end":264379,"line_start":334,"line_end":334,"column_start":2,"column_end":5}},{"value":"/ let data = 1u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":264381,"byte_end":264400,"line_start":335,"line_end":335,"column_start":2,"column_end":21}},{"value":"/ let bits = data.view_bits::<Msb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":264402,"byte_end":264442,"line_start":336,"line_end":336,"column_start":2,"column_end":42}},{"value":"/ assert_eq!(Some(&true), bits.last());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":264444,"byte_end":264485,"line_start":337,"line_end":337,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":264487,"byte_end":264490,"line_start":338,"line_end":338,"column_start":2,"column_end":5}},{"value":"/ let empty = BitSlice::<LocalBits, usize>::empty();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":264492,"byte_end":264546,"line_start":339,"line_end":339,"column_start":2,"column_end":56}},{"value":"/ assert_eq!(None, empty.last());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":264548,"byte_end":264583,"line_start":340,"line_end":340,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":264585,"byte_end":264592,"line_start":341,"line_end":341,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":264594,"byte_end":264603,"line_start":342,"line_end":342,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1359},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":265495,"byte_end":265503,"line_start":378,"line_end":378,"column_start":9,"column_end":17},"name":"last_mut","qualname":"<BitSlice<O, T>>::last_mut","value":"pub fn last_mut(&mut Self) -> Option<BitMut<, O, T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable pointer to the last bit of the slice, or `None` if it\n is empty.","sig":null,"attributes":[{"value":"/ Returns a mutable pointer to the last bit of the slice, or `None` if it","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":264743,"byte_end":264818,"line_start":350,"line_end":350,"column_start":2,"column_end":77}},{"value":"/ is empty.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":264820,"byte_end":264833,"line_start":351,"line_end":351,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":264835,"byte_end":264838,"line_start":352,"line_end":352,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":264840,"byte_end":264854,"line_start":353,"line_end":353,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":264856,"byte_end":264859,"line_start":354,"line_end":354,"column_start":2,"column_end":5}},{"value":"/ [`slice::last_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.last_mut)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":264861,"byte_end":264952,"line_start":355,"line_end":355,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":264954,"byte_end":264957,"line_start":356,"line_end":356,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":264959,"byte_end":264980,"line_start":357,"line_end":357,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":264982,"byte_end":264985,"line_start":358,"line_end":358,"column_start":2,"column_end":5}},{"value":"/ This crate cannot manifest `&mut bool` references, and must use the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":264987,"byte_end":265058,"line_start":359,"line_end":359,"column_start":2,"column_end":73}},{"value":"/ `BitMut` proxy type where `&mut bool` exists in the standard library","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":265060,"byte_end":265132,"line_start":360,"line_end":360,"column_start":2,"column_end":74}},{"value":"/ API. The proxy value must be bound as `mut` in order to write through","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":265134,"byte_end":265207,"line_start":361,"line_end":361,"column_start":2,"column_end":75}},{"value":"/ it.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":265209,"byte_end":265216,"line_start":362,"line_end":362,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":265218,"byte_end":265221,"line_start":363,"line_end":363,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":265223,"byte_end":265237,"line_start":364,"line_end":364,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":265239,"byte_end":265242,"line_start":365,"line_end":365,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":265244,"byte_end":265255,"line_start":366,"line_end":366,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":265257,"byte_end":265284,"line_start":367,"line_end":367,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":265286,"byte_end":265289,"line_start":368,"line_end":368,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":265291,"byte_end":265314,"line_start":369,"line_end":369,"column_start":2,"column_end":25}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":265316,"byte_end":265360,"line_start":370,"line_end":370,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":265362,"byte_end":265365,"line_start":371,"line_end":371,"column_start":2,"column_end":5}},{"value":"/ if let Some(mut last) = bits.last_mut() {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":265367,"byte_end":265412,"line_start":372,"line_end":372,"column_start":2,"column_end":47}},{"value":"/   *last = true;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":265414,"byte_end":265433,"line_start":373,"line_end":373,"column_start":2,"column_end":21}},{"value":"/ }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":265435,"byte_end":265440,"line_start":374,"line_end":374,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(data, 1);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":265442,"byte_end":265466,"line_start":375,"line_end":375,"column_start":2,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":265468,"byte_end":265475,"line_start":376,"line_end":376,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":265477,"byte_end":265486,"line_start":377,"line_end":377,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1360},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":266417,"byte_end":266420,"line_start":411,"line_end":411,"column_start":9,"column_end":12},"name":"get","qualname":"<BitSlice<O, T>>::get","value":"pub fn get<'a, I>(&'a Self, I) -> Option<I::Immut> where I: BitSliceIndex","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to an element or subslice depending on the type of\n index.","sig":null,"attributes":[{"value":"/ Returns a reference to an element or subslice depending on the type of","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":265645,"byte_end":265719,"line_start":385,"line_end":385,"column_start":2,"column_end":76}},{"value":"/ index.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":265721,"byte_end":265731,"line_start":386,"line_end":386,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":265733,"byte_end":265736,"line_start":387,"line_end":387,"column_start":2,"column_end":5}},{"value":"/ - If given a position, returns a reference to the element at that","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":265738,"byte_end":265807,"line_start":388,"line_end":388,"column_start":2,"column_end":71}},{"value":"/   position or `None` if out of bounds.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":265809,"byte_end":265851,"line_start":389,"line_end":389,"column_start":2,"column_end":44}},{"value":"/ - If given a range, returns the subslice corresponding to that range, or","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":265853,"byte_end":265929,"line_start":390,"line_end":390,"column_start":2,"column_end":78}},{"value":"/   `None` if out of bounds.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":265931,"byte_end":265961,"line_start":391,"line_end":391,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":265963,"byte_end":265966,"line_start":392,"line_end":392,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":265968,"byte_end":265982,"line_start":393,"line_end":393,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":265984,"byte_end":265987,"line_start":394,"line_end":394,"column_start":2,"column_end":5}},{"value":"/ [`slice::get`](https://doc.rust-lang.org/std/primitive.slice.html#method.get)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":265989,"byte_end":266070,"line_start":395,"line_end":395,"column_start":2,"column_end":83}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":266072,"byte_end":266075,"line_start":396,"line_end":396,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":266077,"byte_end":266091,"line_start":397,"line_end":397,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":266093,"byte_end":266096,"line_start":398,"line_end":398,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":266098,"byte_end":266109,"line_start":399,"line_end":399,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":266111,"byte_end":266138,"line_start":400,"line_end":400,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":266140,"byte_end":266143,"line_start":401,"line_end":401,"column_start":2,"column_end":5}},{"value":"/ let data = 2u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":266145,"byte_end":266164,"line_start":402,"line_end":402,"column_start":2,"column_end":21}},{"value":"/ let bits = data.view_bits::<Lsb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":266166,"byte_end":266206,"line_start":403,"line_end":403,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":266208,"byte_end":266211,"line_start":404,"line_end":404,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(Some(&true), bits.get(1));","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":266213,"byte_end":266254,"line_start":405,"line_end":405,"column_start":2,"column_end":43}},{"value":"/ assert_eq!(Some(&bits[1 .. 3]), bits.get(1 .. 3));","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":266256,"byte_end":266310,"line_start":406,"line_end":406,"column_start":2,"column_end":56}},{"value":"/ assert_eq!(None, bits.get(9));","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":266312,"byte_end":266346,"line_start":407,"line_end":407,"column_start":2,"column_end":36}},{"value":"/ assert_eq!(None, bits.get(8 .. 10));","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":266348,"byte_end":266388,"line_start":408,"line_end":408,"column_start":2,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":266390,"byte_end":266397,"line_start":409,"line_end":409,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":266399,"byte_end":266408,"line_start":410,"line_end":410,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1363},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":267227,"byte_end":267234,"line_start":442,"line_end":442,"column_start":9,"column_end":16},"name":"get_mut","qualname":"<BitSlice<O, T>>::get_mut","value":"pub fn get_mut<'a, I>(&'a mut Self, I) -> Option<I::Mut> where\nI: BitSliceIndex","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to an element or subslice depending on the\n type of index (see [`get`]) or `None` if the index is out of bounds.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to an element or subslice depending on the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":266527,"byte_end":266601,"line_start":416,"line_end":416,"column_start":2,"column_end":76}},{"value":"/ type of index (see [`get`]) or `None` if the index is out of bounds.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":266603,"byte_end":266675,"line_start":417,"line_end":417,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":266677,"byte_end":266680,"line_start":418,"line_end":418,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":266682,"byte_end":266696,"line_start":419,"line_end":419,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":266698,"byte_end":266701,"line_start":420,"line_end":420,"column_start":2,"column_end":5}},{"value":"/ [`slice::get_mut`](https://doc.rust-lang.org/core/slice/trait.SliceIndex.html#method.get_mut)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":266703,"byte_end":266800,"line_start":421,"line_end":421,"column_start":2,"column_end":99}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":266802,"byte_end":266805,"line_start":422,"line_end":422,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":266807,"byte_end":266828,"line_start":423,"line_end":423,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":266830,"byte_end":266833,"line_start":424,"line_end":424,"column_start":2,"column_end":5}},{"value":"/ When `I` is `usize`, this returns `BitMut` instead of `&mut bool`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":266835,"byte_end":266905,"line_start":425,"line_end":425,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":266907,"byte_end":266910,"line_start":426,"line_end":426,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":266912,"byte_end":266926,"line_start":427,"line_end":427,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":266928,"byte_end":266931,"line_start":428,"line_end":428,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":266933,"byte_end":266944,"line_start":429,"line_end":429,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":266946,"byte_end":266973,"line_start":430,"line_end":430,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":266975,"byte_end":266978,"line_start":431,"line_end":431,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0u16;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":266980,"byte_end":267004,"line_start":432,"line_end":432,"column_start":2,"column_end":26}},{"value":"/ let bits = data.view_bits_mut::<Lsb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":267006,"byte_end":267050,"line_start":433,"line_end":433,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":267052,"byte_end":267055,"line_start":434,"line_end":434,"column_start":2,"column_end":5}},{"value":"/ assert!(!bits.get(1).unwrap());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":267057,"byte_end":267092,"line_start":435,"line_end":435,"column_start":2,"column_end":37}},{"value":"/ *bits.get_mut(1).unwrap() = true;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":267094,"byte_end":267131,"line_start":436,"line_end":436,"column_start":2,"column_end":39}},{"value":"/ assert!(bits.get(1).unwrap());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":267133,"byte_end":267167,"line_start":437,"line_end":437,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":267169,"byte_end":267176,"line_start":438,"line_end":438,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":267178,"byte_end":267181,"line_start":439,"line_end":439,"column_start":2,"column_end":5}},{"value":"/ [`get`]: #method.get","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":267183,"byte_end":267207,"line_start":440,"line_end":440,"column_start":2,"column_end":26}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":267209,"byte_end":267218,"line_start":441,"line_end":441,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1366},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":268441,"byte_end":268454,"line_start":480,"line_end":480,"column_start":16,"column_end":29},"name":"get_unchecked","qualname":"<BitSlice<O, T>>::get_unchecked","value":"pub unsafe fn get_unchecked<'a, I>(&'a Self, I) -> I::Immut where\nI: BitSliceIndex","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to an element or subslice, without doing bounds\n checking.","sig":null,"attributes":[{"value":"/ Returns a reference to an element or subslice, without doing bounds","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":267347,"byte_end":267418,"line_start":447,"line_end":447,"column_start":2,"column_end":73}},{"value":"/ checking.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":267420,"byte_end":267433,"line_start":448,"line_end":448,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":267435,"byte_end":267438,"line_start":449,"line_end":449,"column_start":2,"column_end":5}},{"value":"/ This is generally not recommended; use with caution!","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":267440,"byte_end":267496,"line_start":450,"line_end":450,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":267498,"byte_end":267501,"line_start":451,"line_end":451,"column_start":2,"column_end":5}},{"value":"/ Unlike the original slice function, calling this with an out-of-bounds","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":267503,"byte_end":267577,"line_start":452,"line_end":452,"column_start":2,"column_end":76}},{"value":"/ index is not *technically* compile-time [undefined behavior], as the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":267579,"byte_end":267651,"line_start":453,"line_end":453,"column_start":2,"column_end":74}},{"value":"/ references produced do not actually describe local memory. However, the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":267653,"byte_end":267728,"line_start":454,"line_end":454,"column_start":2,"column_end":77}},{"value":"/ use of an out-of-bounds index will eventually cause an out-of-bounds","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":267730,"byte_end":267802,"line_start":455,"line_end":455,"column_start":2,"column_end":74}},{"value":"/ memory read, which is a runtime safety violation. For a safe alternative","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":267804,"byte_end":267880,"line_start":456,"line_end":456,"column_start":2,"column_end":78}},{"value":"/ see [`get`].","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":267882,"byte_end":267898,"line_start":457,"line_end":457,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":267900,"byte_end":267903,"line_start":458,"line_end":458,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":267905,"byte_end":267919,"line_start":459,"line_end":459,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":267921,"byte_end":267924,"line_start":460,"line_end":460,"column_start":2,"column_end":5}},{"value":"/ [`slice::get_unchecked`](https://doc.rust-lang.org/std/primitive.slice.html#method.get_unchecked)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":267926,"byte_end":268027,"line_start":461,"line_end":461,"column_start":2,"column_end":103}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":268029,"byte_end":268032,"line_start":462,"line_end":462,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":268034,"byte_end":268048,"line_start":463,"line_end":463,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":268050,"byte_end":268053,"line_start":464,"line_end":464,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":268055,"byte_end":268066,"line_start":465,"line_end":465,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":268068,"byte_end":268095,"line_start":466,"line_end":466,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":268097,"byte_end":268100,"line_start":467,"line_end":467,"column_start":2,"column_end":5}},{"value":"/ let data = 2u16;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":268102,"byte_end":268122,"line_start":468,"line_end":468,"column_start":2,"column_end":22}},{"value":"/ let bits = data.view_bits::<Lsb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":268124,"byte_end":268164,"line_start":469,"line_end":469,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":268166,"byte_end":268169,"line_start":470,"line_end":470,"column_start":2,"column_end":5}},{"value":"/ unsafe{","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":268171,"byte_end":268182,"line_start":471,"line_end":471,"column_start":2,"column_end":13}},{"value":"/   assert_eq!(bits.get_unchecked(1), &true);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":268184,"byte_end":268231,"line_start":472,"line_end":472,"column_start":2,"column_end":49}},{"value":"/ }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":268233,"byte_end":268238,"line_start":473,"line_end":473,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":268240,"byte_end":268247,"line_start":474,"line_end":474,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":268249,"byte_end":268252,"line_start":475,"line_end":475,"column_start":2,"column_end":5}},{"value":"/ [`get`]: #method.get","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":268254,"byte_end":268278,"line_start":476,"line_end":476,"column_start":2,"column_end":26}},{"value":"/ [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":268280,"byte_end":268376,"line_start":477,"line_end":477,"column_start":2,"column_end":98}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":268378,"byte_end":268387,"line_start":478,"line_end":478,"column_start":2,"column_end":11}},{"value":"allow(clippy :: missing_safety_doc)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":268389,"byte_end":268425,"line_start":479,"line_end":479,"column_start":2,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1369},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":269725,"byte_end":269742,"line_start":520,"line_end":520,"column_start":16,"column_end":33},"name":"get_unchecked_mut","qualname":"<BitSlice<O, T>>::get_unchecked_mut","value":"pub unsafe fn get_unchecked_mut<'a, I>(&'a mut Self, I) -> I::Mut where\nI: BitSliceIndex","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the output at this location, without\n doing bounds checking.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the output at this location, without","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":268563,"byte_end":268634,"line_start":485,"line_end":485,"column_start":2,"column_end":73}},{"value":"/ doing bounds checking.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":268636,"byte_end":268662,"line_start":486,"line_end":486,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":268664,"byte_end":268667,"line_start":487,"line_end":487,"column_start":2,"column_end":5}},{"value":"/ This is generally not recommended; use with caution!","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":268669,"byte_end":268725,"line_start":488,"line_end":488,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":268727,"byte_end":268730,"line_start":489,"line_end":489,"column_start":2,"column_end":5}},{"value":"/ Unlike the original slice function, calling this with an out-of-bounds","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":268732,"byte_end":268806,"line_start":490,"line_end":490,"column_start":2,"column_end":76}},{"value":"/ index is not *technically* compile-time [undefined behavior], as the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":268808,"byte_end":268880,"line_start":491,"line_end":491,"column_start":2,"column_end":74}},{"value":"/ references produced do not actually describe local memory. However, the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":268882,"byte_end":268957,"line_start":492,"line_end":492,"column_start":2,"column_end":77}},{"value":"/ use of an out-of-bounds index will eventually cause an out-of-bounds","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":268959,"byte_end":269031,"line_start":493,"line_end":493,"column_start":2,"column_end":74}},{"value":"/ memory write, which is a runtime safety violation. For a safe","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":269033,"byte_end":269098,"line_start":494,"line_end":494,"column_start":2,"column_end":67}},{"value":"/ alternative see [`get_mut`].","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":269100,"byte_end":269132,"line_start":495,"line_end":495,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":269134,"byte_end":269137,"line_start":496,"line_end":496,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":269139,"byte_end":269153,"line_start":497,"line_end":497,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":269155,"byte_end":269158,"line_start":498,"line_end":498,"column_start":2,"column_end":5}},{"value":"/ [`slice::get_unchecked_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.get_unchecked_mut)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":269160,"byte_end":269269,"line_start":499,"line_end":499,"column_start":2,"column_end":111}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":269271,"byte_end":269274,"line_start":500,"line_end":500,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":269276,"byte_end":269290,"line_start":501,"line_end":501,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":269292,"byte_end":269295,"line_start":502,"line_end":502,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":269297,"byte_end":269308,"line_start":503,"line_end":503,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":269310,"byte_end":269337,"line_start":504,"line_end":504,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":269339,"byte_end":269342,"line_start":505,"line_end":505,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0u16;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":269344,"byte_end":269368,"line_start":506,"line_end":506,"column_start":2,"column_end":26}},{"value":"/ let bits = data.view_bits_mut::<Lsb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":269370,"byte_end":269414,"line_start":507,"line_end":507,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":269416,"byte_end":269419,"line_start":508,"line_end":508,"column_start":2,"column_end":5}},{"value":"/ unsafe {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":269421,"byte_end":269433,"line_start":509,"line_end":509,"column_start":2,"column_end":14}},{"value":"/   let mut bit = bits.get_unchecked_mut(1);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":269435,"byte_end":269481,"line_start":510,"line_end":510,"column_start":2,"column_end":48}},{"value":"/   *bit = true;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":269483,"byte_end":269501,"line_start":511,"line_end":511,"column_start":2,"column_end":20}},{"value":"/ }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":269503,"byte_end":269508,"line_start":512,"line_end":512,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(data, 2);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":269510,"byte_end":269534,"line_start":513,"line_end":513,"column_start":2,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":269536,"byte_end":269543,"line_start":514,"line_end":514,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":269545,"byte_end":269548,"line_start":515,"line_end":515,"column_start":2,"column_end":5}},{"value":"/ [`get_mut`]: #method.get_mut","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":269550,"byte_end":269582,"line_start":516,"line_end":516,"column_start":2,"column_end":34}},{"value":"/ [undefined behavior]: ../../reference/behavior-considered-undefined.html","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":269584,"byte_end":269660,"line_start":517,"line_end":517,"column_start":2,"column_end":78}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":269662,"byte_end":269671,"line_start":518,"line_end":518,"column_start":2,"column_end":11}},{"value":"allow(clippy :: missing_safety_doc)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":269673,"byte_end":269709,"line_start":519,"line_end":519,"column_start":2,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1372},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":271710,"byte_end":271716,"line_start":578,"line_end":578,"column_start":9,"column_end":15},"name":"as_ptr","qualname":"<BitSlice<O, T>>::as_ptr","value":"pub fn as_ptr(&Self) -> *const Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a raw bit-slice pointer to the region.","sig":null,"attributes":[{"value":"/ Returns a raw bit-slice pointer to the region.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":269857,"byte_end":269907,"line_start":525,"line_end":525,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":269909,"byte_end":269912,"line_start":526,"line_end":526,"column_start":2,"column_end":5}},{"value":"/ The caller must ensure that the slice outlives the pointer this function","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":269914,"byte_end":269990,"line_start":527,"line_end":527,"column_start":2,"column_end":78}},{"value":"/ returns, or else it will end up pointing to garbage.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":269992,"byte_end":270048,"line_start":528,"line_end":528,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":270050,"byte_end":270053,"line_start":529,"line_end":529,"column_start":2,"column_end":5}},{"value":"/ The caller must also ensure that the memory the pointer","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":270055,"byte_end":270114,"line_start":530,"line_end":530,"column_start":2,"column_end":61}},{"value":"/ (non-transitively) points to is only written to if `T` allows shared","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":270116,"byte_end":270188,"line_start":531,"line_end":531,"column_start":2,"column_end":74}},{"value":"/ mutation, using this pointer or any pointer derived from it. If you need","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":270190,"byte_end":270266,"line_start":532,"line_end":532,"column_start":2,"column_end":78}},{"value":"/ to mutate the contents of the slice, use [`as_mut_ptr`].","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":270268,"byte_end":270328,"line_start":533,"line_end":533,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":270330,"byte_end":270333,"line_start":534,"line_end":534,"column_start":2,"column_end":5}},{"value":"/ Modifying the container (such as `BitVec`) referenced by this slice may","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":270335,"byte_end":270410,"line_start":535,"line_end":535,"column_start":2,"column_end":77}},{"value":"/ cause its buffer to be reällocated, which would also make any pointers","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":270412,"byte_end":270487,"line_start":536,"line_end":536,"column_start":2,"column_end":76}},{"value":"/ to it invalid.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":270489,"byte_end":270507,"line_start":537,"line_end":537,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":270509,"byte_end":270512,"line_start":538,"line_end":538,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":270514,"byte_end":270528,"line_start":539,"line_end":539,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":270530,"byte_end":270533,"line_start":540,"line_end":540,"column_start":2,"column_end":5}},{"value":"/ [`slice::as_ptr`](https://doc.rust-lang.org/std/primitive.slice.html#method.as_ptr)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":270535,"byte_end":270622,"line_start":541,"line_end":541,"column_start":2,"column_end":89}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":270624,"byte_end":270627,"line_start":542,"line_end":542,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":270629,"byte_end":270650,"line_start":543,"line_end":543,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":270652,"byte_end":270655,"line_start":544,"line_end":544,"column_start":2,"column_end":5}},{"value":"/ This returns `*const BitSlice`, which is the equivalent of `*const [T]`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":270657,"byte_end":270732,"line_start":545,"line_end":545,"column_start":2,"column_end":77}},{"value":"/ instead of `*const T`. The pointer encoding used requires more than one","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":270734,"byte_end":270809,"line_start":546,"line_end":546,"column_start":2,"column_end":77}},{"value":"/ CPU word of space to address a single bit, so there is no advantage to","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":270811,"byte_end":270885,"line_start":547,"line_end":547,"column_start":2,"column_end":76}},{"value":"/ removing the length information from the encoded pointer value.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":270887,"byte_end":270954,"line_start":548,"line_end":548,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":270956,"byte_end":270959,"line_start":549,"line_end":549,"column_start":2,"column_end":5}},{"value":"/ # Notes","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":270961,"byte_end":270972,"line_start":550,"line_end":550,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":270974,"byte_end":270977,"line_start":551,"line_end":551,"column_start":2,"column_end":5}},{"value":"/ You **cannot** use any of the methods in the `pointer` fundamental type","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":270979,"byte_end":271054,"line_start":552,"line_end":552,"column_start":2,"column_end":77}},{"value":"/ or the `core::ptr` module on the `*_ BitSlice` type. This pointer","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":271056,"byte_end":271125,"line_start":553,"line_end":553,"column_start":2,"column_end":71}},{"value":"/ retains the `bitvec`-specific value encoding, and is incomprehensible by","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":271127,"byte_end":271203,"line_start":554,"line_end":554,"column_start":2,"column_end":78}},{"value":"/ the Rust standard library.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":271205,"byte_end":271235,"line_start":555,"line_end":555,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":271237,"byte_end":271240,"line_start":556,"line_end":556,"column_start":2,"column_end":5}},{"value":"/ The only thing you can do with this pointer is dereference it.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":271242,"byte_end":271308,"line_start":557,"line_end":557,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":271310,"byte_end":271313,"line_start":558,"line_end":558,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":271315,"byte_end":271329,"line_start":559,"line_end":559,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":271331,"byte_end":271334,"line_start":560,"line_end":560,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":271336,"byte_end":271347,"line_start":561,"line_end":561,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":271349,"byte_end":271376,"line_start":562,"line_end":562,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":271378,"byte_end":271381,"line_start":563,"line_end":563,"column_start":2,"column_end":5}},{"value":"/ let data = 2u16;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":271383,"byte_end":271403,"line_start":564,"line_end":564,"column_start":2,"column_end":22}},{"value":"/ let bits = data.view_bits::<Lsb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":271405,"byte_end":271445,"line_start":565,"line_end":565,"column_start":2,"column_end":42}},{"value":"/ let bits_ptr = bits.as_ptr();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":271447,"byte_end":271480,"line_start":566,"line_end":566,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":271482,"byte_end":271485,"line_start":567,"line_end":567,"column_start":2,"column_end":5}},{"value":"/ for i in 0 .. bits.len() {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":271487,"byte_end":271517,"line_start":568,"line_end":568,"column_start":2,"column_end":32}},{"value":"/   assert_eq!(bits[i], unsafe {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":271519,"byte_end":271553,"line_start":569,"line_end":569,"column_start":2,"column_end":36}},{"value":"/     (&*bits_ptr)[i]","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":271555,"byte_end":271578,"line_start":570,"line_end":570,"column_start":2,"column_end":25}},{"value":"/   });","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":271580,"byte_end":271589,"line_start":571,"line_end":571,"column_start":2,"column_end":11}},{"value":"/ }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":271591,"byte_end":271596,"line_start":572,"line_end":572,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":271598,"byte_end":271605,"line_start":573,"line_end":573,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":271607,"byte_end":271610,"line_start":574,"line_end":574,"column_start":2,"column_end":5}},{"value":"/ [`as_mut_ptr`]: #method.as_mut_ptr","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":271612,"byte_end":271650,"line_start":575,"line_end":575,"column_start":2,"column_end":40}},{"value":"inline(always)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":271652,"byte_end":271669,"line_start":576,"line_end":576,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":271671,"byte_end":271701,"line_start":577,"line_end":577,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1373},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":273276,"byte_end":273286,"line_start":625,"line_end":625,"column_start":9,"column_end":19},"name":"as_mut_ptr","qualname":"<BitSlice<O, T>>::as_mut_ptr","value":"pub fn as_mut_ptr(&mut Self) -> *mut Self","parent":null,"children":[],"decl_id":null,"docs":" Returns an unsafe mutable bit-slice pointer to the region.","sig":null,"attributes":[{"value":"/ Returns an unsafe mutable bit-slice pointer to the region.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":271768,"byte_end":271830,"line_start":582,"line_end":582,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":271832,"byte_end":271835,"line_start":583,"line_end":583,"column_start":2,"column_end":5}},{"value":"/ The caller must ensure that the slice outlives the pointer this function","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":271837,"byte_end":271913,"line_start":584,"line_end":584,"column_start":2,"column_end":78}},{"value":"/ returns, or else it will end up pointing to garbage.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":271915,"byte_end":271971,"line_start":585,"line_end":585,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":271973,"byte_end":271976,"line_start":586,"line_end":586,"column_start":2,"column_end":5}},{"value":"/ Modifying the container (such as `BitVec`) referenced by this slice may","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":271978,"byte_end":272053,"line_start":587,"line_end":587,"column_start":2,"column_end":77}},{"value":"/ cause its buffer to be reällocated, which would also make any pointers","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":272055,"byte_end":272130,"line_start":588,"line_end":588,"column_start":2,"column_end":76}},{"value":"/ to it invalid.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":272132,"byte_end":272150,"line_start":589,"line_end":589,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":272152,"byte_end":272155,"line_start":590,"line_end":590,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":272157,"byte_end":272171,"line_start":591,"line_end":591,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":272173,"byte_end":272176,"line_start":592,"line_end":592,"column_start":2,"column_end":5}},{"value":"/ [`slice::as_mut_ptr`](https://doc.rust-lang.org/std/primitive.slice.html#method.as_mut_ptr)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":272178,"byte_end":272273,"line_start":593,"line_end":593,"column_start":2,"column_end":97}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":272275,"byte_end":272278,"line_start":594,"line_end":594,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":272280,"byte_end":272301,"line_start":595,"line_end":595,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":272303,"byte_end":272306,"line_start":596,"line_end":596,"column_start":2,"column_end":5}},{"value":"/ This returns `*mut BitSlice`, which is the equivalont of `*mut [T]`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":272308,"byte_end":272379,"line_start":597,"line_end":597,"column_start":2,"column_end":73}},{"value":"/ instead of `*mut T`. The pointer encoding used requires more than one","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":272381,"byte_end":272454,"line_start":598,"line_end":598,"column_start":2,"column_end":75}},{"value":"/ CPU word of space to address a single bit, so there is no advantage to","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":272456,"byte_end":272530,"line_start":599,"line_end":599,"column_start":2,"column_end":76}},{"value":"/ removing the length information from the encoded pointer value.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":272532,"byte_end":272599,"line_start":600,"line_end":600,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":272601,"byte_end":272604,"line_start":601,"line_end":601,"column_start":2,"column_end":5}},{"value":"/ # Notes","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":272606,"byte_end":272617,"line_start":602,"line_end":602,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":272619,"byte_end":272622,"line_start":603,"line_end":603,"column_start":2,"column_end":5}},{"value":"/ You **cannot** use any of the methods in the `pointer` fundamental type","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":272624,"byte_end":272699,"line_start":604,"line_end":604,"column_start":2,"column_end":77}},{"value":"/ or the `core::ptr` module on the `*_ BitSlice` type. This pointer","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":272701,"byte_end":272770,"line_start":605,"line_end":605,"column_start":2,"column_end":71}},{"value":"/ retains the `bitvec`-specific value encoding, and is incomprehensible by","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":272772,"byte_end":272848,"line_start":606,"line_end":606,"column_start":2,"column_end":78}},{"value":"/ the Rust standard library.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":272850,"byte_end":272880,"line_start":607,"line_end":607,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":272882,"byte_end":272885,"line_start":608,"line_end":608,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":272887,"byte_end":272901,"line_start":609,"line_end":609,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":272903,"byte_end":272906,"line_start":610,"line_end":610,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":272908,"byte_end":272919,"line_start":611,"line_end":611,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":272921,"byte_end":272948,"line_start":612,"line_end":612,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":272950,"byte_end":272953,"line_start":613,"line_end":613,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0u16;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":272955,"byte_end":272979,"line_start":614,"line_end":614,"column_start":2,"column_end":26}},{"value":"/ let bits = data.view_bits_mut::<Lsb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":272981,"byte_end":273025,"line_start":615,"line_end":615,"column_start":2,"column_end":46}},{"value":"/ let bits_ptr = bits.as_mut_ptr();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":273027,"byte_end":273064,"line_start":616,"line_end":616,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":273066,"byte_end":273069,"line_start":617,"line_end":617,"column_start":2,"column_end":5}},{"value":"/ for i in 0 .. bits.len() {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":273071,"byte_end":273101,"line_start":618,"line_end":618,"column_start":2,"column_end":32}},{"value":"/   unsafe { &mut *bits_ptr }.set(i, i % 2 == 0);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":273103,"byte_end":273154,"line_start":619,"line_end":619,"column_start":2,"column_end":53}},{"value":"/ }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":273156,"byte_end":273161,"line_start":620,"line_end":620,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(data, 0b0101_0101_0101_0101);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":273163,"byte_end":273207,"line_start":621,"line_end":621,"column_start":2,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":273209,"byte_end":273216,"line_start":622,"line_end":622,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":273218,"byte_end":273235,"line_start":623,"line_end":623,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":273237,"byte_end":273267,"line_start":624,"line_end":624,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1374},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":273877,"byte_end":273881,"line_start":655,"line_end":655,"column_start":9,"column_end":13},"name":"swap","qualname":"<BitSlice<O, T>>::swap","value":"pub fn swap(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Swaps two bits in the slice.","sig":null,"attributes":[{"value":"/ Swaps two bits in the slice.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":273338,"byte_end":273370,"line_start":629,"line_end":629,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":273372,"byte_end":273375,"line_start":630,"line_end":630,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":273377,"byte_end":273391,"line_start":631,"line_end":631,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":273393,"byte_end":273396,"line_start":632,"line_end":632,"column_start":2,"column_end":5}},{"value":"/ [`slice::swap`](https://doc.rust-lang.org/std/primitive.slice.html#method.swap)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":273398,"byte_end":273481,"line_start":633,"line_end":633,"column_start":2,"column_end":85}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":273483,"byte_end":273486,"line_start":634,"line_end":634,"column_start":2,"column_end":5}},{"value":"/ # Arguments","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":273488,"byte_end":273503,"line_start":635,"line_end":635,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":273505,"byte_end":273508,"line_start":636,"line_end":636,"column_start":2,"column_end":5}},{"value":"/ - `a`: The index of the first bit","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":273510,"byte_end":273547,"line_start":637,"line_end":637,"column_start":2,"column_end":39}},{"value":"/ - `b`: The index of the second bit","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":273549,"byte_end":273587,"line_start":638,"line_end":638,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":273589,"byte_end":273592,"line_start":639,"line_end":639,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":273594,"byte_end":273606,"line_start":640,"line_end":640,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":273608,"byte_end":273611,"line_start":641,"line_end":641,"column_start":2,"column_end":5}},{"value":"/ Panics if `a` or `b` are out of bounds.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":273613,"byte_end":273656,"line_start":642,"line_end":642,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":273658,"byte_end":273661,"line_start":643,"line_end":643,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":273663,"byte_end":273677,"line_start":644,"line_end":644,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":273679,"byte_end":273682,"line_start":645,"line_end":645,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":273684,"byte_end":273695,"line_start":646,"line_end":646,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":273697,"byte_end":273724,"line_start":647,"line_end":647,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":273726,"byte_end":273729,"line_start":648,"line_end":648,"column_start":2,"column_end":5}},{"value":"/ let mut data = 2u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":273731,"byte_end":273754,"line_start":649,"line_end":649,"column_start":2,"column_end":25}},{"value":"/ let bits = data.view_bits_mut::<Lsb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":273756,"byte_end":273800,"line_start":650,"line_end":650,"column_start":2,"column_end":46}},{"value":"/ bits.swap(1, 3);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":273802,"byte_end":273822,"line_start":651,"line_end":651,"column_start":2,"column_end":22}},{"value":"/ assert_eq!(data, 8);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":273824,"byte_end":273848,"line_start":652,"line_end":652,"column_start":2,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":273850,"byte_end":273857,"line_start":653,"line_end":653,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":273859,"byte_end":273868,"line_start":654,"line_end":654,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1375},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":274522,"byte_end":274529,"line_start":681,"line_end":681,"column_start":9,"column_end":16},"name":"reverse","qualname":"<BitSlice<O, T>>::reverse","value":"pub fn reverse(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reverses the order of bits in the slice, in place.","sig":null,"attributes":[{"value":"/ Reverses the order of bits in the slice, in place.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":274105,"byte_end":274159,"line_start":664,"line_end":664,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":274161,"byte_end":274164,"line_start":665,"line_end":665,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":274166,"byte_end":274180,"line_start":666,"line_end":666,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":274182,"byte_end":274185,"line_start":667,"line_end":667,"column_start":2,"column_end":5}},{"value":"/ [`slice::reverse`](https://doc.rust-lang.org/std/primitive.slice.html#method.reverse)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":274187,"byte_end":274276,"line_start":668,"line_end":668,"column_start":2,"column_end":91}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":274278,"byte_end":274281,"line_start":669,"line_end":669,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":274283,"byte_end":274297,"line_start":670,"line_end":670,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":274299,"byte_end":274302,"line_start":671,"line_end":671,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":274304,"byte_end":274315,"line_start":672,"line_end":672,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":274317,"byte_end":274344,"line_start":673,"line_end":673,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":274346,"byte_end":274349,"line_start":674,"line_end":674,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0b1_1001100u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":274351,"byte_end":274384,"line_start":675,"line_end":675,"column_start":2,"column_end":35}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":274386,"byte_end":274430,"line_start":676,"line_end":676,"column_start":2,"column_end":46}},{"value":"/ bits[1 ..].reverse();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":274432,"byte_end":274457,"line_start":677,"line_end":677,"column_start":2,"column_end":27}},{"value":"/ assert_eq!(data, 0b1_0011001);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":274459,"byte_end":274493,"line_start":678,"line_end":678,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":274495,"byte_end":274502,"line_start":679,"line_end":679,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":274504,"byte_end":274513,"line_start":680,"line_end":680,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1376},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":276031,"byte_end":276035,"line_start":734,"line_end":734,"column_start":9,"column_end":13},"name":"iter","qualname":"<BitSlice<O, T>>::iter","value":"pub fn iter(&Self) -> Iter<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over the slice.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":275490,"byte_end":275529,"line_start":713,"line_end":713,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":275531,"byte_end":275534,"line_start":714,"line_end":714,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":275536,"byte_end":275550,"line_start":715,"line_end":715,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":275552,"byte_end":275555,"line_start":716,"line_end":716,"column_start":2,"column_end":5}},{"value":"/ [`slice::iter`](https://doc.rust-lang.org/std/primitive.slice.html#method.iter)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":275557,"byte_end":275640,"line_start":717,"line_end":717,"column_start":2,"column_end":85}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":275642,"byte_end":275645,"line_start":718,"line_end":718,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":275647,"byte_end":275661,"line_start":719,"line_end":719,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":275663,"byte_end":275666,"line_start":720,"line_end":720,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":275668,"byte_end":275679,"line_start":721,"line_end":721,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":275681,"byte_end":275708,"line_start":722,"line_end":722,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":275710,"byte_end":275713,"line_start":723,"line_end":723,"column_start":2,"column_end":5}},{"value":"/ let data = 130u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":275715,"byte_end":275736,"line_start":724,"line_end":724,"column_start":2,"column_end":23}},{"value":"/ let bits = data.view_bits::<Lsb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":275738,"byte_end":275778,"line_start":725,"line_end":725,"column_start":2,"column_end":42}},{"value":"/ let mut iterator = bits.iter();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":275780,"byte_end":275815,"line_start":726,"line_end":726,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":275817,"byte_end":275820,"line_start":727,"line_end":727,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iterator.next(), Some(&false));","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":275822,"byte_end":275868,"line_start":728,"line_end":728,"column_start":2,"column_end":48}},{"value":"/ assert_eq!(iterator.next(), Some(&true));","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":275870,"byte_end":275915,"line_start":729,"line_end":729,"column_start":2,"column_end":47}},{"value":"/ assert_eq!(iterator.nth(5), Some(&true));","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":275917,"byte_end":275962,"line_start":730,"line_end":730,"column_start":2,"column_end":47}},{"value":"/ assert_eq!(iterator.next(), None);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":275964,"byte_end":276002,"line_start":731,"line_end":731,"column_start":2,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":276004,"byte_end":276011,"line_start":732,"line_end":732,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":276013,"byte_end":276022,"line_start":733,"line_end":733,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1377},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":276561,"byte_end":276569,"line_start":757,"line_end":757,"column_start":9,"column_end":17},"name":"iter_mut","qualname":"<BitSlice<O, T>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> IterMut<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator that allows modifying each bit.","sig":null,"attributes":[{"value":"/ Returns an iterator that allows modifying each bit.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":276083,"byte_end":276138,"line_start":738,"line_end":738,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":276140,"byte_end":276143,"line_start":739,"line_end":739,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":276145,"byte_end":276159,"line_start":740,"line_end":740,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":276161,"byte_end":276164,"line_start":741,"line_end":741,"column_start":2,"column_end":5}},{"value":"/ [`slice::iter_mut`](https://doc.rust-lang.org/std/primitive.slice.html#Method.iter_mut)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":276166,"byte_end":276257,"line_start":742,"line_end":742,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":276259,"byte_end":276262,"line_start":743,"line_end":743,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":276264,"byte_end":276278,"line_start":744,"line_end":744,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":276280,"byte_end":276283,"line_start":745,"line_end":745,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":276285,"byte_end":276296,"line_start":746,"line_end":746,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":276298,"byte_end":276325,"line_start":747,"line_end":747,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":276327,"byte_end":276330,"line_start":748,"line_end":748,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":276332,"byte_end":276355,"line_start":749,"line_end":749,"column_start":2,"column_end":25}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":276357,"byte_end":276401,"line_start":750,"line_end":750,"column_start":2,"column_end":46}},{"value":"/ for (idx, mut elem) in bits.iter_mut().enumerate() {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":276403,"byte_end":276459,"line_start":751,"line_end":751,"column_start":2,"column_end":58}},{"value":"/   *elem = idx % 3 == 0;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":276461,"byte_end":276488,"line_start":752,"line_end":752,"column_start":2,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":276490,"byte_end":276495,"line_start":753,"line_end":753,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(data, 0b100_100_10);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":276497,"byte_end":276532,"line_start":754,"line_end":754,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":276534,"byte_end":276541,"line_start":755,"line_end":755,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":276543,"byte_end":276552,"line_start":756,"line_end":756,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1378},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":277599,"byte_end":277606,"line_start":797,"line_end":797,"column_start":9,"column_end":16},"name":"windows","qualname":"<BitSlice<O, T>>::windows","value":"pub fn windows(&Self, usize) -> Windows<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all contiguous windows of length `size`. The\n windows overlap. If the slice is shorter than `size`, the iterator\n returns no values.","sig":null,"attributes":[{"value":"/ Returns an iterator over all contiguous windows of length `size`. The","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":276624,"byte_end":276697,"line_start":761,"line_end":761,"column_start":2,"column_end":75}},{"value":"/ windows overlap. If the slice is shorter than `size`, the iterator","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":276699,"byte_end":276769,"line_start":762,"line_end":762,"column_start":2,"column_end":72}},{"value":"/ returns no values.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":276771,"byte_end":276793,"line_start":763,"line_end":763,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":276795,"byte_end":276798,"line_start":764,"line_end":764,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":276800,"byte_end":276814,"line_start":765,"line_end":765,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":276816,"byte_end":276819,"line_start":766,"line_end":766,"column_start":2,"column_end":5}},{"value":"/ [`slice::windows`](https://doc.rust-lang.org/std/primitive.slice.html#method.windows)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":276821,"byte_end":276910,"line_start":767,"line_end":767,"column_start":2,"column_end":91}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":276912,"byte_end":276915,"line_start":768,"line_end":768,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":276917,"byte_end":276929,"line_start":769,"line_end":769,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":276931,"byte_end":276934,"line_start":770,"line_end":770,"column_start":2,"column_end":5}},{"value":"/ Panics if `size` is 0.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":276936,"byte_end":276962,"line_start":771,"line_end":771,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":276964,"byte_end":276967,"line_start":772,"line_end":772,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":276969,"byte_end":276983,"line_start":773,"line_end":773,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":276985,"byte_end":276988,"line_start":774,"line_end":774,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":276990,"byte_end":277001,"line_start":775,"line_end":775,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":277003,"byte_end":277030,"line_start":776,"line_end":776,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":277032,"byte_end":277035,"line_start":777,"line_end":777,"column_start":2,"column_end":5}},{"value":"/ let data = 0xA5u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":277037,"byte_end":277059,"line_start":778,"line_end":778,"column_start":2,"column_end":24}},{"value":"/ let bits = data.view_bits::<Msb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":277061,"byte_end":277101,"line_start":779,"line_end":779,"column_start":2,"column_end":42}},{"value":"/ let mut iter = bits.windows(6);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":277103,"byte_end":277138,"line_start":780,"line_end":780,"column_start":2,"column_end":37}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[.. 6]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":277140,"byte_end":277190,"line_start":781,"line_end":781,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[1 .. 7]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":277192,"byte_end":277244,"line_start":782,"line_end":782,"column_start":2,"column_end":54}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[2 ..]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":277246,"byte_end":277296,"line_start":783,"line_end":783,"column_start":2,"column_end":52}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":277298,"byte_end":277333,"line_start":784,"line_end":784,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":277335,"byte_end":277342,"line_start":785,"line_end":785,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":277344,"byte_end":277347,"line_start":786,"line_end":786,"column_start":2,"column_end":5}},{"value":"/ If the slice is shorter than `size`:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":277349,"byte_end":277389,"line_start":787,"line_end":787,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":277391,"byte_end":277394,"line_start":788,"line_end":788,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":277396,"byte_end":277407,"line_start":789,"line_end":789,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":277409,"byte_end":277436,"line_start":790,"line_end":790,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":277438,"byte_end":277441,"line_start":791,"line_end":791,"column_start":2,"column_end":5}},{"value":"/ let bits = BitSlice::<LocalBits, usize>::empty();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":277443,"byte_end":277496,"line_start":792,"line_end":792,"column_start":2,"column_end":55}},{"value":"/ let mut iter = bits.windows(1);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":277498,"byte_end":277533,"line_start":793,"line_end":793,"column_start":2,"column_end":37}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":277535,"byte_end":277570,"line_start":794,"line_end":794,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":277572,"byte_end":277579,"line_start":795,"line_end":795,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":277581,"byte_end":277590,"line_start":796,"line_end":796,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1379},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":278878,"byte_end":278884,"line_start":838,"line_end":838,"column_start":9,"column_end":15},"name":"chunks","qualname":"<BitSlice<O, T>>::chunks","value":"pub fn chunks(&Self, usize) -> Chunks<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the beginning of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":277729,"byte_end":277799,"line_start":802,"line_end":802,"column_start":2,"column_end":72}},{"value":"/ starting at the beginning of the slice.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":277801,"byte_end":277844,"line_start":803,"line_end":803,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":277846,"byte_end":277849,"line_start":804,"line_end":804,"column_start":2,"column_end":5}},{"value":"/ The chunks are slices and do not overlap. If `chunk_size` does not","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":277851,"byte_end":277921,"line_start":805,"line_end":805,"column_start":2,"column_end":72}},{"value":"/ divide the length of the slice, then the last chunk will not have length","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":277923,"byte_end":277999,"line_start":806,"line_end":806,"column_start":2,"column_end":78}},{"value":"/ `chunk_size`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":278001,"byte_end":278018,"line_start":807,"line_end":807,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":278020,"byte_end":278023,"line_start":808,"line_end":808,"column_start":2,"column_end":5}},{"value":"/ See [`chunks_exact`] for a variant of this iterator that returns chunks","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":278025,"byte_end":278100,"line_start":809,"line_end":809,"column_start":2,"column_end":77}},{"value":"/ of always exactly `chunk_size` bits, and [`rchunks`] for the same","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":278102,"byte_end":278171,"line_start":810,"line_end":810,"column_start":2,"column_end":71}},{"value":"/ iterator but starting at the end of the slice.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":278173,"byte_end":278223,"line_start":811,"line_end":811,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":278225,"byte_end":278228,"line_start":812,"line_end":812,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":278230,"byte_end":278244,"line_start":813,"line_end":813,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":278246,"byte_end":278249,"line_start":814,"line_end":814,"column_start":2,"column_end":5}},{"value":"/ [`slice::chunks`](https://doc.rust-lang.org/std/primitive.slice.html#method.chunks)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":278251,"byte_end":278338,"line_start":815,"line_end":815,"column_start":2,"column_end":89}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":278340,"byte_end":278343,"line_start":816,"line_end":816,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":278345,"byte_end":278357,"line_start":817,"line_end":817,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":278359,"byte_end":278362,"line_start":818,"line_end":818,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":278364,"byte_end":278396,"line_start":819,"line_end":819,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":278398,"byte_end":278401,"line_start":820,"line_end":820,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":278403,"byte_end":278417,"line_start":821,"line_end":821,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":278419,"byte_end":278422,"line_start":822,"line_end":822,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":278424,"byte_end":278435,"line_start":823,"line_end":823,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":278437,"byte_end":278464,"line_start":824,"line_end":824,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":278466,"byte_end":278469,"line_start":825,"line_end":825,"column_start":2,"column_end":5}},{"value":"/ let data = 0xA5u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":278471,"byte_end":278493,"line_start":826,"line_end":826,"column_start":2,"column_end":24}},{"value":"/ let bits = data.view_bits::<Lsb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":278495,"byte_end":278535,"line_start":827,"line_end":827,"column_start":2,"column_end":42}},{"value":"/ let mut iter = bits.chunks(3);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":278537,"byte_end":278571,"line_start":828,"line_end":828,"column_start":2,"column_end":36}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[.. 3]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":278573,"byte_end":278623,"line_start":829,"line_end":829,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[3 .. 6]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":278625,"byte_end":278677,"line_start":830,"line_end":830,"column_start":2,"column_end":54}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[6 ..]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":278679,"byte_end":278729,"line_start":831,"line_end":831,"column_start":2,"column_end":52}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":278731,"byte_end":278766,"line_start":832,"line_end":832,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":278768,"byte_end":278775,"line_start":833,"line_end":833,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":278777,"byte_end":278780,"line_start":834,"line_end":834,"column_start":2,"column_end":5}},{"value":"/ [`chunks_exact`]: #method.chunks_exact","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":278782,"byte_end":278824,"line_start":835,"line_end":835,"column_start":2,"column_end":44}},{"value":"/ [`rchunks`]: #method.rchunks","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":278826,"byte_end":278858,"line_start":836,"line_end":836,"column_start":2,"column_end":34}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":278860,"byte_end":278869,"line_start":837,"line_end":837,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1380},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":280126,"byte_end":280136,"line_start":879,"line_end":879,"column_start":9,"column_end":19},"name":"chunks_mut","qualname":"<BitSlice<O, T>>::chunks_mut","value":"pub fn chunks_mut(&mut Self, usize) -> ChunksMut<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the beginning of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":279022,"byte_end":279092,"line_start":843,"line_end":843,"column_start":2,"column_end":72}},{"value":"/ starting at the beginning of the slice.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":279094,"byte_end":279137,"line_start":844,"line_end":844,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":279139,"byte_end":279142,"line_start":845,"line_end":845,"column_start":2,"column_end":5}},{"value":"/ The chunks are mutable slices, and do not overlap. If `chunk_size` does","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":279144,"byte_end":279219,"line_start":846,"line_end":846,"column_start":2,"column_end":77}},{"value":"/ not divide the length of the slice, then the last chunk will not have","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":279221,"byte_end":279294,"line_start":847,"line_end":847,"column_start":2,"column_end":75}},{"value":"/ length `chunk_size`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":279296,"byte_end":279320,"line_start":848,"line_end":848,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":279322,"byte_end":279325,"line_start":849,"line_end":849,"column_start":2,"column_end":5}},{"value":"/ See [`chunks_exact_mut`] for a variant of this iterator that returns","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":279327,"byte_end":279399,"line_start":850,"line_end":850,"column_start":2,"column_end":74}},{"value":"/ chunks of always exactly `chunk_size` bits, and [`rchunks_mut`] for the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":279401,"byte_end":279476,"line_start":851,"line_end":851,"column_start":2,"column_end":77}},{"value":"/ same iterator but starting at the end of the slice.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":279478,"byte_end":279533,"line_start":852,"line_end":852,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":279535,"byte_end":279538,"line_start":853,"line_end":853,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":279540,"byte_end":279554,"line_start":854,"line_end":854,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":279556,"byte_end":279559,"line_start":855,"line_end":855,"column_start":2,"column_end":5}},{"value":"/ [`slice::chunks_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.chunks_mut)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":279561,"byte_end":279656,"line_start":856,"line_end":856,"column_start":2,"column_end":97}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":279658,"byte_end":279661,"line_start":857,"line_end":857,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":279663,"byte_end":279675,"line_start":858,"line_end":858,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":279677,"byte_end":279680,"line_start":859,"line_end":859,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":279682,"byte_end":279714,"line_start":860,"line_end":860,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":279716,"byte_end":279719,"line_start":861,"line_end":861,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":279721,"byte_end":279735,"line_start":862,"line_end":862,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":279737,"byte_end":279740,"line_start":863,"line_end":863,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":279742,"byte_end":279753,"line_start":864,"line_end":864,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":279755,"byte_end":279782,"line_start":865,"line_end":865,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":279784,"byte_end":279787,"line_start":866,"line_end":866,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":279789,"byte_end":279812,"line_start":867,"line_end":867,"column_start":2,"column_end":25}},{"value":"/ let bits = data.view_bits_mut::<Lsb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":279814,"byte_end":279858,"line_start":868,"line_end":868,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":279860,"byte_end":279863,"line_start":869,"line_end":869,"column_start":2,"column_end":5}},{"value":"/ for (idx, chunk) in bits.chunks_mut(3).enumerate() {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":279865,"byte_end":279921,"line_start":870,"line_end":870,"column_start":2,"column_end":58}},{"value":"/   chunk.set(2 - idx, true);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":279923,"byte_end":279954,"line_start":871,"line_end":871,"column_start":2,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":279956,"byte_end":279961,"line_start":872,"line_end":872,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(data, 0b01_010_100);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":279963,"byte_end":279998,"line_start":873,"line_end":873,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":280000,"byte_end":280007,"line_start":874,"line_end":874,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":280009,"byte_end":280012,"line_start":875,"line_end":875,"column_start":2,"column_end":5}},{"value":"/ [`chunks_exact_mut`]: #method.chunks_exact_mut","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":280014,"byte_end":280064,"line_start":876,"line_end":876,"column_start":2,"column_end":52}},{"value":"/ [`rchunks_mut`]: #method.rchunks_mut","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":280066,"byte_end":280106,"line_start":877,"line_end":877,"column_start":2,"column_end":42}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":280108,"byte_end":280117,"line_start":878,"line_end":878,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1381},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":281667,"byte_end":281679,"line_start":924,"line_end":924,"column_start":9,"column_end":21},"name":"chunks_exact","qualname":"<BitSlice<O, T>>::chunks_exact","value":"pub fn chunks_exact(&Self, usize) -> ChunksExact<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the beginning of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":280284,"byte_end":280354,"line_start":884,"line_end":884,"column_start":2,"column_end":72}},{"value":"/ starting at the beginning of the slice.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":280356,"byte_end":280399,"line_start":885,"line_end":885,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":280401,"byte_end":280404,"line_start":886,"line_end":886,"column_start":2,"column_end":5}},{"value":"/ The chunks are slices and do not overlap. If `chunk_size` does not","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":280406,"byte_end":280476,"line_start":887,"line_end":887,"column_start":2,"column_end":72}},{"value":"/ divide the length of the slice, then the last up to `chunk_size-1` bits","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":280478,"byte_end":280553,"line_start":888,"line_end":888,"column_start":2,"column_end":77}},{"value":"/ will be omitted and can be retrieved from the `remainder` function of","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":280555,"byte_end":280628,"line_start":889,"line_end":889,"column_start":2,"column_end":75}},{"value":"/ the iterator.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":280630,"byte_end":280647,"line_start":890,"line_end":890,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":280649,"byte_end":280652,"line_start":891,"line_end":891,"column_start":2,"column_end":5}},{"value":"/ Due to each chunk having exactly `chunk_size` bits, the compiler may","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":280654,"byte_end":280726,"line_start":892,"line_end":892,"column_start":2,"column_end":74}},{"value":"/ optimize the resulting code better than in the case of [`chunks`].","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":280728,"byte_end":280798,"line_start":893,"line_end":893,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":280800,"byte_end":280803,"line_start":894,"line_end":894,"column_start":2,"column_end":5}},{"value":"/ See [`chunks`] for a variant of this iterator that also returns the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":280805,"byte_end":280876,"line_start":895,"line_end":895,"column_start":2,"column_end":73}},{"value":"/ remainder as a smaller chunk, and [`rchunks_exact`] for the same","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":280878,"byte_end":280946,"line_start":896,"line_end":896,"column_start":2,"column_end":70}},{"value":"/ iterator but starting at the end of the slice.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":280948,"byte_end":280998,"line_start":897,"line_end":897,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":281000,"byte_end":281003,"line_start":898,"line_end":898,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":281005,"byte_end":281019,"line_start":899,"line_end":899,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":281021,"byte_end":281024,"line_start":900,"line_end":900,"column_start":2,"column_end":5}},{"value":"/ [`slice::chunks_exact`](https://doc.rust-lang.org/std/primitive.slice.html#method.chunks_exact)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":281026,"byte_end":281125,"line_start":901,"line_end":901,"column_start":2,"column_end":101}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":281127,"byte_end":281130,"line_start":902,"line_end":902,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":281132,"byte_end":281144,"line_start":903,"line_end":903,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":281146,"byte_end":281149,"line_start":904,"line_end":904,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":281151,"byte_end":281183,"line_start":905,"line_end":905,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":281185,"byte_end":281188,"line_start":906,"line_end":906,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":281190,"byte_end":281204,"line_start":907,"line_end":907,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":281206,"byte_end":281209,"line_start":908,"line_end":908,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":281211,"byte_end":281222,"line_start":909,"line_end":909,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":281224,"byte_end":281251,"line_start":910,"line_end":910,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":281253,"byte_end":281256,"line_start":911,"line_end":911,"column_start":2,"column_end":5}},{"value":"/ let data = 0xA5u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":281258,"byte_end":281280,"line_start":912,"line_end":912,"column_start":2,"column_end":24}},{"value":"/ let bits = data.view_bits::<Lsb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":281282,"byte_end":281322,"line_start":913,"line_end":913,"column_start":2,"column_end":42}},{"value":"/ let mut iter = bits.chunks_exact(3);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":281324,"byte_end":281364,"line_start":914,"line_end":914,"column_start":2,"column_end":42}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[.. 3]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":281366,"byte_end":281416,"line_start":915,"line_end":915,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[3 .. 6]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":281418,"byte_end":281470,"line_start":916,"line_end":916,"column_start":2,"column_end":54}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":281472,"byte_end":281507,"line_start":917,"line_end":917,"column_start":2,"column_end":37}},{"value":"/ assert_eq!(iter.remainder(), &bits[6 ..]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":281509,"byte_end":281555,"line_start":918,"line_end":918,"column_start":2,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":281557,"byte_end":281564,"line_start":919,"line_end":919,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":281566,"byte_end":281569,"line_start":920,"line_end":920,"column_start":2,"column_end":5}},{"value":"/ [`chunks`]: #method.chunks","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":281571,"byte_end":281601,"line_start":921,"line_end":921,"column_start":2,"column_end":32}},{"value":"/ [`rchunks_exact`]: #method.rchunks_exact","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":281603,"byte_end":281647,"line_start":922,"line_end":922,"column_start":2,"column_end":46}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":281649,"byte_end":281658,"line_start":923,"line_end":923,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1382},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":283184,"byte_end":283200,"line_start":969,"line_end":969,"column_start":9,"column_end":25},"name":"chunks_exact_mut","qualname":"<BitSlice<O, T>>::chunks_exact_mut","value":"pub fn chunks_exact_mut(&mut Self, usize) -> ChunksExactMut<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the beginning of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":281827,"byte_end":281897,"line_start":929,"line_end":929,"column_start":2,"column_end":72}},{"value":"/ starting at the beginning of the slice.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":281899,"byte_end":281942,"line_start":930,"line_end":930,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":281944,"byte_end":281947,"line_start":931,"line_end":931,"column_start":2,"column_end":5}},{"value":"/ The chunks are mutable slices, and do not overlap. If `chunk_size` does","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":281949,"byte_end":282024,"line_start":932,"line_end":932,"column_start":2,"column_end":77}},{"value":"/ not divide the beginning length of the slice, then the last up to","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":282026,"byte_end":282095,"line_start":933,"line_end":933,"column_start":2,"column_end":71}},{"value":"/ `chunk_size-1` bits will be omitted and can be retrieved from the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":282097,"byte_end":282166,"line_start":934,"line_end":934,"column_start":2,"column_end":71}},{"value":"/ `into_remainder` function of the iterator.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":282168,"byte_end":282214,"line_start":935,"line_end":935,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":282216,"byte_end":282219,"line_start":936,"line_end":936,"column_start":2,"column_end":5}},{"value":"/ Due to each chunk having exactly `chunk_size` bits, the compiler may","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":282221,"byte_end":282293,"line_start":937,"line_end":937,"column_start":2,"column_end":74}},{"value":"/ optimize the resulting code better than in the case of [`chunks_mut`].","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":282295,"byte_end":282369,"line_start":938,"line_end":938,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":282371,"byte_end":282374,"line_start":939,"line_end":939,"column_start":2,"column_end":5}},{"value":"/ See [`chunks_mut`] for a variant of this iterator that also returns the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":282376,"byte_end":282451,"line_start":940,"line_end":940,"column_start":2,"column_end":77}},{"value":"/ remainder as a smaller chunk, and [`rchunks_exact_mut`] for the same","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":282453,"byte_end":282525,"line_start":941,"line_end":941,"column_start":2,"column_end":74}},{"value":"/ iterator but starting at the end of the slice.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":282527,"byte_end":282577,"line_start":942,"line_end":942,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":282579,"byte_end":282582,"line_start":943,"line_end":943,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":282584,"byte_end":282598,"line_start":944,"line_end":944,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":282600,"byte_end":282603,"line_start":945,"line_end":945,"column_start":2,"column_end":5}},{"value":"/ [`slice::chunks_exact_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.chunks_exact_mut)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":282605,"byte_end":282712,"line_start":946,"line_end":946,"column_start":2,"column_end":109}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":282714,"byte_end":282717,"line_start":947,"line_end":947,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":282719,"byte_end":282731,"line_start":948,"line_end":948,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":282733,"byte_end":282736,"line_start":949,"line_end":949,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":282738,"byte_end":282770,"line_start":950,"line_end":950,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":282772,"byte_end":282775,"line_start":951,"line_end":951,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":282777,"byte_end":282791,"line_start":952,"line_end":952,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":282793,"byte_end":282796,"line_start":953,"line_end":953,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":282798,"byte_end":282809,"line_start":954,"line_end":954,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":282811,"byte_end":282838,"line_start":955,"line_end":955,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":282840,"byte_end":282843,"line_start":956,"line_end":956,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":282845,"byte_end":282868,"line_start":957,"line_end":957,"column_start":2,"column_end":25}},{"value":"/ let bits = data.view_bits_mut::<Lsb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":282870,"byte_end":282914,"line_start":958,"line_end":958,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":282916,"byte_end":282919,"line_start":959,"line_end":959,"column_start":2,"column_end":5}},{"value":"/ for (idx, chunk) in bits.chunks_exact_mut(3).enumerate() {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":282921,"byte_end":282983,"line_start":960,"line_end":960,"column_start":2,"column_end":64}},{"value":"/   chunk.set(idx, true);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":282985,"byte_end":283012,"line_start":961,"line_end":961,"column_start":2,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":283014,"byte_end":283019,"line_start":962,"line_end":962,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(data, 0b00_010_001);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":283021,"byte_end":283056,"line_start":963,"line_end":963,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":283058,"byte_end":283065,"line_start":964,"line_end":964,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":283067,"byte_end":283070,"line_start":965,"line_end":965,"column_start":2,"column_end":5}},{"value":"/ [`chunks_mut`]: #method.chunks_mut","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":283072,"byte_end":283110,"line_start":966,"line_end":966,"column_start":2,"column_end":40}},{"value":"/ [`rchunks_exact_mut`]: #method.rchunks_exact_mut","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":283112,"byte_end":283164,"line_start":967,"line_end":967,"column_start":2,"column_end":54}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":283166,"byte_end":283175,"line_start":968,"line_end":968,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1383},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":284519,"byte_end":284526,"line_start":1014,"line_end":1014,"column_start":9,"column_end":16},"name":"rchunks","qualname":"<BitSlice<O, T>>::rchunks","value":"pub fn rchunks(&Self, usize) -> RChunks<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the end of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":283367,"byte_end":283437,"line_start":978,"line_end":978,"column_start":2,"column_end":72}},{"value":"/ starting at the end of the slice.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":283439,"byte_end":283476,"line_start":979,"line_end":979,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":283478,"byte_end":283481,"line_start":980,"line_end":980,"column_start":2,"column_end":5}},{"value":"/ The chunks are slices and do not overlap. If `chunk_size` does not","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":283483,"byte_end":283553,"line_start":981,"line_end":981,"column_start":2,"column_end":72}},{"value":"/ divide the length of the slice, then the last chunk will not have length","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":283555,"byte_end":283631,"line_start":982,"line_end":982,"column_start":2,"column_end":78}},{"value":"/ `chunk_size`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":283633,"byte_end":283650,"line_start":983,"line_end":983,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":283652,"byte_end":283655,"line_start":984,"line_end":984,"column_start":2,"column_end":5}},{"value":"/ See [`rchunks_exact`] for a variant of this iterator that returns chunks","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":283657,"byte_end":283733,"line_start":985,"line_end":985,"column_start":2,"column_end":78}},{"value":"/ of always exactly `chunk_size` bits, and [`chunks`] for the same","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":283735,"byte_end":283803,"line_start":986,"line_end":986,"column_start":2,"column_end":70}},{"value":"/ iterator but starting at the beginning of the slice.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":283805,"byte_end":283861,"line_start":987,"line_end":987,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":283863,"byte_end":283866,"line_start":988,"line_end":988,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":283868,"byte_end":283882,"line_start":989,"line_end":989,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":283884,"byte_end":283887,"line_start":990,"line_end":990,"column_start":2,"column_end":5}},{"value":"/ [`slice::rchunks`](https://doc.rust-lang.org/std/primitive.slice.html#method.rchunks)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":283889,"byte_end":283978,"line_start":991,"line_end":991,"column_start":2,"column_end":91}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":283980,"byte_end":283983,"line_start":992,"line_end":992,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":283985,"byte_end":283997,"line_start":993,"line_end":993,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":283999,"byte_end":284002,"line_start":994,"line_end":994,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":284004,"byte_end":284036,"line_start":995,"line_end":995,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":284038,"byte_end":284041,"line_start":996,"line_end":996,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":284043,"byte_end":284057,"line_start":997,"line_end":997,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":284059,"byte_end":284062,"line_start":998,"line_end":998,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":284064,"byte_end":284075,"line_start":999,"line_end":999,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":284077,"byte_end":284104,"line_start":1000,"line_end":1000,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":284106,"byte_end":284109,"line_start":1001,"line_end":1001,"column_start":2,"column_end":5}},{"value":"/ let data = 0xA5u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":284111,"byte_end":284133,"line_start":1002,"line_end":1002,"column_start":2,"column_end":24}},{"value":"/ let bits = data.view_bits::<Lsb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":284135,"byte_end":284175,"line_start":1003,"line_end":1003,"column_start":2,"column_end":42}},{"value":"/ let mut iter = bits.rchunks(3);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":284177,"byte_end":284212,"line_start":1004,"line_end":1004,"column_start":2,"column_end":37}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[5 ..]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":284214,"byte_end":284264,"line_start":1005,"line_end":1005,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[2 .. 5]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":284266,"byte_end":284318,"line_start":1006,"line_end":1006,"column_start":2,"column_end":54}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[.. 2]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":284320,"byte_end":284370,"line_start":1007,"line_end":1007,"column_start":2,"column_end":52}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":284372,"byte_end":284407,"line_start":1008,"line_end":1008,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":284409,"byte_end":284416,"line_start":1009,"line_end":1009,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":284418,"byte_end":284421,"line_start":1010,"line_end":1010,"column_start":2,"column_end":5}},{"value":"/ [`chunks`]: #method.chunks","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":284423,"byte_end":284453,"line_start":1011,"line_end":1011,"column_start":2,"column_end":32}},{"value":"/ [`rchunks_exact`]: #method.rchunks_exact","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":284455,"byte_end":284499,"line_start":1012,"line_end":1012,"column_start":2,"column_end":46}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":284501,"byte_end":284510,"line_start":1013,"line_end":1013,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1384},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":285773,"byte_end":285784,"line_start":1055,"line_end":1055,"column_start":9,"column_end":20},"name":"rchunks_mut","qualname":"<BitSlice<O, T>>::rchunks_mut","value":"pub fn rchunks_mut(&mut Self, usize) -> RChunksMut<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the end of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":284666,"byte_end":284736,"line_start":1019,"line_end":1019,"column_start":2,"column_end":72}},{"value":"/ starting at the end of the slice.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":284738,"byte_end":284775,"line_start":1020,"line_end":1020,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":284777,"byte_end":284780,"line_start":1021,"line_end":1021,"column_start":2,"column_end":5}},{"value":"/ The chunks are mutable slices, and do not overlap. If `chunk_size` does","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":284782,"byte_end":284857,"line_start":1022,"line_end":1022,"column_start":2,"column_end":77}},{"value":"/ not divide the length of the slice, then the last chunk will not have","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":284859,"byte_end":284932,"line_start":1023,"line_end":1023,"column_start":2,"column_end":75}},{"value":"/ length `chunk_size`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":284934,"byte_end":284958,"line_start":1024,"line_end":1024,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":284960,"byte_end":284963,"line_start":1025,"line_end":1025,"column_start":2,"column_end":5}},{"value":"/ See [`rchunks_exact_mut`] for a variant of this iterator that returns","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":284965,"byte_end":285038,"line_start":1026,"line_end":1026,"column_start":2,"column_end":75}},{"value":"/ chunks of always exactly `chunk_size` bits, and [`chunks_mut`] for the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":285040,"byte_end":285114,"line_start":1027,"line_end":1027,"column_start":2,"column_end":76}},{"value":"/ same iterator but starting at the beginning of the slice.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":285116,"byte_end":285177,"line_start":1028,"line_end":1028,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":285179,"byte_end":285182,"line_start":1029,"line_end":1029,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":285184,"byte_end":285198,"line_start":1030,"line_end":1030,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":285200,"byte_end":285203,"line_start":1031,"line_end":1031,"column_start":2,"column_end":5}},{"value":"/ [`slice::rchunks_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.rchunks_mut)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":285205,"byte_end":285302,"line_start":1032,"line_end":1032,"column_start":2,"column_end":99}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":285304,"byte_end":285307,"line_start":1033,"line_end":1033,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":285309,"byte_end":285321,"line_start":1034,"line_end":1034,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":285323,"byte_end":285326,"line_start":1035,"line_end":1035,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":285328,"byte_end":285360,"line_start":1036,"line_end":1036,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":285362,"byte_end":285365,"line_start":1037,"line_end":1037,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":285367,"byte_end":285381,"line_start":1038,"line_end":1038,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":285383,"byte_end":285386,"line_start":1039,"line_end":1039,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":285388,"byte_end":285399,"line_start":1040,"line_end":1040,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":285401,"byte_end":285428,"line_start":1041,"line_end":1041,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":285430,"byte_end":285433,"line_start":1042,"line_end":1042,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":285435,"byte_end":285458,"line_start":1043,"line_end":1043,"column_start":2,"column_end":25}},{"value":"/ let bits = data.view_bits_mut::<Lsb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":285460,"byte_end":285504,"line_start":1044,"line_end":1044,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":285506,"byte_end":285509,"line_start":1045,"line_end":1045,"column_start":2,"column_end":5}},{"value":"/ for (idx, chunk) in bits.rchunks_mut(3).enumerate() {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":285511,"byte_end":285568,"line_start":1046,"line_end":1046,"column_start":2,"column_end":59}},{"value":"/   chunk.set(2 - idx, true);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":285570,"byte_end":285601,"line_start":1047,"line_end":1047,"column_start":2,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":285603,"byte_end":285608,"line_start":1048,"line_end":1048,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(data, 0b100_010_01);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":285610,"byte_end":285645,"line_start":1049,"line_end":1049,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":285647,"byte_end":285654,"line_start":1050,"line_end":1050,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":285656,"byte_end":285659,"line_start":1051,"line_end":1051,"column_start":2,"column_end":5}},{"value":"/ [`chunks_mut`]: #method.chunks_mut","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":285661,"byte_end":285699,"line_start":1052,"line_end":1052,"column_start":2,"column_end":40}},{"value":"/ [`rchunks_exact_mut`]: #method.rchunks_exact_mut","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":285701,"byte_end":285753,"line_start":1053,"line_end":1053,"column_start":2,"column_end":54}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":285755,"byte_end":285764,"line_start":1054,"line_end":1054,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1385},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":287358,"byte_end":287371,"line_start":1101,"line_end":1101,"column_start":9,"column_end":22},"name":"rchunks_exact","qualname":"<BitSlice<O, T>>::rchunks_exact","value":"pub fn rchunks_exact(&Self, usize) -> RChunksExact<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the end of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":285934,"byte_end":286004,"line_start":1060,"line_end":1060,"column_start":2,"column_end":72}},{"value":"/ starting at the end of the slice.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":286006,"byte_end":286043,"line_start":1061,"line_end":1061,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":286045,"byte_end":286048,"line_start":1062,"line_end":1062,"column_start":2,"column_end":5}},{"value":"/ The chunks are slices and do not overlap. If `chunk_size` does not","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":286050,"byte_end":286120,"line_start":1063,"line_end":1063,"column_start":2,"column_end":72}},{"value":"/ divide the length of the slice, then the last up to `chunk_size-1` bits","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":286122,"byte_end":286197,"line_start":1064,"line_end":1064,"column_start":2,"column_end":77}},{"value":"/ will be omitted and can be retrieved from the `remainder` function of","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":286199,"byte_end":286272,"line_start":1065,"line_end":1065,"column_start":2,"column_end":75}},{"value":"/ the iterator.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":286274,"byte_end":286291,"line_start":1066,"line_end":1066,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":286293,"byte_end":286296,"line_start":1067,"line_end":1067,"column_start":2,"column_end":5}},{"value":"/ Due to each chunk having exactly `chunk_size` bits, the compiler can","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":286298,"byte_end":286370,"line_start":1068,"line_end":1068,"column_start":2,"column_end":74}},{"value":"/ often optimize the resulting code better than in the case of [`chunks`].","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":286372,"byte_end":286448,"line_start":1069,"line_end":1069,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":286450,"byte_end":286453,"line_start":1070,"line_end":1070,"column_start":2,"column_end":5}},{"value":"/ See [`rchunks`] for a variant of this iterator that also returns the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":286455,"byte_end":286527,"line_start":1071,"line_end":1071,"column_start":2,"column_end":74}},{"value":"/ remainder as a smaller chunk, and [`chunks_exact`] for the same iterator","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":286529,"byte_end":286605,"line_start":1072,"line_end":1072,"column_start":2,"column_end":78}},{"value":"/ but starting at the beginning of the slice.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":286607,"byte_end":286654,"line_start":1073,"line_end":1073,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":286656,"byte_end":286659,"line_start":1074,"line_end":1074,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":286661,"byte_end":286675,"line_start":1075,"line_end":1075,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":286677,"byte_end":286680,"line_start":1076,"line_end":1076,"column_start":2,"column_end":5}},{"value":"/ [`slice::rchunks_exact`](https://doc.rust-lang.org/std/primitive.slice.html#method.rchunks_exact)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":286682,"byte_end":286783,"line_start":1077,"line_end":1077,"column_start":2,"column_end":103}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":286785,"byte_end":286788,"line_start":1078,"line_end":1078,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":286790,"byte_end":286802,"line_start":1079,"line_end":1079,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":286804,"byte_end":286807,"line_start":1080,"line_end":1080,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":286809,"byte_end":286841,"line_start":1081,"line_end":1081,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":286843,"byte_end":286846,"line_start":1082,"line_end":1082,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":286848,"byte_end":286862,"line_start":1083,"line_end":1083,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":286864,"byte_end":286867,"line_start":1084,"line_end":1084,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":286869,"byte_end":286880,"line_start":1085,"line_end":1085,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":286882,"byte_end":286909,"line_start":1086,"line_end":1086,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":286911,"byte_end":286914,"line_start":1087,"line_end":1087,"column_start":2,"column_end":5}},{"value":"/ let data = 0xA5u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":286916,"byte_end":286938,"line_start":1088,"line_end":1088,"column_start":2,"column_end":24}},{"value":"/ let bits = data.view_bits::<Lsb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":286940,"byte_end":286980,"line_start":1089,"line_end":1089,"column_start":2,"column_end":42}},{"value":"/ let mut iter = bits.rchunks_exact(3);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":286982,"byte_end":287023,"line_start":1090,"line_end":1090,"column_start":2,"column_end":43}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[5 ..]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":287025,"byte_end":287075,"line_start":1091,"line_end":1091,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[2 .. 5]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":287077,"byte_end":287129,"line_start":1092,"line_end":1092,"column_start":2,"column_end":54}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":287131,"byte_end":287166,"line_start":1093,"line_end":1093,"column_start":2,"column_end":37}},{"value":"/ assert_eq!(iter.remainder(), &bits[.. 2]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":287168,"byte_end":287214,"line_start":1094,"line_end":1094,"column_start":2,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":287216,"byte_end":287223,"line_start":1095,"line_end":1095,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":287225,"byte_end":287228,"line_start":1096,"line_end":1096,"column_start":2,"column_end":5}},{"value":"/ [`chunks`]: #method.chunks","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":287230,"byte_end":287260,"line_start":1097,"line_end":1097,"column_start":2,"column_end":32}},{"value":"/ [`rchunks`]: #method.rchunks","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":287262,"byte_end":287294,"line_start":1098,"line_end":1098,"column_start":2,"column_end":34}},{"value":"/ [`chunks_exact`]: #method.chunks_exact","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":287296,"byte_end":287338,"line_start":1099,"line_end":1099,"column_start":2,"column_end":44}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":287340,"byte_end":287349,"line_start":1100,"line_end":1100,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1386},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":288785,"byte_end":288802,"line_start":1144,"line_end":1144,"column_start":9,"column_end":26},"name":"rchunks_exact_mut","qualname":"<BitSlice<O, T>>::rchunks_exact_mut","value":"pub fn rchunks_exact_mut(&mut Self, usize) -> RChunksExactMut<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the end of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":287521,"byte_end":287591,"line_start":1106,"line_end":1106,"column_start":2,"column_end":72}},{"value":"/ starting at the end of the slice.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":287593,"byte_end":287630,"line_start":1107,"line_end":1107,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":287632,"byte_end":287635,"line_start":1108,"line_end":1108,"column_start":2,"column_end":5}},{"value":"/ The chunks are mutable slices, and do not overlap. If `chunk_size` does","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":287637,"byte_end":287712,"line_start":1109,"line_end":1109,"column_start":2,"column_end":77}},{"value":"/ not divide the length of the slice, then the last up to `chunk_size-1`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":287714,"byte_end":287788,"line_start":1110,"line_end":1110,"column_start":2,"column_end":76}},{"value":"/ bits will be omitted and can be retrieved from the `into_remainder`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":287790,"byte_end":287861,"line_start":1111,"line_end":1111,"column_start":2,"column_end":73}},{"value":"/ function of the iterator.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":287863,"byte_end":287892,"line_start":1112,"line_end":1112,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":287894,"byte_end":287897,"line_start":1113,"line_end":1113,"column_start":2,"column_end":5}},{"value":"/ Due to each chunk having exactly `chunk_size` bits, the compiler can","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":287899,"byte_end":287971,"line_start":1114,"line_end":1114,"column_start":2,"column_end":74}},{"value":"/ often optimize the resulting code better than in the case of","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":287973,"byte_end":288037,"line_start":1115,"line_end":1115,"column_start":2,"column_end":66}},{"value":"/ [`chunks_mut`].","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":288039,"byte_end":288058,"line_start":1116,"line_end":1116,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":288060,"byte_end":288063,"line_start":1117,"line_end":1117,"column_start":2,"column_end":5}},{"value":"/ See [`rchunks_mut`] for a variant of this iterator that also returns the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":288065,"byte_end":288141,"line_start":1118,"line_end":1118,"column_start":2,"column_end":78}},{"value":"/ remainder as a smaller chunk, and [`chunks_exact_mut`] for the same","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":288143,"byte_end":288214,"line_start":1119,"line_end":1119,"column_start":2,"column_end":73}},{"value":"/ iterator but starting at the beginning of the slice.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":288216,"byte_end":288272,"line_start":1120,"line_end":1120,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":288274,"byte_end":288277,"line_start":1121,"line_end":1121,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":288279,"byte_end":288291,"line_start":1122,"line_end":1122,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":288293,"byte_end":288296,"line_start":1123,"line_end":1123,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":288298,"byte_end":288330,"line_start":1124,"line_end":1124,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":288332,"byte_end":288335,"line_start":1125,"line_end":1125,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":288337,"byte_end":288351,"line_start":1126,"line_end":1126,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":288353,"byte_end":288356,"line_start":1127,"line_end":1127,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":288358,"byte_end":288369,"line_start":1128,"line_end":1128,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":288371,"byte_end":288398,"line_start":1129,"line_end":1129,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":288400,"byte_end":288403,"line_start":1130,"line_end":1130,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":288405,"byte_end":288428,"line_start":1131,"line_end":1131,"column_start":2,"column_end":25}},{"value":"/ let bits = data.view_bits_mut::<Lsb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":288430,"byte_end":288474,"line_start":1132,"line_end":1132,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":288476,"byte_end":288479,"line_start":1133,"line_end":1133,"column_start":2,"column_end":5}},{"value":"/ for (idx, chunk) in bits.rchunks_exact_mut(3).enumerate() {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":288481,"byte_end":288544,"line_start":1134,"line_end":1134,"column_start":2,"column_end":65}},{"value":"/   chunk.set(idx, true);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":288546,"byte_end":288573,"line_start":1135,"line_end":1135,"column_start":2,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":288575,"byte_end":288580,"line_start":1136,"line_end":1136,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(data, 0b001_010_00);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":288582,"byte_end":288617,"line_start":1137,"line_end":1137,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":288619,"byte_end":288626,"line_start":1138,"line_end":1138,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":288628,"byte_end":288631,"line_start":1139,"line_end":1139,"column_start":2,"column_end":5}},{"value":"/ [`chunks_mut`]: #method.chunks_mut","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":288633,"byte_end":288671,"line_start":1140,"line_end":1140,"column_start":2,"column_end":40}},{"value":"/ [`rchunks_mut`]: #method.rchunks_mut","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":288673,"byte_end":288713,"line_start":1141,"line_end":1141,"column_start":2,"column_end":42}},{"value":"/ [`chunks_exact_mut`]: #method.chunks_exact_mut","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":288715,"byte_end":288765,"line_start":1142,"line_end":1142,"column_start":2,"column_end":52}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":288767,"byte_end":288776,"line_start":1143,"line_end":1143,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1387},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":289897,"byte_end":289905,"line_start":1188,"line_end":1188,"column_start":9,"column_end":17},"name":"split_at","qualname":"<BitSlice<O, T>>::split_at","value":"pub fn split_at(&Self, usize) -> (&Self, &Self)","parent":null,"children":[],"decl_id":null,"docs":" Divides one slice into two at an index.","sig":null,"attributes":[{"value":"/ Divides one slice into two at an index.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":288971,"byte_end":289014,"line_start":1153,"line_end":1153,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":289016,"byte_end":289019,"line_start":1154,"line_end":1154,"column_start":2,"column_end":5}},{"value":"/ The first will contain all indices from `[0, mid)` (excluding the index","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":289021,"byte_end":289096,"line_start":1155,"line_end":1155,"column_start":2,"column_end":77}},{"value":"/ `mid` itself) and the second will contain all indices from `[mid, len)`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":289098,"byte_end":289173,"line_start":1156,"line_end":1156,"column_start":2,"column_end":77}},{"value":"/ (excluding the index `len` itself).","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":289175,"byte_end":289214,"line_start":1157,"line_end":1157,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":289216,"byte_end":289219,"line_start":1158,"line_end":1158,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":289221,"byte_end":289235,"line_start":1159,"line_end":1159,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":289237,"byte_end":289240,"line_start":1160,"line_end":1160,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_at`](https://doc.rust-lang.org/std/primitive.slice.html#method.split_at)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":289242,"byte_end":289333,"line_start":1161,"line_end":1161,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":289335,"byte_end":289338,"line_start":1162,"line_end":1162,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":289340,"byte_end":289352,"line_start":1163,"line_end":1163,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":289354,"byte_end":289357,"line_start":1164,"line_end":1164,"column_start":2,"column_end":5}},{"value":"/ Panics if `mid > len`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":289359,"byte_end":289385,"line_start":1165,"line_end":1165,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":289387,"byte_end":289390,"line_start":1166,"line_end":1166,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":289392,"byte_end":289406,"line_start":1167,"line_end":1167,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":289408,"byte_end":289411,"line_start":1168,"line_end":1168,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":289413,"byte_end":289424,"line_start":1169,"line_end":1169,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":289426,"byte_end":289453,"line_start":1170,"line_end":1170,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":289455,"byte_end":289458,"line_start":1171,"line_end":1171,"column_start":2,"column_end":5}},{"value":"/ let data = 0xC3u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":289460,"byte_end":289482,"line_start":1172,"line_end":1172,"column_start":2,"column_end":24}},{"value":"/ let bits = data.view_bits::<LocalBits>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":289484,"byte_end":289529,"line_start":1173,"line_end":1173,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":289531,"byte_end":289534,"line_start":1174,"line_end":1174,"column_start":2,"column_end":5}},{"value":"/ let (left, right) = bits.split_at(0);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":289536,"byte_end":289577,"line_start":1175,"line_end":1175,"column_start":2,"column_end":43}},{"value":"/ assert!(left.is_empty());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":289579,"byte_end":289608,"line_start":1176,"line_end":1176,"column_start":2,"column_end":31}},{"value":"/ assert_eq!(right, bits);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":289610,"byte_end":289638,"line_start":1177,"line_end":1177,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":289640,"byte_end":289643,"line_start":1178,"line_end":1178,"column_start":2,"column_end":5}},{"value":"/ let (left, right) = bits.split_at(2);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":289645,"byte_end":289686,"line_start":1179,"line_end":1179,"column_start":2,"column_end":43}},{"value":"/ assert_eq!(left, &bits[.. 2]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":289688,"byte_end":289722,"line_start":1180,"line_end":1180,"column_start":2,"column_end":36}},{"value":"/ assert_eq!(right, &bits[2 ..]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":289724,"byte_end":289759,"line_start":1181,"line_end":1181,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":289761,"byte_end":289764,"line_start":1182,"line_end":1182,"column_start":2,"column_end":5}},{"value":"/ let (left, right) = bits.split_at(8);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":289766,"byte_end":289807,"line_start":1183,"line_end":1183,"column_start":2,"column_end":43}},{"value":"/ assert_eq!(left, bits);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":289809,"byte_end":289836,"line_start":1184,"line_end":1184,"column_start":2,"column_end":29}},{"value":"/ assert!(right.is_empty());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":289838,"byte_end":289868,"line_start":1185,"line_end":1185,"column_start":2,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":289870,"byte_end":289877,"line_start":1186,"line_end":1186,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":289879,"byte_end":289888,"line_start":1187,"line_end":1187,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1388},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":291737,"byte_end":291749,"line_start":1241,"line_end":1241,"column_start":9,"column_end":21},"name":"split_at_mut","qualname":"<BitSlice<O, T>>::split_at_mut","value":"pub fn split_at_mut(&mut Self, usize)\n-> (&mut BitSlice<O, T::Alias>, &mut BitSlice<O, T::Alias>)","parent":null,"children":[],"decl_id":null,"docs":" Divides one mutable slice into two at an index.","sig":null,"attributes":[{"value":"/ Divides one mutable slice into two at an index.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":290079,"byte_end":290130,"line_start":1194,"line_end":1194,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":290132,"byte_end":290135,"line_start":1195,"line_end":1195,"column_start":2,"column_end":5}},{"value":"/ The first will contain all indices from `[0, mid)` (excluding the index","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":290137,"byte_end":290212,"line_start":1196,"line_end":1196,"column_start":2,"column_end":77}},{"value":"/ `mid` itself) and the second will contain all indices from `[mid, len)`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":290214,"byte_end":290289,"line_start":1197,"line_end":1197,"column_start":2,"column_end":77}},{"value":"/ (excluding the index `len` itself).","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":290291,"byte_end":290330,"line_start":1198,"line_end":1198,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":290332,"byte_end":290335,"line_start":1199,"line_end":1199,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":290337,"byte_end":290351,"line_start":1200,"line_end":1200,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":290353,"byte_end":290356,"line_start":1201,"line_end":1201,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_at_mut`](https://doc.rust-lang.org/std/primitive.html#method.split_at_mut)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":290358,"byte_end":290451,"line_start":1202,"line_end":1202,"column_start":2,"column_end":95}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":290453,"byte_end":290456,"line_start":1203,"line_end":1203,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":290458,"byte_end":290479,"line_start":1204,"line_end":1204,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":290481,"byte_end":290484,"line_start":1205,"line_end":1205,"column_start":2,"column_end":5}},{"value":"/ Because the partition point `mid` is permitted to occur in the interior","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":290486,"byte_end":290561,"line_start":1206,"line_end":1206,"column_start":2,"column_end":77}},{"value":"/ of a memory element `T`, this method is required to mark the returned","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":290563,"byte_end":290636,"line_start":1207,"line_end":1207,"column_start":2,"column_end":75}},{"value":"/ slices as being to aliased memory. This marking ensures that writes to","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":290638,"byte_end":290712,"line_start":1208,"line_end":1208,"column_start":2,"column_end":76}},{"value":"/ the covered memory use the appropriate synchronization behavior of your","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":290714,"byte_end":290789,"line_start":1209,"line_end":1209,"column_start":2,"column_end":77}},{"value":"/ build to avoid data races – by default, this makes all writes atomic; on","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":290791,"byte_end":290869,"line_start":1210,"line_end":1210,"column_start":2,"column_end":78}},{"value":"/ builds with the `atomic` feature disabled, this uses `Cell`s and","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":290871,"byte_end":290939,"line_start":1211,"line_end":1211,"column_start":2,"column_end":70}},{"value":"/ forbids the produced subslices from leaving the current thread.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":290941,"byte_end":291008,"line_start":1212,"line_end":1212,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":291010,"byte_end":291013,"line_start":1213,"line_end":1213,"column_start":2,"column_end":5}},{"value":"/ See the [`BitStore`] documentation for more information.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":291015,"byte_end":291075,"line_start":1214,"line_end":1214,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":291077,"byte_end":291080,"line_start":1215,"line_end":1215,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":291082,"byte_end":291094,"line_start":1216,"line_end":1216,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":291096,"byte_end":291099,"line_start":1217,"line_end":1217,"column_start":2,"column_end":5}},{"value":"/ Panics if `mid > len`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":291101,"byte_end":291127,"line_start":1218,"line_end":1218,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":291129,"byte_end":291132,"line_start":1219,"line_end":1219,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":291134,"byte_end":291148,"line_start":1220,"line_end":1220,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":291150,"byte_end":291153,"line_start":1221,"line_end":1221,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":291155,"byte_end":291166,"line_start":1222,"line_end":1222,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":291168,"byte_end":291195,"line_start":1223,"line_end":1223,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":291197,"byte_end":291200,"line_start":1224,"line_end":1224,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":291202,"byte_end":291225,"line_start":1225,"line_end":1225,"column_start":2,"column_end":25}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":291227,"byte_end":291271,"line_start":1226,"line_end":1226,"column_start":2,"column_end":46}},{"value":"/ // scoped to restrict the lifetime of the borrows","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":291273,"byte_end":291326,"line_start":1227,"line_end":1227,"column_start":2,"column_end":55}},{"value":"/ {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":291328,"byte_end":291333,"line_start":1228,"line_end":1228,"column_start":2,"column_end":7}},{"value":"/   let (left, right) = bits.split_at_mut(3);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":291335,"byte_end":291382,"line_start":1229,"line_end":1229,"column_start":2,"column_end":49}},{"value":"/   *left.get_mut(1).unwrap() = true;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":291384,"byte_end":291423,"line_start":1230,"line_end":1230,"column_start":2,"column_end":41}},{"value":"/   *right.get_mut(2).unwrap() = true;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":291425,"byte_end":291465,"line_start":1231,"line_end":1231,"column_start":2,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":291467,"byte_end":291472,"line_start":1232,"line_end":1232,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(data, 0b010_00100);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":291474,"byte_end":291508,"line_start":1233,"line_end":1233,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":291510,"byte_end":291517,"line_start":1234,"line_end":1234,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":291519,"byte_end":291522,"line_start":1235,"line_end":1235,"column_start":2,"column_end":5}},{"value":"/ [`BitStore`]: ../store/trait.BitStore.html","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":291524,"byte_end":291570,"line_start":1236,"line_end":1236,"column_start":2,"column_end":48}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":291572,"byte_end":291581,"line_start":1237,"line_end":1237,"column_start":2,"column_end":11}},{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":291695,"byte_end":291728,"line_start":1240,"line_end":1240,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1389},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":293874,"byte_end":293879,"line_start":1311,"line_end":1311,"column_start":9,"column_end":14},"name":"split","qualname":"<BitSlice<O, T>>::split","value":"pub fn split<F>(&Self, F) -> Split<, O, T, F> where F: FnMut(usize, &bool) ->\nbool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over subslices separated by bits that match `pred`.\n The matched bit is not contained in the subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over subslices separated by bits that match `pred`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":291982,"byte_end":292057,"line_start":1251,"line_end":1251,"column_start":2,"column_end":77}},{"value":"/ The matched bit is not contained in the subslices.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":292059,"byte_end":292113,"line_start":1252,"line_end":1252,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":292115,"byte_end":292118,"line_start":1253,"line_end":1253,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":292120,"byte_end":292134,"line_start":1254,"line_end":1254,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":292136,"byte_end":292139,"line_start":1255,"line_end":1255,"column_start":2,"column_end":5}},{"value":"/ [`slice::split`](https://doc.rust-lang.org/std/primitive.slice.html#method.split)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":292141,"byte_end":292226,"line_start":1256,"line_end":1256,"column_start":2,"column_end":87}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":292228,"byte_end":292231,"line_start":1257,"line_end":1257,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":292233,"byte_end":292254,"line_start":1258,"line_end":1258,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":292256,"byte_end":292259,"line_start":1259,"line_end":1259,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":292261,"byte_end":292329,"line_start":1260,"line_end":1260,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":292331,"byte_end":292405,"line_start":1261,"line_end":1261,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":292407,"byte_end":292417,"line_start":1262,"line_end":1262,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":292419,"byte_end":292422,"line_start":1263,"line_end":1263,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":292424,"byte_end":292438,"line_start":1264,"line_end":1264,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":292440,"byte_end":292443,"line_start":1265,"line_end":1265,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":292445,"byte_end":292456,"line_start":1266,"line_end":1266,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":292458,"byte_end":292485,"line_start":1267,"line_end":1267,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":292487,"byte_end":292490,"line_start":1268,"line_end":1268,"column_start":2,"column_end":5}},{"value":"/ let data = 0b01_001_000u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":292492,"byte_end":292522,"line_start":1269,"line_end":1269,"column_start":2,"column_end":32}},{"value":"/ let bits = data.view_bits::<Msb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":292524,"byte_end":292564,"line_start":1270,"line_end":1270,"column_start":2,"column_end":42}},{"value":"/ let mut iter = bits.split(|_pos, bit| *bit);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":292566,"byte_end":292614,"line_start":1271,"line_end":1271,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":292616,"byte_end":292619,"line_start":1272,"line_end":1272,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[.. 1]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":292621,"byte_end":292671,"line_start":1273,"line_end":1273,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[2 .. 4]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":292673,"byte_end":292725,"line_start":1274,"line_end":1274,"column_start":2,"column_end":54}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[5 ..]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":292727,"byte_end":292777,"line_start":1275,"line_end":1275,"column_start":2,"column_end":52}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":292779,"byte_end":292814,"line_start":1276,"line_end":1276,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":292816,"byte_end":292823,"line_start":1277,"line_end":1277,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":292825,"byte_end":292828,"line_start":1278,"line_end":1278,"column_start":2,"column_end":5}},{"value":"/ If the first bit is matched, an empty slice will be the first item","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":292830,"byte_end":292900,"line_start":1279,"line_end":1279,"column_start":2,"column_end":72}},{"value":"/ returned by the iterator. Similarly, if the last element in the slice is","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":292902,"byte_end":292978,"line_start":1280,"line_end":1280,"column_start":2,"column_end":78}},{"value":"/ matched, an empty slice will be the last item returned by the iterator:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":292980,"byte_end":293055,"line_start":1281,"line_end":1281,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":293057,"byte_end":293060,"line_start":1282,"line_end":1282,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":293062,"byte_end":293073,"line_start":1283,"line_end":1283,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":293075,"byte_end":293102,"line_start":1284,"line_end":1284,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":293104,"byte_end":293107,"line_start":1285,"line_end":1285,"column_start":2,"column_end":5}},{"value":"/ let data = 1u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":293109,"byte_end":293128,"line_start":1286,"line_end":1286,"column_start":2,"column_end":21}},{"value":"/ let bits = data.view_bits::<Msb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":293130,"byte_end":293170,"line_start":1287,"line_end":1287,"column_start":2,"column_end":42}},{"value":"/ let mut iter = bits.split(|_pos, bit| *bit);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":293172,"byte_end":293220,"line_start":1288,"line_end":1288,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":293222,"byte_end":293225,"line_start":1289,"line_end":1289,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[.. 7]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":293227,"byte_end":293277,"line_start":1290,"line_end":1290,"column_start":2,"column_end":52}},{"value":"/ assert!(iter.next().unwrap().is_empty());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":293279,"byte_end":293324,"line_start":1291,"line_end":1291,"column_start":2,"column_end":47}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":293326,"byte_end":293361,"line_start":1292,"line_end":1292,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":293363,"byte_end":293370,"line_start":1293,"line_end":1293,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":293372,"byte_end":293375,"line_start":1294,"line_end":1294,"column_start":2,"column_end":5}},{"value":"/ If two matched bits are directly adjacent, an empty slice will be","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":293377,"byte_end":293446,"line_start":1295,"line_end":1295,"column_start":2,"column_end":71}},{"value":"/ present between them:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":293448,"byte_end":293473,"line_start":1296,"line_end":1296,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":293475,"byte_end":293478,"line_start":1297,"line_end":1297,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":293480,"byte_end":293491,"line_start":1298,"line_end":1298,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":293493,"byte_end":293520,"line_start":1299,"line_end":1299,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":293522,"byte_end":293525,"line_start":1300,"line_end":1300,"column_start":2,"column_end":5}},{"value":"/ let data = 0b001_100_00u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":293527,"byte_end":293557,"line_start":1301,"line_end":1301,"column_start":2,"column_end":32}},{"value":"/ let bits = data.view_bits::<Msb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":293559,"byte_end":293599,"line_start":1302,"line_end":1302,"column_start":2,"column_end":42}},{"value":"/ let mut iter = bits.split(|pos, bit| *bit);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":293601,"byte_end":293648,"line_start":1303,"line_end":1303,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":293650,"byte_end":293653,"line_start":1304,"line_end":1304,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[0 .. 2]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":293655,"byte_end":293707,"line_start":1305,"line_end":1305,"column_start":2,"column_end":54}},{"value":"/ assert!(iter.next().unwrap().is_empty());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":293709,"byte_end":293754,"line_start":1306,"line_end":1306,"column_start":2,"column_end":47}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[4 .. 8]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":293756,"byte_end":293808,"line_start":1307,"line_end":1307,"column_start":2,"column_end":54}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":293810,"byte_end":293845,"line_start":1308,"line_end":1308,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":293847,"byte_end":293854,"line_start":1309,"line_end":1309,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":293856,"byte_end":293865,"line_start":1310,"line_end":1310,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1391},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":294766,"byte_end":294775,"line_start":1343,"line_end":1343,"column_start":9,"column_end":18},"name":"split_mut","qualname":"<BitSlice<O, T>>::split_mut","value":"pub fn split_mut<F>(&mut Self, F) -> SplitMut<, O, T, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over mutable subslices separated by bits that match\n `pred`. The matched bit is not contained in the subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over mutable subslices separated by bits that match","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":293987,"byte_end":294062,"line_start":1316,"line_end":1316,"column_start":2,"column_end":77}},{"value":"/ `pred`. The matched bit is not contained in the subslices.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":294064,"byte_end":294126,"line_start":1317,"line_end":1317,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":294128,"byte_end":294131,"line_start":1318,"line_end":1318,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":294133,"byte_end":294147,"line_start":1319,"line_end":1319,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":294149,"byte_end":294152,"line_start":1320,"line_end":1320,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.split_mut)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":294154,"byte_end":294247,"line_start":1321,"line_end":1321,"column_start":2,"column_end":95}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":294249,"byte_end":294252,"line_start":1322,"line_end":1322,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":294254,"byte_end":294275,"line_start":1323,"line_end":1323,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":294277,"byte_end":294280,"line_start":1324,"line_end":1324,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":294282,"byte_end":294350,"line_start":1325,"line_end":1325,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":294352,"byte_end":294426,"line_start":1326,"line_end":1326,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":294428,"byte_end":294438,"line_start":1327,"line_end":1327,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":294440,"byte_end":294443,"line_start":1328,"line_end":1328,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":294445,"byte_end":294459,"line_start":1329,"line_end":1329,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":294461,"byte_end":294464,"line_start":1330,"line_end":1330,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":294466,"byte_end":294477,"line_start":1331,"line_end":1331,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":294479,"byte_end":294506,"line_start":1332,"line_end":1332,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":294508,"byte_end":294511,"line_start":1333,"line_end":1333,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0b001_000_10u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":294513,"byte_end":294547,"line_start":1334,"line_end":1334,"column_start":2,"column_end":36}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":294549,"byte_end":294593,"line_start":1335,"line_end":1335,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":294595,"byte_end":294598,"line_start":1336,"line_end":1336,"column_start":2,"column_end":5}},{"value":"/ for group in bits.split_mut(|_pos, bit| *bit) {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":294600,"byte_end":294651,"line_start":1337,"line_end":1337,"column_start":2,"column_end":53}},{"value":"/   *group.get_mut(0).unwrap() = true;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":294653,"byte_end":294693,"line_start":1338,"line_end":1338,"column_start":2,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":294695,"byte_end":294700,"line_start":1339,"line_end":1339,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(data, 0b101_100_11);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":294702,"byte_end":294737,"line_start":1340,"line_end":1340,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":294739,"byte_end":294746,"line_start":1341,"line_end":1341,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":294748,"byte_end":294757,"line_start":1342,"line_end":1342,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1393},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":296344,"byte_end":296350,"line_start":1392,"line_end":1392,"column_start":9,"column_end":15},"name":"rsplit","qualname":"<BitSlice<O, T>>::rsplit","value":"pub fn rsplit<F>(&Self, F) -> RSplit<, O, T, F> where F: FnMut(usize, &bool)\n-> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over subslices separated by bits that match `pred`,\n starting at the end of the slice and working backwards. The matched bit\n is not contained in the subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over subslices separated by bits that match `pred`,","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":294905,"byte_end":294980,"line_start":1348,"line_end":1348,"column_start":2,"column_end":77}},{"value":"/ starting at the end of the slice and working backwards. The matched bit","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":294982,"byte_end":295057,"line_start":1349,"line_end":1349,"column_start":2,"column_end":77}},{"value":"/ is not contained in the subslices.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":295059,"byte_end":295097,"line_start":1350,"line_end":1350,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":295099,"byte_end":295102,"line_start":1351,"line_end":1351,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":295104,"byte_end":295118,"line_start":1352,"line_end":1352,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":295120,"byte_end":295123,"line_start":1353,"line_end":1353,"column_start":2,"column_end":5}},{"value":"/ [`slice::rsplit`](https://doc.rust-lang.org/std/primitive.slice.html#method.rsplit)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":295125,"byte_end":295212,"line_start":1354,"line_end":1354,"column_start":2,"column_end":89}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":295214,"byte_end":295217,"line_start":1355,"line_end":1355,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":295219,"byte_end":295240,"line_start":1356,"line_end":1356,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":295242,"byte_end":295245,"line_start":1357,"line_end":1357,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":295247,"byte_end":295315,"line_start":1358,"line_end":1358,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":295317,"byte_end":295391,"line_start":1359,"line_end":1359,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":295393,"byte_end":295403,"line_start":1360,"line_end":1360,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":295405,"byte_end":295408,"line_start":1361,"line_end":1361,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":295410,"byte_end":295424,"line_start":1362,"line_end":1362,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":295426,"byte_end":295429,"line_start":1363,"line_end":1363,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":295431,"byte_end":295442,"line_start":1364,"line_end":1364,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":295444,"byte_end":295471,"line_start":1365,"line_end":1365,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":295473,"byte_end":295476,"line_start":1366,"line_end":1366,"column_start":2,"column_end":5}},{"value":"/ let data = 0b0001_0000u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":295478,"byte_end":295507,"line_start":1367,"line_end":1367,"column_start":2,"column_end":31}},{"value":"/ let bits = data.view_bits::<Msb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":295509,"byte_end":295549,"line_start":1368,"line_end":1368,"column_start":2,"column_end":42}},{"value":"/ let mut iter = bits.rsplit(|_pos, bit| *bit);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":295551,"byte_end":295600,"line_start":1369,"line_end":1369,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":295602,"byte_end":295605,"line_start":1370,"line_end":1370,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[4 ..]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":295607,"byte_end":295657,"line_start":1371,"line_end":1371,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[.. 3]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":295659,"byte_end":295709,"line_start":1372,"line_end":1372,"column_start":2,"column_end":52}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":295711,"byte_end":295746,"line_start":1373,"line_end":1373,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":295748,"byte_end":295755,"line_start":1374,"line_end":1374,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":295757,"byte_end":295760,"line_start":1375,"line_end":1375,"column_start":2,"column_end":5}},{"value":"/ As with `split()`, if the first or last bit is matched, an empty slice","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":295762,"byte_end":295836,"line_start":1376,"line_end":1376,"column_start":2,"column_end":76}},{"value":"/ will be the first (or last) item returned by the iterator.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":295838,"byte_end":295900,"line_start":1377,"line_end":1377,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":295902,"byte_end":295905,"line_start":1378,"line_end":1378,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":295907,"byte_end":295918,"line_start":1379,"line_end":1379,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":295920,"byte_end":295947,"line_start":1380,"line_end":1380,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":295949,"byte_end":295952,"line_start":1381,"line_end":1381,"column_start":2,"column_end":5}},{"value":"/ let data = 0b1001_0001u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":295954,"byte_end":295983,"line_start":1382,"line_end":1382,"column_start":2,"column_end":31}},{"value":"/ let bits = data.view_bits::<Msb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":295985,"byte_end":296025,"line_start":1383,"line_end":1383,"column_start":2,"column_end":42}},{"value":"/ let mut iter = bits.rsplit(|_pos, bit| *bit);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":296027,"byte_end":296076,"line_start":1384,"line_end":1384,"column_start":2,"column_end":51}},{"value":"/ assert!(iter.next().unwrap().is_empty());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":296078,"byte_end":296123,"line_start":1385,"line_end":1385,"column_start":2,"column_end":47}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[4 .. 7]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":296125,"byte_end":296177,"line_start":1386,"line_end":1386,"column_start":2,"column_end":54}},{"value":"/ assert_eq!(iter.next().unwrap(), &bits[1 .. 3]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":296179,"byte_end":296231,"line_start":1387,"line_end":1387,"column_start":2,"column_end":54}},{"value":"/ assert!(iter.next().unwrap().is_empty());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":296233,"byte_end":296278,"line_start":1388,"line_end":1388,"column_start":2,"column_end":47}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":296280,"byte_end":296315,"line_start":1389,"line_end":1389,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":296317,"byte_end":296324,"line_start":1390,"line_end":1390,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":296326,"byte_end":296335,"line_start":1391,"line_end":1391,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1395},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":297303,"byte_end":297313,"line_start":1425,"line_end":1425,"column_start":9,"column_end":19},"name":"rsplit_mut","qualname":"<BitSlice<O, T>>::rsplit_mut","value":"pub fn rsplit_mut<F>(&mut Self, F) -> RSplitMut<, O, T, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over mutable subslices separated by bits that match\n `pred`, starting at the end of the slice and working backwards. The\n matched bit is not contained in the subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over mutable subslices separated by bits that match","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":296460,"byte_end":296535,"line_start":1397,"line_end":1397,"column_start":2,"column_end":77}},{"value":"/ `pred`, starting at the end of the slice and working backwards. The","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":296537,"byte_end":296608,"line_start":1398,"line_end":1398,"column_start":2,"column_end":73}},{"value":"/ matched bit is not contained in the subslices.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":296610,"byte_end":296660,"line_start":1399,"line_end":1399,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":296662,"byte_end":296665,"line_start":1400,"line_end":1400,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":296667,"byte_end":296681,"line_start":1401,"line_end":1401,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":296683,"byte_end":296686,"line_start":1402,"line_end":1402,"column_start":2,"column_end":5}},{"value":"/ [`slice::rsplit_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.rsplit_mut)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":296688,"byte_end":296783,"line_start":1403,"line_end":1403,"column_start":2,"column_end":97}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":296785,"byte_end":296788,"line_start":1404,"line_end":1404,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":296790,"byte_end":296811,"line_start":1405,"line_end":1405,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":296813,"byte_end":296816,"line_start":1406,"line_end":1406,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":296818,"byte_end":296886,"line_start":1407,"line_end":1407,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":296888,"byte_end":296962,"line_start":1408,"line_end":1408,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":296964,"byte_end":296974,"line_start":1409,"line_end":1409,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":296976,"byte_end":296979,"line_start":1410,"line_end":1410,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":296981,"byte_end":296995,"line_start":1411,"line_end":1411,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":296997,"byte_end":297000,"line_start":1412,"line_end":1412,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":297002,"byte_end":297013,"line_start":1413,"line_end":1413,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":297015,"byte_end":297042,"line_start":1414,"line_end":1414,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":297044,"byte_end":297047,"line_start":1415,"line_end":1415,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0b001_000_10u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":297049,"byte_end":297083,"line_start":1416,"line_end":1416,"column_start":2,"column_end":36}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":297085,"byte_end":297129,"line_start":1417,"line_end":1417,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":297131,"byte_end":297134,"line_start":1418,"line_end":1418,"column_start":2,"column_end":5}},{"value":"/ for group in bits.rsplit_mut(|_pos, bit| *bit) {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":297136,"byte_end":297188,"line_start":1419,"line_end":1419,"column_start":2,"column_end":54}},{"value":"/   *group.get_mut(0).unwrap() = true;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":297190,"byte_end":297230,"line_start":1420,"line_end":1420,"column_start":2,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":297232,"byte_end":297237,"line_start":1421,"line_end":1421,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(data, 0b101_100_11);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":297239,"byte_end":297274,"line_start":1422,"line_end":1422,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":297276,"byte_end":297283,"line_start":1423,"line_end":1423,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":297285,"byte_end":297294,"line_start":1424,"line_end":1424,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1397},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":298386,"byte_end":298392,"line_start":1465,"line_end":1465,"column_start":9,"column_end":15},"name":"splitn","qualname":"<BitSlice<O, T>>::splitn","value":"pub fn splitn<F>(&Self, usize, F) -> SplitN<, O, T, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over subslices separated by bits that match `pred`,\n limited to returning at most `n` items. The matched bit is not contained\n in the subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over subslices separated by bits that match `pred`,","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":297445,"byte_end":297520,"line_start":1430,"line_end":1430,"column_start":2,"column_end":77}},{"value":"/ limited to returning at most `n` items. The matched bit is not contained","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":297522,"byte_end":297598,"line_start":1431,"line_end":1431,"column_start":2,"column_end":78}},{"value":"/ in the subslices.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":297600,"byte_end":297621,"line_start":1432,"line_end":1432,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":297623,"byte_end":297626,"line_start":1433,"line_end":1433,"column_start":2,"column_end":5}},{"value":"/ The last item returned, if any, will contain the remainder of the slice.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":297628,"byte_end":297704,"line_start":1434,"line_end":1434,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":297706,"byte_end":297709,"line_start":1435,"line_end":1435,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":297711,"byte_end":297725,"line_start":1436,"line_end":1436,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":297727,"byte_end":297730,"line_start":1437,"line_end":1437,"column_start":2,"column_end":5}},{"value":"/ [`slice::splitn`](https://doc.rust-lang.org/std/primitive.slice.html#method.splitn)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":297732,"byte_end":297819,"line_start":1438,"line_end":1438,"column_start":2,"column_end":89}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":297821,"byte_end":297824,"line_start":1439,"line_end":1439,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":297826,"byte_end":297847,"line_start":1440,"line_end":1440,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":297849,"byte_end":297852,"line_start":1441,"line_end":1441,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":297854,"byte_end":297922,"line_start":1442,"line_end":1442,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":297924,"byte_end":297998,"line_start":1443,"line_end":1443,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":298000,"byte_end":298010,"line_start":1444,"line_end":1444,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":298012,"byte_end":298015,"line_start":1445,"line_end":1445,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":298017,"byte_end":298031,"line_start":1446,"line_end":1446,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":298033,"byte_end":298036,"line_start":1447,"line_end":1447,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":298038,"byte_end":298049,"line_start":1448,"line_end":1448,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":298051,"byte_end":298078,"line_start":1449,"line_end":1449,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":298080,"byte_end":298083,"line_start":1450,"line_end":1450,"column_start":2,"column_end":5}},{"value":"/ let data = 0xA5u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":298085,"byte_end":298107,"line_start":1451,"line_end":1451,"column_start":2,"column_end":24}},{"value":"/ let bits = data.view_bits::<Msb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":298109,"byte_end":298149,"line_start":1452,"line_end":1452,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":298151,"byte_end":298154,"line_start":1453,"line_end":1453,"column_start":2,"column_end":5}},{"value":"/ for group in bits.splitn(2, |pos, _bit| pos % 3 == 2) {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":298156,"byte_end":298215,"line_start":1454,"line_end":1454,"column_start":2,"column_end":61}},{"value":"/ # #[cfg(feature = \"std\")] {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":298217,"byte_end":298248,"line_start":1455,"line_end":1455,"column_start":2,"column_end":33}},{"value":"/   println!(\"{}\", group.len());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":298250,"byte_end":298284,"line_start":1456,"line_end":1456,"column_start":2,"column_end":36}},{"value":"/ # }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":298286,"byte_end":298293,"line_start":1457,"line_end":1457,"column_start":2,"column_end":9}},{"value":"/ }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":298295,"byte_end":298300,"line_start":1458,"line_end":1458,"column_start":2,"column_end":7}},{"value":"/ //  2","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":298302,"byte_end":298311,"line_start":1459,"line_end":1459,"column_start":2,"column_end":11}},{"value":"/ //  5","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":298313,"byte_end":298322,"line_start":1460,"line_end":1460,"column_start":2,"column_end":11}},{"value":"/ # //  [10]","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":298324,"byte_end":298338,"line_start":1461,"line_end":1461,"column_start":2,"column_end":16}},{"value":"/ # //  [00101]","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":298340,"byte_end":298357,"line_start":1462,"line_end":1462,"column_start":2,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":298359,"byte_end":298366,"line_start":1463,"line_end":1463,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":298368,"byte_end":298377,"line_start":1464,"line_end":1464,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1399},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":299424,"byte_end":299434,"line_start":1500,"line_end":1500,"column_start":9,"column_end":19},"name":"splitn_mut","qualname":"<BitSlice<O, T>>::splitn_mut","value":"pub fn splitn_mut<F>(&mut Self, usize, F) -> SplitNMut<, O, T, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over subslices separated by bits that match `pred`,\n limited to returning at most `n` items. The matched element is not\n contained in the subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over subslices separated by bits that match `pred`,","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":298515,"byte_end":298590,"line_start":1470,"line_end":1470,"column_start":2,"column_end":77}},{"value":"/ limited to returning at most `n` items. The matched element is not","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":298592,"byte_end":298662,"line_start":1471,"line_end":1471,"column_start":2,"column_end":72}},{"value":"/ contained in the subslices.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":298664,"byte_end":298695,"line_start":1472,"line_end":1472,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":298697,"byte_end":298700,"line_start":1473,"line_end":1473,"column_start":2,"column_end":5}},{"value":"/ The last item returned, if any, will contain the remainder of the slice.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":298702,"byte_end":298778,"line_start":1474,"line_end":1474,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":298780,"byte_end":298783,"line_start":1475,"line_end":1475,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":298785,"byte_end":298799,"line_start":1476,"line_end":1476,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":298801,"byte_end":298804,"line_start":1477,"line_end":1477,"column_start":2,"column_end":5}},{"value":"/ [`slice::splitn_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.splitn_mut)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":298806,"byte_end":298901,"line_start":1478,"line_end":1478,"column_start":2,"column_end":97}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":298903,"byte_end":298906,"line_start":1479,"line_end":1479,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":298908,"byte_end":298929,"line_start":1480,"line_end":1480,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":298931,"byte_end":298934,"line_start":1481,"line_end":1481,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":298936,"byte_end":299004,"line_start":1482,"line_end":1482,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":299006,"byte_end":299080,"line_start":1483,"line_end":1483,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":299082,"byte_end":299092,"line_start":1484,"line_end":1484,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":299094,"byte_end":299097,"line_start":1485,"line_end":1485,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":299099,"byte_end":299113,"line_start":1486,"line_end":1486,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":299115,"byte_end":299118,"line_start":1487,"line_end":1487,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":299120,"byte_end":299131,"line_start":1488,"line_end":1488,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":299133,"byte_end":299160,"line_start":1489,"line_end":1489,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":299162,"byte_end":299165,"line_start":1490,"line_end":1490,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0b001_000_10u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":299167,"byte_end":299201,"line_start":1491,"line_end":1491,"column_start":2,"column_end":36}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":299203,"byte_end":299247,"line_start":1492,"line_end":1492,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":299249,"byte_end":299252,"line_start":1493,"line_end":1493,"column_start":2,"column_end":5}},{"value":"/ for group in bits.splitn_mut(2, |_pos, bit| *bit) {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":299254,"byte_end":299309,"line_start":1494,"line_end":1494,"column_start":2,"column_end":57}},{"value":"/   *group.get_mut(0).unwrap() = true;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":299311,"byte_end":299351,"line_start":1495,"line_end":1495,"column_start":2,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":299353,"byte_end":299358,"line_start":1496,"line_end":1496,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(data, 0b101_100_10);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":299360,"byte_end":299395,"line_start":1497,"line_end":1497,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":299397,"byte_end":299404,"line_start":1498,"line_end":1498,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":299406,"byte_end":299415,"line_start":1499,"line_end":1499,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1401},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":300585,"byte_end":300592,"line_start":1541,"line_end":1541,"column_start":9,"column_end":16},"name":"rsplitn","qualname":"<BitSlice<O, T>>::rsplitn","value":"pub fn rsplitn<F>(&Self, usize, F) -> RSplitN<, O, T, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over subslices separated by bits that match `pred`\n limited to returining at most `n` items. This starts at the end of the\n slice and works backwards. The matched bit is not contained in the\n subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over subslices separated by bits that match `pred`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":299579,"byte_end":299653,"line_start":1505,"line_end":1505,"column_start":2,"column_end":76}},{"value":"/ limited to returining at most `n` items. This starts at the end of the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":299655,"byte_end":299729,"line_start":1506,"line_end":1506,"column_start":2,"column_end":76}},{"value":"/ slice and works backwards. The matched bit is not contained in the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":299731,"byte_end":299801,"line_start":1507,"line_end":1507,"column_start":2,"column_end":72}},{"value":"/ subslices.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":299803,"byte_end":299817,"line_start":1508,"line_end":1508,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":299819,"byte_end":299822,"line_start":1509,"line_end":1509,"column_start":2,"column_end":5}},{"value":"/ The last item returned, if any, will contain the remainder of the slice.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":299824,"byte_end":299900,"line_start":1510,"line_end":1510,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":299902,"byte_end":299905,"line_start":1511,"line_end":1511,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":299907,"byte_end":299921,"line_start":1512,"line_end":1512,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":299923,"byte_end":299926,"line_start":1513,"line_end":1513,"column_start":2,"column_end":5}},{"value":"/ [`slice::rsplitn`](https://doc.rust-lang.org/std/primitive.slice.html#method.rsplitn)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":299928,"byte_end":300017,"line_start":1514,"line_end":1514,"column_start":2,"column_end":91}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":300019,"byte_end":300022,"line_start":1515,"line_end":1515,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":300024,"byte_end":300045,"line_start":1516,"line_end":1516,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":300047,"byte_end":300050,"line_start":1517,"line_end":1517,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":300052,"byte_end":300120,"line_start":1518,"line_end":1518,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":300122,"byte_end":300196,"line_start":1519,"line_end":1519,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":300198,"byte_end":300208,"line_start":1520,"line_end":1520,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":300210,"byte_end":300213,"line_start":1521,"line_end":1521,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":300215,"byte_end":300229,"line_start":1522,"line_end":1522,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":300231,"byte_end":300234,"line_start":1523,"line_end":1523,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":300236,"byte_end":300247,"line_start":1524,"line_end":1524,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":300249,"byte_end":300276,"line_start":1525,"line_end":1525,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":300278,"byte_end":300281,"line_start":1526,"line_end":1526,"column_start":2,"column_end":5}},{"value":"/ let data = 0xA5u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":300283,"byte_end":300305,"line_start":1527,"line_end":1527,"column_start":2,"column_end":24}},{"value":"/ let bits = data.view_bits::<Msb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":300307,"byte_end":300347,"line_start":1528,"line_end":1528,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":300349,"byte_end":300352,"line_start":1529,"line_end":1529,"column_start":2,"column_end":5}},{"value":"/ for group in bits.rsplitn(2, |pos, _bit| pos % 3 == 2) {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":300354,"byte_end":300414,"line_start":1530,"line_end":1530,"column_start":2,"column_end":62}},{"value":"/ # #[cfg(feature = \"std\")] {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":300416,"byte_end":300447,"line_start":1531,"line_end":1531,"column_start":2,"column_end":33}},{"value":"/   println!(\"{}\", group.len());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":300449,"byte_end":300483,"line_start":1532,"line_end":1532,"column_start":2,"column_end":36}},{"value":"/ # }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":300485,"byte_end":300492,"line_start":1533,"line_end":1533,"column_start":2,"column_end":9}},{"value":"/ }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":300494,"byte_end":300499,"line_start":1534,"line_end":1534,"column_start":2,"column_end":7}},{"value":"/ //  2","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":300501,"byte_end":300510,"line_start":1535,"line_end":1535,"column_start":2,"column_end":11}},{"value":"/ //  5","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":300512,"byte_end":300521,"line_start":1536,"line_end":1536,"column_start":2,"column_end":11}},{"value":"/ # //  [10]","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":300523,"byte_end":300537,"line_start":1537,"line_end":1537,"column_start":2,"column_end":16}},{"value":"/ # //  [00101]","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":300539,"byte_end":300556,"line_start":1538,"line_end":1538,"column_start":2,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":300558,"byte_end":300565,"line_start":1539,"line_end":1539,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":300567,"byte_end":300576,"line_start":1540,"line_end":1540,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1403},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":301686,"byte_end":301697,"line_start":1577,"line_end":1577,"column_start":9,"column_end":20},"name":"rsplitn_mut","qualname":"<BitSlice<O, T>>::rsplitn_mut","value":"pub fn rsplitn_mut<F>(&mut Self, usize, F) -> RSplitNMut<, O, T, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over subslices separated by bits that match `pred`\n limited to returning at most `n` items. This starts at the end of the\n slice and works backwards. The matched bit is not contained in the\n subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over subslices separated by bits that match `pred`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":300717,"byte_end":300791,"line_start":1546,"line_end":1546,"column_start":2,"column_end":76}},{"value":"/ limited to returning at most `n` items. This starts at the end of the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":300793,"byte_end":300866,"line_start":1547,"line_end":1547,"column_start":2,"column_end":75}},{"value":"/ slice and works backwards. The matched bit is not contained in the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":300868,"byte_end":300938,"line_start":1548,"line_end":1548,"column_start":2,"column_end":72}},{"value":"/ subslices.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":300940,"byte_end":300954,"line_start":1549,"line_end":1549,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":300956,"byte_end":300959,"line_start":1550,"line_end":1550,"column_start":2,"column_end":5}},{"value":"/ The last item returned, if any, will contain the remainder of the slice.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":300961,"byte_end":301037,"line_start":1551,"line_end":1551,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":301039,"byte_end":301042,"line_start":1552,"line_end":1552,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":301044,"byte_end":301058,"line_start":1553,"line_end":1553,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":301060,"byte_end":301063,"line_start":1554,"line_end":1554,"column_start":2,"column_end":5}},{"value":"/ [`slice::rsplitn_mut`](https://doc.rust-lang.org/std/primitive.slice.html#method.rsplitn_mut)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":301065,"byte_end":301162,"line_start":1555,"line_end":1555,"column_start":2,"column_end":99}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":301164,"byte_end":301167,"line_start":1556,"line_end":1556,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":301169,"byte_end":301190,"line_start":1557,"line_end":1557,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":301192,"byte_end":301195,"line_start":1558,"line_end":1558,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":301197,"byte_end":301265,"line_start":1559,"line_end":1559,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":301267,"byte_end":301341,"line_start":1560,"line_end":1560,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":301343,"byte_end":301353,"line_start":1561,"line_end":1561,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":301355,"byte_end":301358,"line_start":1562,"line_end":1562,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":301360,"byte_end":301374,"line_start":1563,"line_end":1563,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":301376,"byte_end":301379,"line_start":1564,"line_end":1564,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":301381,"byte_end":301392,"line_start":1565,"line_end":1565,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":301394,"byte_end":301421,"line_start":1566,"line_end":1566,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":301423,"byte_end":301426,"line_start":1567,"line_end":1567,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0b001_000_10u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":301428,"byte_end":301462,"line_start":1568,"line_end":1568,"column_start":2,"column_end":36}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":301464,"byte_end":301508,"line_start":1569,"line_end":1569,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":301510,"byte_end":301513,"line_start":1570,"line_end":1570,"column_start":2,"column_end":5}},{"value":"/ for group in bits.rsplitn_mut(2, |_pos, bit| *bit) {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":301515,"byte_end":301571,"line_start":1571,"line_end":1571,"column_start":2,"column_end":58}},{"value":"/   *group.get_mut(0).unwrap() = true;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":301573,"byte_end":301613,"line_start":1572,"line_end":1572,"column_start":2,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":301615,"byte_end":301620,"line_start":1573,"line_end":1573,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(data, 0b101_000_11);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":301622,"byte_end":301657,"line_start":1574,"line_end":1574,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":301659,"byte_end":301666,"line_start":1575,"line_end":1575,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":301668,"byte_end":301677,"line_start":1576,"line_end":1576,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1405},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":302993,"byte_end":303001,"line_start":1617,"line_end":1617,"column_start":9,"column_end":17},"name":"contains","qualname":"<BitSlice<O, T>>::contains","value":"pub fn contains<O2, T2>(&Self, &BitSlice<O2, T2>) -> bool where O2: BitOrder,\nT2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the slice contains a subslice that matches the given\n span.","sig":null,"attributes":[{"value":"/ Returns `true` if the slice contains a subslice that matches the given","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":301844,"byte_end":301918,"line_start":1582,"line_end":1582,"column_start":2,"column_end":76}},{"value":"/ span.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":301920,"byte_end":301929,"line_start":1583,"line_end":1583,"column_start":2,"column_end":11}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":301931,"byte_end":301934,"line_start":1584,"line_end":1584,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":301936,"byte_end":301950,"line_start":1585,"line_end":1585,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":301952,"byte_end":301955,"line_start":1586,"line_end":1586,"column_start":2,"column_end":5}},{"value":"/ [`slice::contains`](https://doc.rust-lang.org/std/primitive.slice.html#method.contains)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":301957,"byte_end":302048,"line_start":1587,"line_end":1587,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":302050,"byte_end":302053,"line_start":1588,"line_end":1588,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":302055,"byte_end":302076,"line_start":1589,"line_end":1589,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":302078,"byte_end":302081,"line_start":1590,"line_end":1590,"column_start":2,"column_end":5}},{"value":"/ This searches for a matching subslice (allowing different type","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":302083,"byte_end":302149,"line_start":1591,"line_end":1591,"column_start":2,"column_end":68}},{"value":"/ parameters) rather than for a specific bit. Searching for a contained","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":302151,"byte_end":302224,"line_start":1592,"line_end":1592,"column_start":2,"column_end":75}},{"value":"/ element with a given value is not as useful on a collection of `bool`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":302226,"byte_end":302300,"line_start":1593,"line_end":1593,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":302302,"byte_end":302305,"line_start":1594,"line_end":1594,"column_start":2,"column_end":5}},{"value":"/ Furthermore, `BitSlice` defines [`any`] and [`not_all`], which are","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":302307,"byte_end":302377,"line_start":1595,"line_end":1595,"column_start":2,"column_end":72}},{"value":"/ optimized searchers for any `true` or `false` bit, respectively, in a","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":302379,"byte_end":302452,"line_start":1596,"line_end":1596,"column_start":2,"column_end":75}},{"value":"/ sequence.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":302454,"byte_end":302467,"line_start":1597,"line_end":1597,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":302469,"byte_end":302472,"line_start":1598,"line_end":1598,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":302474,"byte_end":302488,"line_start":1599,"line_end":1599,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":302490,"byte_end":302493,"line_start":1600,"line_end":1600,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":302495,"byte_end":302506,"line_start":1601,"line_end":1601,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":302508,"byte_end":302535,"line_start":1602,"line_end":1602,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":302537,"byte_end":302540,"line_start":1603,"line_end":1603,"column_start":2,"column_end":5}},{"value":"/ let data = 0b0101_1010u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":302542,"byte_end":302571,"line_start":1604,"line_end":1604,"column_start":2,"column_end":31}},{"value":"/ let bits_msb = data.view_bits::<Msb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":302573,"byte_end":302617,"line_start":1605,"line_end":1605,"column_start":2,"column_end":46}},{"value":"/ let bits_lsb = data.view_bits::<Lsb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":302619,"byte_end":302663,"line_start":1606,"line_end":1606,"column_start":2,"column_end":46}},{"value":"/ assert!(bits_msb.contains(&bits_lsb[1 .. 5]));","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":302665,"byte_end":302715,"line_start":1607,"line_end":1607,"column_start":2,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":302717,"byte_end":302724,"line_start":1608,"line_end":1608,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":302726,"byte_end":302729,"line_start":1609,"line_end":1609,"column_start":2,"column_end":5}},{"value":"/ This example uses a palindrome pattern to demonstrate that the slice","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":302731,"byte_end":302803,"line_start":1610,"line_end":1610,"column_start":2,"column_end":74}},{"value":"/ being searched for does not need to have the same type parameters as the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":302805,"byte_end":302881,"line_start":1611,"line_end":1611,"column_start":2,"column_end":78}},{"value":"/ slice being searched.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":302883,"byte_end":302908,"line_start":1612,"line_end":1612,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":302910,"byte_end":302913,"line_start":1613,"line_end":1613,"column_start":2,"column_end":5}},{"value":"/ [`any`]: #method.any","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":302915,"byte_end":302939,"line_start":1614,"line_end":1614,"column_start":2,"column_end":26}},{"value":"/ [`not_all`]: #method.not_all","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":302941,"byte_end":302973,"line_start":1615,"line_end":1615,"column_start":2,"column_end":34}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":302975,"byte_end":302984,"line_start":1616,"line_end":1616,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1409},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":304044,"byte_end":304055,"line_start":1658,"line_end":1658,"column_start":9,"column_end":20},"name":"starts_with","qualname":"<BitSlice<O, T>>::starts_with","value":"pub fn starts_with<O2, T2>(&Self, &BitSlice<O2, T2>) -> bool where\nO2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `needle` is a prefix of the slice.","sig":null,"attributes":[{"value":"/ Returns `true` if `needle` is a prefix of the slice.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":303197,"byte_end":303253,"line_start":1629,"line_end":1629,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":303255,"byte_end":303258,"line_start":1630,"line_end":1630,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":303260,"byte_end":303274,"line_start":1631,"line_end":1631,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":303276,"byte_end":303279,"line_start":1632,"line_end":1632,"column_start":2,"column_end":5}},{"value":"/ [`slice::starts_with`](https://doc.rust-lang.org/std/primitive.slice.html#method.starts_with)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":303281,"byte_end":303378,"line_start":1633,"line_end":1633,"column_start":2,"column_end":99}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":303380,"byte_end":303383,"line_start":1634,"line_end":1634,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":303385,"byte_end":303399,"line_start":1635,"line_end":1635,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":303401,"byte_end":303404,"line_start":1636,"line_end":1636,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":303406,"byte_end":303417,"line_start":1637,"line_end":1637,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":303419,"byte_end":303446,"line_start":1638,"line_end":1638,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":303448,"byte_end":303451,"line_start":1639,"line_end":1639,"column_start":2,"column_end":5}},{"value":"/ let data = 0b0100_1011u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":303453,"byte_end":303482,"line_start":1640,"line_end":1640,"column_start":2,"column_end":31}},{"value":"/ let haystack = data.view_bits::<Msb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":303484,"byte_end":303528,"line_start":1641,"line_end":1641,"column_start":2,"column_end":46}},{"value":"/ let needle = &data.view_bits::<Lsb0>()[2 .. 5];","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":303530,"byte_end":303581,"line_start":1642,"line_end":1642,"column_start":2,"column_end":53}},{"value":"/ assert!(haystack.starts_with(&needle[.. 2]));","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":303583,"byte_end":303632,"line_start":1643,"line_end":1643,"column_start":2,"column_end":51}},{"value":"/ assert!(haystack.starts_with(needle));","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":303634,"byte_end":303676,"line_start":1644,"line_end":1644,"column_start":2,"column_end":44}},{"value":"/ assert!(!haystack.starts_with(&haystack[2 .. 4]));","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":303678,"byte_end":303732,"line_start":1645,"line_end":1645,"column_start":2,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":303734,"byte_end":303741,"line_start":1646,"line_end":1646,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":303743,"byte_end":303746,"line_start":1647,"line_end":1647,"column_start":2,"column_end":5}},{"value":"/ Always returns `true` if `needle` is an empty slice:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":303748,"byte_end":303804,"line_start":1648,"line_end":1648,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":303806,"byte_end":303809,"line_start":1649,"line_end":1649,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":303811,"byte_end":303822,"line_start":1650,"line_end":1650,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":303824,"byte_end":303851,"line_start":1651,"line_end":1651,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":303853,"byte_end":303856,"line_start":1652,"line_end":1652,"column_start":2,"column_end":5}},{"value":"/ let empty = BitSlice::<LocalBits, usize>::empty();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":303858,"byte_end":303912,"line_start":1653,"line_end":1653,"column_start":2,"column_end":56}},{"value":"/ assert!(0u8.view_bits::<LocalBits>().starts_with(empty));","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":303914,"byte_end":303975,"line_start":1654,"line_end":1654,"column_start":2,"column_end":63}},{"value":"/ assert!(empty.starts_with(empty));","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":303977,"byte_end":304015,"line_start":1655,"line_end":1655,"column_start":2,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":304017,"byte_end":304024,"line_start":1656,"line_end":1656,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":304026,"byte_end":304035,"line_start":1657,"line_end":1657,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1412},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":305083,"byte_end":305092,"line_start":1696,"line_end":1696,"column_start":9,"column_end":18},"name":"ends_with","qualname":"<BitSlice<O, T>>::ends_with","value":"pub fn ends_with<O2, T2>(&Self, &BitSlice<O2, T2>) -> bool where O2: BitOrder,\nT2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `needle` is a suffix of the slice.","sig":null,"attributes":[{"value":"/ Returns `true` if `needle` is a suffix of the slice.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":304250,"byte_end":304306,"line_start":1667,"line_end":1667,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":304308,"byte_end":304311,"line_start":1668,"line_end":1668,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":304313,"byte_end":304327,"line_start":1669,"line_end":1669,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":304329,"byte_end":304332,"line_start":1670,"line_end":1670,"column_start":2,"column_end":5}},{"value":"/ [`slice::ends_with`](https://doc.rust-lang.org/std/primitive.slice.html#method.ends_with)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":304334,"byte_end":304427,"line_start":1671,"line_end":1671,"column_start":2,"column_end":95}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":304429,"byte_end":304432,"line_start":1672,"line_end":1672,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":304434,"byte_end":304448,"line_start":1673,"line_end":1673,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":304450,"byte_end":304453,"line_start":1674,"line_end":1674,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":304455,"byte_end":304466,"line_start":1675,"line_end":1675,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":304468,"byte_end":304495,"line_start":1676,"line_end":1676,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":304497,"byte_end":304500,"line_start":1677,"line_end":1677,"column_start":2,"column_end":5}},{"value":"/ let data = 0b0100_1011u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":304502,"byte_end":304531,"line_start":1678,"line_end":1678,"column_start":2,"column_end":31}},{"value":"/ let haystack = data.view_bits::<Lsb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":304533,"byte_end":304577,"line_start":1679,"line_end":1679,"column_start":2,"column_end":46}},{"value":"/ let needle = &data.view_bits::<Msb0>()[3 .. 6];","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":304579,"byte_end":304630,"line_start":1680,"line_end":1680,"column_start":2,"column_end":53}},{"value":"/ assert!(haystack.ends_with(&needle[1 ..]));","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":304632,"byte_end":304679,"line_start":1681,"line_end":1681,"column_start":2,"column_end":49}},{"value":"/ assert!(haystack.ends_with(needle));","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":304681,"byte_end":304721,"line_start":1682,"line_end":1682,"column_start":2,"column_end":42}},{"value":"/ assert!(!haystack.ends_with(&haystack[2 .. 4]));","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":304723,"byte_end":304775,"line_start":1683,"line_end":1683,"column_start":2,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":304777,"byte_end":304784,"line_start":1684,"line_end":1684,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":304786,"byte_end":304789,"line_start":1685,"line_end":1685,"column_start":2,"column_end":5}},{"value":"/ Always returns `true` if `needle` is an empty slice:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":304791,"byte_end":304847,"line_start":1686,"line_end":1686,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":304849,"byte_end":304852,"line_start":1687,"line_end":1687,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":304854,"byte_end":304865,"line_start":1688,"line_end":1688,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":304867,"byte_end":304894,"line_start":1689,"line_end":1689,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":304896,"byte_end":304899,"line_start":1690,"line_end":1690,"column_start":2,"column_end":5}},{"value":"/ let empty = BitSlice::<LocalBits, usize>::empty();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":304901,"byte_end":304955,"line_start":1691,"line_end":1691,"column_start":2,"column_end":56}},{"value":"/ assert!(0u8.view_bits::<LocalBits>().ends_with(empty));","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":304957,"byte_end":305016,"line_start":1692,"line_end":1692,"column_start":2,"column_end":61}},{"value":"/ assert!(empty.ends_with(empty));","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":305018,"byte_end":305054,"line_start":1693,"line_end":1693,"column_start":2,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":305056,"byte_end":305063,"line_start":1694,"line_end":1694,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":305065,"byte_end":305074,"line_start":1695,"line_end":1695,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1415},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":306875,"byte_end":306886,"line_start":1755,"line_end":1755,"column_start":9,"column_end":20},"name":"rotate_left","qualname":"<BitSlice<O, T>>::rotate_left","value":"pub fn rotate_left(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Rotates the slice in-place such that the first `by` bits of the slice\n move to the end while the last `self.len() - by` bits move to the front.\n After calling `rotate_left`, the bit previously at index `by` will\n become the first bit in the slice.","sig":null,"attributes":[{"value":"/ Rotates the slice in-place such that the first `by` bits of the slice","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":305313,"byte_end":305386,"line_start":1706,"line_end":1706,"column_start":2,"column_end":75}},{"value":"/ move to the end while the last `self.len() - by` bits move to the front.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":305388,"byte_end":305464,"line_start":1707,"line_end":1707,"column_start":2,"column_end":78}},{"value":"/ After calling `rotate_left`, the bit previously at index `by` will","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":305466,"byte_end":305536,"line_start":1708,"line_end":1708,"column_start":2,"column_end":72}},{"value":"/ become the first bit in the slice.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":305538,"byte_end":305576,"line_start":1709,"line_end":1709,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":305578,"byte_end":305581,"line_start":1710,"line_end":1710,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":305583,"byte_end":305597,"line_start":1711,"line_end":1711,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":305599,"byte_end":305602,"line_start":1712,"line_end":1712,"column_start":2,"column_end":5}},{"value":"/ [`slice::rotate_left`](https://doc.rust-lang.org/std/primitive.slice.html#rotate_left)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":305604,"byte_end":305694,"line_start":1713,"line_end":1713,"column_start":2,"column_end":92}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":305696,"byte_end":305699,"line_start":1714,"line_end":1714,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":305701,"byte_end":305713,"line_start":1715,"line_end":1715,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":305715,"byte_end":305718,"line_start":1716,"line_end":1716,"column_start":2,"column_end":5}},{"value":"/ This function will panic if `by` is greater than the length of the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":305720,"byte_end":305790,"line_start":1717,"line_end":1717,"column_start":2,"column_end":72}},{"value":"/ slice. Note that `by == self.len()` does *not* panic and is a no-op","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":305792,"byte_end":305863,"line_start":1718,"line_end":1718,"column_start":2,"column_end":73}},{"value":"/ rotation.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":305865,"byte_end":305878,"line_start":1719,"line_end":1719,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":305880,"byte_end":305883,"line_start":1720,"line_end":1720,"column_start":2,"column_end":5}},{"value":"/ # Complexity","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":305885,"byte_end":305901,"line_start":1721,"line_end":1721,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":305903,"byte_end":305906,"line_start":1722,"line_end":1722,"column_start":2,"column_end":5}},{"value":"/ Takes linear (in `self.len()`) time.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":305908,"byte_end":305948,"line_start":1723,"line_end":1723,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":305950,"byte_end":305953,"line_start":1724,"line_end":1724,"column_start":2,"column_end":5}},{"value":"/ # Performance","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":305955,"byte_end":305972,"line_start":1725,"line_end":1725,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":305974,"byte_end":305977,"line_start":1726,"line_end":1726,"column_start":2,"column_end":5}},{"value":"/ While this is faster than the equivalent rotation on `[bool]`, it is","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":305979,"byte_end":306051,"line_start":1727,"line_end":1727,"column_start":2,"column_end":74}},{"value":"/ slower than a handcrafted partial-element rotation on `[T]`. Because of","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":306053,"byte_end":306128,"line_start":1728,"line_end":1728,"column_start":2,"column_end":77}},{"value":"/ the support for custom orderings, and the lack of specialization, this","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":306130,"byte_end":306204,"line_start":1729,"line_end":1729,"column_start":2,"column_end":76}},{"value":"/ method can only accelerate by reducing the number of loop iterations","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":306206,"byte_end":306278,"line_start":1730,"line_end":1730,"column_start":2,"column_end":74}},{"value":"/ performed on the slice body, and cannot accelerate by using shift-mask","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":306280,"byte_end":306354,"line_start":1731,"line_end":1731,"column_start":2,"column_end":76}},{"value":"/ instructions to move multiple bits in one operation.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":306356,"byte_end":306412,"line_start":1732,"line_end":1732,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":306414,"byte_end":306417,"line_start":1733,"line_end":1733,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":306419,"byte_end":306433,"line_start":1734,"line_end":1734,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":306435,"byte_end":306438,"line_start":1735,"line_end":1735,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":306440,"byte_end":306451,"line_start":1736,"line_end":1736,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":306453,"byte_end":306480,"line_start":1737,"line_end":1737,"column_start":2,"column_end":29}},{"value":"/ let mut data = 0xF0u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":306482,"byte_end":306508,"line_start":1738,"line_end":1738,"column_start":2,"column_end":28}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":306510,"byte_end":306554,"line_start":1739,"line_end":1739,"column_start":2,"column_end":46}},{"value":"/ bits.rotate_left(2);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":306556,"byte_end":306580,"line_start":1740,"line_end":1740,"column_start":2,"column_end":26}},{"value":"/ assert_eq!(data, 0xC3);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":306582,"byte_end":306609,"line_start":1741,"line_end":1741,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":306611,"byte_end":306618,"line_start":1742,"line_end":1742,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":306620,"byte_end":306623,"line_start":1743,"line_end":1743,"column_start":2,"column_end":5}},{"value":"/ Rotating a subslice:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":306625,"byte_end":306649,"line_start":1744,"line_end":1744,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":306651,"byte_end":306654,"line_start":1745,"line_end":1745,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":306656,"byte_end":306667,"line_start":1746,"line_end":1746,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":306669,"byte_end":306696,"line_start":1747,"line_end":1747,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":306698,"byte_end":306701,"line_start":1748,"line_end":1748,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0xF0u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":306703,"byte_end":306729,"line_start":1749,"line_end":1749,"column_start":2,"column_end":28}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":306731,"byte_end":306775,"line_start":1750,"line_end":1750,"column_start":2,"column_end":46}},{"value":"/ bits[1 .. 5].rotate_left(1);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":306777,"byte_end":306809,"line_start":1751,"line_end":1751,"column_start":2,"column_end":34}},{"value":"/ assert_eq!(data, 0b1_1101_000);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":306811,"byte_end":306846,"line_start":1752,"line_end":1752,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":306848,"byte_end":306855,"line_start":1753,"line_end":1753,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":306857,"byte_end":306866,"line_start":1754,"line_end":1754,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1416},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":309830,"byte_end":309842,"line_start":1843,"line_end":1843,"column_start":9,"column_end":21},"name":"rotate_right","qualname":"<BitSlice<O, T>>::rotate_right","value":"pub fn rotate_right(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Rotates the slice in-place such that the first `self.len() - by` bits of\n the slice move to the end while the last `by` bits move to the front.\n After calling `rotate_right`, the bit previously at index `self.len() -\n by` will become the first bit in the slice.","sig":null,"attributes":[{"value":"/ Rotates the slice in-place such that the first `self.len() - by` bits of","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":308247,"byte_end":308323,"line_start":1793,"line_end":1793,"column_start":2,"column_end":78}},{"value":"/ the slice move to the end while the last `by` bits move to the front.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":308325,"byte_end":308398,"line_start":1794,"line_end":1794,"column_start":2,"column_end":75}},{"value":"/ After calling `rotate_right`, the bit previously at index `self.len() -","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":308400,"byte_end":308475,"line_start":1795,"line_end":1795,"column_start":2,"column_end":77}},{"value":"/ by` will become the first bit in the slice.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":308477,"byte_end":308524,"line_start":1796,"line_end":1796,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":308526,"byte_end":308529,"line_start":1797,"line_end":1797,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":308531,"byte_end":308545,"line_start":1798,"line_end":1798,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":308547,"byte_end":308550,"line_start":1799,"line_end":1799,"column_start":2,"column_end":5}},{"value":"/ [`slice::rotate_right`](https://doc.rust-lang.org/std/primitive.slice.html#rotate_right)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":308552,"byte_end":308644,"line_start":1800,"line_end":1800,"column_start":2,"column_end":94}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":308646,"byte_end":308649,"line_start":1801,"line_end":1801,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":308651,"byte_end":308663,"line_start":1802,"line_end":1802,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":308665,"byte_end":308668,"line_start":1803,"line_end":1803,"column_start":2,"column_end":5}},{"value":"/ This function will panic if `by` is greater than the length of the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":308670,"byte_end":308740,"line_start":1804,"line_end":1804,"column_start":2,"column_end":72}},{"value":"/ slice. Note that `by == self.len()` does *not* panic and is a no-op","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":308742,"byte_end":308813,"line_start":1805,"line_end":1805,"column_start":2,"column_end":73}},{"value":"/ rotation.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":308815,"byte_end":308828,"line_start":1806,"line_end":1806,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":308830,"byte_end":308833,"line_start":1807,"line_end":1807,"column_start":2,"column_end":5}},{"value":"/ # Complexity","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":308835,"byte_end":308851,"line_start":1808,"line_end":1808,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":308853,"byte_end":308856,"line_start":1809,"line_end":1809,"column_start":2,"column_end":5}},{"value":"/ Takes linear (in `self.len()`) time.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":308858,"byte_end":308898,"line_start":1810,"line_end":1810,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":308900,"byte_end":308903,"line_start":1811,"line_end":1811,"column_start":2,"column_end":5}},{"value":"/ # Performance","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":308905,"byte_end":308922,"line_start":1812,"line_end":1812,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":308924,"byte_end":308927,"line_start":1813,"line_end":1813,"column_start":2,"column_end":5}},{"value":"/ While this is faster than the equivalent rotation on `[bool]`, it is","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":308929,"byte_end":309001,"line_start":1814,"line_end":1814,"column_start":2,"column_end":74}},{"value":"/ slower than a handcrafted partial-element rotation on `[T]`. Because of","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":309003,"byte_end":309078,"line_start":1815,"line_end":1815,"column_start":2,"column_end":77}},{"value":"/ the support for custom orderings, and the lack of specialization, this","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":309080,"byte_end":309154,"line_start":1816,"line_end":1816,"column_start":2,"column_end":76}},{"value":"/ method can only accelerate by reducing the number of loop iterations","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":309156,"byte_end":309228,"line_start":1817,"line_end":1817,"column_start":2,"column_end":74}},{"value":"/ performed on the slice body, and cannot accelerate by using shift-mask","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":309230,"byte_end":309304,"line_start":1818,"line_end":1818,"column_start":2,"column_end":76}},{"value":"/ instructions to move multiple bits in one operation.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":309306,"byte_end":309362,"line_start":1819,"line_end":1819,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":309364,"byte_end":309367,"line_start":1820,"line_end":1820,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":309369,"byte_end":309383,"line_start":1821,"line_end":1821,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":309385,"byte_end":309388,"line_start":1822,"line_end":1822,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":309390,"byte_end":309401,"line_start":1823,"line_end":1823,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":309403,"byte_end":309430,"line_start":1824,"line_end":1824,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":309432,"byte_end":309435,"line_start":1825,"line_end":1825,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0xF0u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":309437,"byte_end":309463,"line_start":1826,"line_end":1826,"column_start":2,"column_end":28}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":309465,"byte_end":309509,"line_start":1827,"line_end":1827,"column_start":2,"column_end":46}},{"value":"/ bits.rotate_right(2);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":309511,"byte_end":309536,"line_start":1828,"line_end":1828,"column_start":2,"column_end":27}},{"value":"/ assert_eq!(data, 0x3C);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":309538,"byte_end":309565,"line_start":1829,"line_end":1829,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":309567,"byte_end":309574,"line_start":1830,"line_end":1830,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":309576,"byte_end":309579,"line_start":1831,"line_end":1831,"column_start":2,"column_end":5}},{"value":"/ Rotate a subslice:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":309581,"byte_end":309603,"line_start":1832,"line_end":1832,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":309605,"byte_end":309608,"line_start":1833,"line_end":1833,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":309610,"byte_end":309621,"line_start":1834,"line_end":1834,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":309623,"byte_end":309650,"line_start":1835,"line_end":1835,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":309652,"byte_end":309655,"line_start":1836,"line_end":1836,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0xF0u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":309657,"byte_end":309683,"line_start":1837,"line_end":1837,"column_start":2,"column_end":28}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":309685,"byte_end":309729,"line_start":1838,"line_end":1838,"column_start":2,"column_end":46}},{"value":"/ bits[1 .. 5].rotate_right(1);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":309731,"byte_end":309764,"line_start":1839,"line_end":1839,"column_start":2,"column_end":35}},{"value":"/ assert_eq!(data, 0b1_0111_000);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":309766,"byte_end":309801,"line_start":1840,"line_end":1840,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":309803,"byte_end":309810,"line_start":1841,"line_end":1841,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":309812,"byte_end":309821,"line_start":1842,"line_end":1842,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1417},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":312120,"byte_end":312139,"line_start":1926,"line_end":1926,"column_start":9,"column_end":28},"name":"clone_from_bitslice","qualname":"<BitSlice<O, T>>::clone_from_bitslice","value":"pub fn clone_from_bitslice<O2, T2>(&mut Self, &BitSlice<O2, T2>) where\nO2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Copies the bits from `src` into `self`.","sig":null,"attributes":[{"value":"/ Copies the bits from `src` into `self`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":310441,"byte_end":310484,"line_start":1867,"line_end":1867,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":310486,"byte_end":310489,"line_start":1868,"line_end":1868,"column_start":2,"column_end":5}},{"value":"/ The length of `src` must be the same as `self`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":310491,"byte_end":310542,"line_start":1869,"line_end":1869,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":310544,"byte_end":310547,"line_start":1870,"line_end":1870,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":310549,"byte_end":310563,"line_start":1871,"line_end":1871,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":310565,"byte_end":310568,"line_start":1872,"line_end":1872,"column_start":2,"column_end":5}},{"value":"/ [`slice::clone_from_slice`](https://doc.rust-lang.org/std/primitive.slice.html#method.clone_from_slice)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":310570,"byte_end":310677,"line_start":1873,"line_end":1873,"column_start":2,"column_end":109}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":310679,"byte_end":310682,"line_start":1874,"line_end":1874,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":310684,"byte_end":310705,"line_start":1875,"line_end":1875,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":310707,"byte_end":310710,"line_start":1876,"line_end":1876,"column_start":2,"column_end":5}},{"value":"/ This method is renamed, as it takes a bit slice rather than an element","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":310712,"byte_end":310786,"line_start":1877,"line_end":1877,"column_start":2,"column_end":76}},{"value":"/ slice.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":310788,"byte_end":310798,"line_start":1878,"line_end":1878,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":310800,"byte_end":310803,"line_start":1879,"line_end":1879,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":310805,"byte_end":310817,"line_start":1880,"line_end":1880,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":310819,"byte_end":310822,"line_start":1881,"line_end":1881,"column_start":2,"column_end":5}},{"value":"/ This function will panic if the two slices have different lengths.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":310824,"byte_end":310894,"line_start":1882,"line_end":1882,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":310896,"byte_end":310899,"line_start":1883,"line_end":1883,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":310901,"byte_end":310915,"line_start":1884,"line_end":1884,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":310917,"byte_end":310920,"line_start":1885,"line_end":1885,"column_start":2,"column_end":5}},{"value":"/ Cloning two bits from a slice into another:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":310922,"byte_end":310969,"line_start":1886,"line_end":1886,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":310971,"byte_end":310974,"line_start":1887,"line_end":1887,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":310976,"byte_end":310987,"line_start":1888,"line_end":1888,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":310989,"byte_end":311016,"line_start":1889,"line_end":1889,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":311018,"byte_end":311021,"line_start":1890,"line_end":1890,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":311023,"byte_end":311046,"line_start":1891,"line_end":1891,"column_start":2,"column_end":25}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":311048,"byte_end":311092,"line_start":1892,"line_end":1892,"column_start":2,"column_end":46}},{"value":"/ let src = 0x0Fu16.view_bits::<Lsb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":311094,"byte_end":311136,"line_start":1893,"line_end":1893,"column_start":2,"column_end":44}},{"value":"/ bits[.. 2].clone_from_bitslice(&src[2 .. 4]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":311138,"byte_end":311187,"line_start":1894,"line_end":1894,"column_start":2,"column_end":51}},{"value":"/ assert_eq!(data, 0xC0);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":311189,"byte_end":311216,"line_start":1895,"line_end":1895,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":311218,"byte_end":311225,"line_start":1896,"line_end":1896,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":311227,"byte_end":311230,"line_start":1897,"line_end":1897,"column_start":2,"column_end":5}},{"value":"/ Rust enforces that there can only be one mutable reference with no","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":311232,"byte_end":311302,"line_start":1898,"line_end":1898,"column_start":2,"column_end":72}},{"value":"/ immutable references to a particular piece of data in a particular","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":311304,"byte_end":311374,"line_start":1899,"line_end":1899,"column_start":2,"column_end":72}},{"value":"/ scope. Because of this, attempting to use `clone_from_bitslice` on a","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":311376,"byte_end":311448,"line_start":1900,"line_end":1900,"column_start":2,"column_end":74}},{"value":"/ single slice will result in a compile failure:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":311450,"byte_end":311500,"line_start":1901,"line_end":1901,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":311502,"byte_end":311505,"line_start":1902,"line_end":1902,"column_start":2,"column_end":5}},{"value":"/ ```rust,compile_fail","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":311507,"byte_end":311531,"line_start":1903,"line_end":1903,"column_start":2,"column_end":26}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":311533,"byte_end":311560,"line_start":1904,"line_end":1904,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":311562,"byte_end":311565,"line_start":1905,"line_end":1905,"column_start":2,"column_end":5}},{"value":"/ let mut data = 3u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":311567,"byte_end":311590,"line_start":1906,"line_end":1906,"column_start":2,"column_end":25}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":311592,"byte_end":311636,"line_start":1907,"line_end":1907,"column_start":2,"column_end":46}},{"value":"/ bits[.. 2].clone_from_bitslice(&bits[6 ..]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":311638,"byte_end":311686,"line_start":1908,"line_end":1908,"column_start":2,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":311688,"byte_end":311695,"line_start":1909,"line_end":1909,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":311697,"byte_end":311700,"line_start":1910,"line_end":1910,"column_start":2,"column_end":5}},{"value":"/ To work around this, we can use [`split_at_mut`] to create two distinct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":311702,"byte_end":311777,"line_start":1911,"line_end":1911,"column_start":2,"column_end":77}},{"value":"/ sub-slices from a slice:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":311779,"byte_end":311807,"line_start":1912,"line_end":1912,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":311809,"byte_end":311812,"line_start":1913,"line_end":1913,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":311814,"byte_end":311825,"line_start":1914,"line_end":1914,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":311827,"byte_end":311854,"line_start":1915,"line_end":1915,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":311856,"byte_end":311859,"line_start":1916,"line_end":1916,"column_start":2,"column_end":5}},{"value":"/ let mut data = 3u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":311861,"byte_end":311884,"line_start":1917,"line_end":1917,"column_start":2,"column_end":25}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":311886,"byte_end":311930,"line_start":1918,"line_end":1918,"column_start":2,"column_end":46}},{"value":"/ let (head, tail) = bits.split_at_mut(4);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":311932,"byte_end":311976,"line_start":1919,"line_end":1919,"column_start":2,"column_end":46}},{"value":"/ head.clone_from_bitslice(tail);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":311978,"byte_end":312013,"line_start":1920,"line_end":1920,"column_start":2,"column_end":37}},{"value":"/ assert_eq!(data, 0x33);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":312015,"byte_end":312042,"line_start":1921,"line_end":1921,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":312044,"byte_end":312051,"line_start":1922,"line_end":1922,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":312053,"byte_end":312056,"line_start":1923,"line_end":1923,"column_start":2,"column_end":5}},{"value":"/ [`split_at_mut`]: #method.split_at_mut","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":312058,"byte_end":312100,"line_start":1924,"line_end":1924,"column_start":2,"column_end":44}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":312102,"byte_end":312111,"line_start":1925,"line_end":1925,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1420},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":312581,"byte_end":312597,"line_start":1944,"line_end":1944,"column_start":9,"column_end":25},"name":"clone_from_slice","qualname":"<BitSlice<O, T>>::clone_from_slice","value":"pub fn clone_from_slice<O2, T2>(&mut Self, &BitSlice<O2, T2>) where\nO2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":312445,"byte_end":312462,"line_start":1941,"line_end":1941,"column_start":2,"column_end":19}},{"value":"deprecated(note = \"Use `.clone_from_bitslice` to copy between bitslices\")","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":312464,"byte_end":312540,"line_start":1942,"line_end":1942,"column_start":2,"column_end":78}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":312542,"byte_end":312572,"line_start":1943,"line_end":1943,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1423},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":313553,"byte_end":313571,"line_start":1980,"line_end":1980,"column_start":9,"column_end":27},"name":"copy_from_bitslice","qualname":"<BitSlice<O, T>>::copy_from_bitslice","value":"pub fn copy_from_bitslice(&mut Self, &Self)","parent":null,"children":[],"decl_id":null,"docs":" Copies all bits from `src` into `self`.","sig":null,"attributes":[{"value":"/ Copies all bits from `src` into `self`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":312720,"byte_end":312763,"line_start":1952,"line_end":1952,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":312765,"byte_end":312768,"line_start":1953,"line_end":1953,"column_start":2,"column_end":5}},{"value":"/ The length of `src` must be the same as `self`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":312770,"byte_end":312821,"line_start":1954,"line_end":1954,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":312823,"byte_end":312826,"line_start":1955,"line_end":1955,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":312828,"byte_end":312842,"line_start":1956,"line_end":1956,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":312844,"byte_end":312847,"line_start":1957,"line_end":1957,"column_start":2,"column_end":5}},{"value":"/ [`slice::copy_from_slice`](https://doc.rust-lang.org/std/primitive.std.html#method.copy_from_slice)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":312849,"byte_end":312952,"line_start":1958,"line_end":1958,"column_start":2,"column_end":105}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":312954,"byte_end":312957,"line_start":1959,"line_end":1959,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":312959,"byte_end":312980,"line_start":1960,"line_end":1960,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":312982,"byte_end":312985,"line_start":1961,"line_end":1961,"column_start":2,"column_end":5}},{"value":"/ This method is renamed, as it takes a bit slice rather than an element","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":312987,"byte_end":313061,"line_start":1962,"line_end":1962,"column_start":2,"column_end":76}},{"value":"/ slice.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":313063,"byte_end":313073,"line_start":1963,"line_end":1963,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":313075,"byte_end":313078,"line_start":1964,"line_end":1964,"column_start":2,"column_end":5}},{"value":"/ This is unable to guarantee a strictly faster copy behavior than","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":313080,"byte_end":313148,"line_start":1965,"line_end":1965,"column_start":2,"column_end":70}},{"value":"/ [`clone_from_bitslice`]. In the future, the implementation *may*","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":313150,"byte_end":313218,"line_start":1966,"line_end":1966,"column_start":2,"column_end":70}},{"value":"/ specialize, as the language allows.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":313220,"byte_end":313259,"line_start":1967,"line_end":1967,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":313261,"byte_end":313264,"line_start":1968,"line_end":1968,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":313266,"byte_end":313278,"line_start":1969,"line_end":1969,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":313280,"byte_end":313283,"line_start":1970,"line_end":1970,"column_start":2,"column_end":5}},{"value":"/ This function will panic if the two slices have different lengths.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":313285,"byte_end":313355,"line_start":1971,"line_end":1971,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":313357,"byte_end":313360,"line_start":1972,"line_end":1972,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":313362,"byte_end":313376,"line_start":1973,"line_end":1973,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":313378,"byte_end":313381,"line_start":1974,"line_end":1974,"column_start":2,"column_end":5}},{"value":"/ Copying two bits from a slice into another:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":313383,"byte_end":313430,"line_start":1975,"line_end":1975,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":313432,"byte_end":313435,"line_start":1976,"line_end":1976,"column_start":2,"column_end":5}},{"value":"/ [`clone_from_bitslice`]: #method.clone_from_bitslice","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":313437,"byte_end":313493,"line_start":1977,"line_end":1977,"column_start":2,"column_end":58}},{"value":"inline(always)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":313495,"byte_end":313512,"line_start":1978,"line_end":1978,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":313514,"byte_end":313544,"line_start":1979,"line_end":1979,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1424},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":313786,"byte_end":313801,"line_start":1988,"line_end":1988,"column_start":9,"column_end":24},"name":"copy_from_slice","qualname":"<BitSlice<O, T>>::copy_from_slice","value":"pub fn copy_from_slice(&mut Self, &Self)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":313651,"byte_end":313668,"line_start":1985,"line_end":1985,"column_start":2,"column_end":19}},{"value":"deprecated(note = \"Use `.copy_from_bitslice` to copy between bitslices\")","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":313670,"byte_end":313745,"line_start":1986,"line_end":1986,"column_start":2,"column_end":77}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":313747,"byte_end":313777,"line_start":1987,"line_end":1987,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1425},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":314779,"byte_end":314790,"line_start":2023,"line_end":2023,"column_start":9,"column_end":20},"name":"copy_within","qualname":"<BitSlice<O, T>>::copy_within","value":"pub fn copy_within<R>(&mut Self, R, usize) where R: RangeBounds<usize>","parent":null,"children":[],"decl_id":null,"docs":" Copies bits from one part of the slice to another part of itself.","sig":null,"attributes":[{"value":"/ Copies bits from one part of the slice to another part of itself.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":313863,"byte_end":313932,"line_start":1992,"line_end":1992,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":313934,"byte_end":313937,"line_start":1993,"line_end":1993,"column_start":2,"column_end":5}},{"value":"/ `src` is the range within `self` to copy from. `dest` is the starting","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":313939,"byte_end":314012,"line_start":1994,"line_end":1994,"column_start":2,"column_end":75}},{"value":"/ index of the range within `self` to copy to, which will have the same","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":314014,"byte_end":314087,"line_start":1995,"line_end":1995,"column_start":2,"column_end":75}},{"value":"/ length as `src`. The two ranges may overlap. The ends of the two ranges","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":314089,"byte_end":314164,"line_start":1996,"line_end":1996,"column_start":2,"column_end":77}},{"value":"/ must be less than or equal to `self.len()`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":314166,"byte_end":314213,"line_start":1997,"line_end":1997,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":314215,"byte_end":314218,"line_start":1998,"line_end":1998,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":314220,"byte_end":314234,"line_start":1999,"line_end":1999,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":314236,"byte_end":314239,"line_start":2000,"line_end":2000,"column_start":2,"column_end":5}},{"value":"/ [`slice::copy_within`](https://doc.rust-lang.org/std/primitive.slice.html#method.copy_within)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":314241,"byte_end":314338,"line_start":2001,"line_end":2001,"column_start":2,"column_end":99}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":314340,"byte_end":314343,"line_start":2002,"line_end":2002,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":314345,"byte_end":314357,"line_start":2003,"line_end":2003,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":314359,"byte_end":314362,"line_start":2004,"line_end":2004,"column_start":2,"column_end":5}},{"value":"/ This function will panic if either range exceeds the end of the slice,","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":314364,"byte_end":314438,"line_start":2005,"line_end":2005,"column_start":2,"column_end":76}},{"value":"/ or if the end of `src` is before the start.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":314440,"byte_end":314487,"line_start":2006,"line_end":2006,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":314489,"byte_end":314492,"line_start":2007,"line_end":2007,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":314494,"byte_end":314508,"line_start":2008,"line_end":2008,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":314510,"byte_end":314513,"line_start":2009,"line_end":2009,"column_start":2,"column_end":5}},{"value":"/ Copying four bytes within a slice:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":314515,"byte_end":314553,"line_start":2010,"line_end":2010,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":314555,"byte_end":314558,"line_start":2011,"line_end":2011,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":314560,"byte_end":314571,"line_start":2012,"line_end":2012,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":314573,"byte_end":314600,"line_start":2013,"line_end":2013,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":314602,"byte_end":314605,"line_start":2014,"line_end":2014,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0x07u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":314607,"byte_end":314633,"line_start":2015,"line_end":2015,"column_start":2,"column_end":28}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":314635,"byte_end":314679,"line_start":2016,"line_end":2016,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":314681,"byte_end":314684,"line_start":2017,"line_end":2017,"column_start":2,"column_end":5}},{"value":"/ bits.copy_within(5 .., 0);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":314686,"byte_end":314716,"line_start":2018,"line_end":2018,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":314718,"byte_end":314721,"line_start":2019,"line_end":2019,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(data, 0xE7);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":314723,"byte_end":314750,"line_start":2020,"line_end":2020,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":314752,"byte_end":314759,"line_start":2021,"line_end":2021,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":314761,"byte_end":314770,"line_start":2022,"line_end":2022,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1427},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":316094,"byte_end":316112,"line_start":2071,"line_end":2071,"column_start":9,"column_end":27},"name":"swap_with_bitslice","qualname":"<BitSlice<O, T>>::swap_with_bitslice","value":"pub fn swap_with_bitslice<O2, T2>(&mut Self, &mut BitSlice<O2, T2>) where\nO2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Swaps all bits in `self` with those in `other`.","sig":null,"attributes":[{"value":"/ Swaps all bits in `self` with those in `other`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":315197,"byte_end":315248,"line_start":2036,"line_end":2036,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":315250,"byte_end":315253,"line_start":2037,"line_end":2037,"column_start":2,"column_end":5}},{"value":"/ The length of `other` must be the same as `self`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":315255,"byte_end":315308,"line_start":2038,"line_end":2038,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":315310,"byte_end":315313,"line_start":2039,"line_end":2039,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":315315,"byte_end":315329,"line_start":2040,"line_end":2040,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":315331,"byte_end":315334,"line_start":2041,"line_end":2041,"column_start":2,"column_end":5}},{"value":"/ [`slice::swap_with_slice`](https://doc.rust-lang.org/std/primitive.slice.html#method.swap_with_slice)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":315336,"byte_end":315441,"line_start":2042,"line_end":2042,"column_start":2,"column_end":107}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":315443,"byte_end":315446,"line_start":2043,"line_end":2043,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":315448,"byte_end":315469,"line_start":2044,"line_end":2044,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":315471,"byte_end":315474,"line_start":2045,"line_end":2045,"column_start":2,"column_end":5}},{"value":"/ This method is renamed, as it takes a bit slice rather than an element","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":315476,"byte_end":315550,"line_start":2046,"line_end":2046,"column_start":2,"column_end":76}},{"value":"/ slice.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":315552,"byte_end":315562,"line_start":2047,"line_end":2047,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":315564,"byte_end":315567,"line_start":2048,"line_end":2048,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":315569,"byte_end":315581,"line_start":2049,"line_end":2049,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":315583,"byte_end":315586,"line_start":2050,"line_end":2050,"column_start":2,"column_end":5}},{"value":"/ This function will panic if the two slices have different lengths.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":315588,"byte_end":315658,"line_start":2051,"line_end":2051,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":315660,"byte_end":315663,"line_start":2052,"line_end":2052,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":315665,"byte_end":315679,"line_start":2053,"line_end":2053,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":315681,"byte_end":315684,"line_start":2054,"line_end":2054,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":315686,"byte_end":315697,"line_start":2055,"line_end":2055,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":315699,"byte_end":315726,"line_start":2056,"line_end":2056,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":315728,"byte_end":315731,"line_start":2057,"line_end":2057,"column_start":2,"column_end":5}},{"value":"/ let mut one = [0xA5u8, 0x69];","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":315733,"byte_end":315766,"line_start":2058,"line_end":2058,"column_start":2,"column_end":35}},{"value":"/ let mut two = 0x1234u16;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":315768,"byte_end":315796,"line_start":2059,"line_end":2059,"column_start":2,"column_end":30}},{"value":"/ let one_bits = one.view_bits_mut::<Msb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":315798,"byte_end":315845,"line_start":2060,"line_end":2060,"column_start":2,"column_end":49}},{"value":"/ let two_bits = two.view_bits_mut::<Lsb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":315847,"byte_end":315894,"line_start":2061,"line_end":2061,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":315896,"byte_end":315899,"line_start":2062,"line_end":2062,"column_start":2,"column_end":5}},{"value":"/ one_bits.swap_with_bitslice(two_bits);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":315901,"byte_end":315943,"line_start":2063,"line_end":2063,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":315945,"byte_end":315948,"line_start":2064,"line_end":2064,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(one, [0x2C, 0x48]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":315950,"byte_end":315984,"line_start":2065,"line_end":2065,"column_start":2,"column_end":36}},{"value":"/ # #[cfg(target_endian = \"little\")] {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":315986,"byte_end":316026,"line_start":2066,"line_end":2066,"column_start":2,"column_end":42}},{"value":"/ assert_eq!(two, 0x96A5);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":316028,"byte_end":316056,"line_start":2067,"line_end":2067,"column_start":2,"column_end":30}},{"value":"/ # }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":316058,"byte_end":316065,"line_start":2068,"line_end":2068,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":316067,"byte_end":316074,"line_start":2069,"line_end":2069,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":316076,"byte_end":316085,"line_start":2070,"line_end":2070,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1430},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":316605,"byte_end":316620,"line_start":2092,"line_end":2092,"column_start":9,"column_end":24},"name":"swap_with_slice","qualname":"<BitSlice<O, T>>::swap_with_slice","value":"pub fn swap_with_slice<O2, T2>(&mut Self, &mut BitSlice<O2, T2>) where\nO2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":316470,"byte_end":316487,"line_start":2089,"line_end":2089,"column_start":2,"column_end":19}},{"value":"deprecated(note = \"Use `.swap_with_bitslice` to swap between bitslices\")","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":316489,"byte_end":316564,"line_start":2090,"line_end":2090,"column_start":2,"column_end":77}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":316566,"byte_end":316596,"line_start":2091,"line_end":2091,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1433},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":318742,"byte_end":318750,"line_start":2155,"line_end":2155,"column_start":16,"column_end":24},"name":"align_to","qualname":"<BitSlice<O, T>>::align_to","value":"pub unsafe fn align_to<U>(&Self) -> (&Self, &BitSlice<O, U>, &Self) where\nU: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Transmute the bitslice to a bitslice of another type, ensuring alignment\n of the types is maintained.","sig":null,"attributes":[{"value":"/ Transmute the bitslice to a bitslice of another type, ensuring alignment","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":316751,"byte_end":316827,"line_start":2100,"line_end":2100,"column_start":2,"column_end":78}},{"value":"/ of the types is maintained.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":316829,"byte_end":316860,"line_start":2101,"line_end":2101,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":316862,"byte_end":316865,"line_start":2102,"line_end":2102,"column_start":2,"column_end":5}},{"value":"/ This method splits the bitslice into three distinct bitslices: prefix,","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":316867,"byte_end":316941,"line_start":2103,"line_end":2103,"column_start":2,"column_end":76}},{"value":"/ correctly aligned middle bitslice of a new type, and the suffix","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":316943,"byte_end":317010,"line_start":2104,"line_end":2104,"column_start":2,"column_end":69}},{"value":"/ bitslice. The method may make the middle bitslice the greatest","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":317012,"byte_end":317078,"line_start":2105,"line_end":2105,"column_start":2,"column_end":68}},{"value":"/ length possible for a given type and input bitslice, but only your","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":317080,"byte_end":317150,"line_start":2106,"line_end":2106,"column_start":2,"column_end":72}},{"value":"/ algorithm's performance should depend on that, not its correctness. It","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":317152,"byte_end":317226,"line_start":2107,"line_end":2107,"column_start":2,"column_end":76}},{"value":"/ is permissible for all of the input data to be returned as the prefix or","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":317228,"byte_end":317304,"line_start":2108,"line_end":2108,"column_start":2,"column_end":78}},{"value":"/ suffix bitslice.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":317306,"byte_end":317326,"line_start":2109,"line_end":2109,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":317328,"byte_end":317331,"line_start":2110,"line_end":2110,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":317333,"byte_end":317347,"line_start":2111,"line_end":2111,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":317349,"byte_end":317352,"line_start":2112,"line_end":2112,"column_start":2,"column_end":5}},{"value":"/ [`slice::align_to`](https://doc.rust-lang.org/std/primitive.slice.html#method.align_to)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":317354,"byte_end":317445,"line_start":2113,"line_end":2113,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":317447,"byte_end":317450,"line_start":2114,"line_end":2114,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":317452,"byte_end":317473,"line_start":2115,"line_end":2115,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":317475,"byte_end":317478,"line_start":2116,"line_end":2116,"column_start":2,"column_end":5}},{"value":"/ Type `U` is **required** to have the same type family as type `T`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":317480,"byte_end":317550,"line_start":2117,"line_end":2117,"column_start":2,"column_end":72}},{"value":"/ Whatever `T` is of the fundamental integers, atomics, or `Cell`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":317552,"byte_end":317619,"line_start":2118,"line_end":2118,"column_start":2,"column_end":69}},{"value":"/ wrappers, `U` must be a different width in the same family. Changing the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":317621,"byte_end":317697,"line_start":2119,"line_end":2119,"column_start":2,"column_end":78}},{"value":"/ type family with this method is **unsound** and strictly forbidden.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":317699,"byte_end":317770,"line_start":2120,"line_end":2120,"column_start":2,"column_end":73}},{"value":"/ Unfortunately, it cannot be guaranteed by this function, so you are","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":317772,"byte_end":317843,"line_start":2121,"line_end":2121,"column_start":2,"column_end":73}},{"value":"/ required to abide by this limitation.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":317845,"byte_end":317886,"line_start":2122,"line_end":2122,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":317888,"byte_end":317891,"line_start":2123,"line_end":2123,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":317893,"byte_end":317905,"line_start":2124,"line_end":2124,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":317907,"byte_end":317910,"line_start":2125,"line_end":2125,"column_start":2,"column_end":5}},{"value":"/ This method is essentially a `transmute` with respect to the elements in","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":317912,"byte_end":317988,"line_start":2126,"line_end":2126,"column_start":2,"column_end":78}},{"value":"/ the returned middle bitslice, so all the usual caveats pertaining to","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":317990,"byte_end":318062,"line_start":2127,"line_end":2127,"column_start":2,"column_end":74}},{"value":"/ `transmute::<T, U>` also apply here.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":318064,"byte_end":318104,"line_start":2128,"line_end":2128,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":318106,"byte_end":318109,"line_start":2129,"line_end":2129,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":318111,"byte_end":318125,"line_start":2130,"line_end":2130,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":318127,"byte_end":318130,"line_start":2131,"line_end":2131,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":318132,"byte_end":318148,"line_start":2132,"line_end":2132,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":318150,"byte_end":318153,"line_start":2133,"line_end":2133,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":318155,"byte_end":318166,"line_start":2134,"line_end":2134,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":318168,"byte_end":318195,"line_start":2135,"line_end":2135,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":318197,"byte_end":318200,"line_start":2136,"line_end":2136,"column_start":2,"column_end":5}},{"value":"/ unsafe {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":318202,"byte_end":318214,"line_start":2137,"line_end":2137,"column_start":2,"column_end":14}},{"value":"/   let bytes: [u8; 7] = [1, 2, 3, 4, 5, 6, 7];","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":318216,"byte_end":318265,"line_start":2138,"line_end":2138,"column_start":2,"column_end":51}},{"value":"/   let bits = bytes.view_bits::<LocalBits>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":318267,"byte_end":318315,"line_start":2139,"line_end":2139,"column_start":2,"column_end":50}},{"value":"/   let (prefix, shorts, suffix) = bits.align_to::<u16>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":318317,"byte_end":318377,"line_start":2140,"line_end":2140,"column_start":2,"column_end":62}},{"value":"/   match prefix.len() {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":318379,"byte_end":318405,"line_start":2141,"line_end":2141,"column_start":2,"column_end":28}},{"value":"/     0 => {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":318407,"byte_end":318421,"line_start":2142,"line_end":2142,"column_start":2,"column_end":16}},{"value":"/       assert_eq!(shorts, bits[.. 48]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":318423,"byte_end":318465,"line_start":2143,"line_end":2143,"column_start":2,"column_end":44}},{"value":"/       assert_eq!(suffix, bits[48 ..]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":318467,"byte_end":318509,"line_start":2144,"line_end":2144,"column_start":2,"column_end":44}},{"value":"/     },","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":318511,"byte_end":318521,"line_start":2145,"line_end":2145,"column_start":2,"column_end":12}},{"value":"/     8 => {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":318523,"byte_end":318537,"line_start":2146,"line_end":2146,"column_start":2,"column_end":16}},{"value":"/       assert_eq!(prefix, bits[.. 8]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":318539,"byte_end":318580,"line_start":2147,"line_end":2147,"column_start":2,"column_end":43}},{"value":"/       assert_eq!(shorts, bits[8 ..]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":318582,"byte_end":318623,"line_start":2148,"line_end":2148,"column_start":2,"column_end":43}},{"value":"/     },","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":318625,"byte_end":318635,"line_start":2149,"line_end":2149,"column_start":2,"column_end":12}},{"value":"/     _ => unreachable!(\"This case will not occur\")","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":318637,"byte_end":318690,"line_start":2150,"line_end":2150,"column_start":2,"column_end":55}},{"value":"/   }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":318692,"byte_end":318699,"line_start":2151,"line_end":2151,"column_start":2,"column_end":9}},{"value":"/ }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":318701,"byte_end":318706,"line_start":2152,"line_end":2152,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":318708,"byte_end":318715,"line_start":2153,"line_end":2153,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":318717,"byte_end":318726,"line_start":2154,"line_end":2154,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1435},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":321444,"byte_end":321456,"line_start":2231,"line_end":2231,"column_start":16,"column_end":28},"name":"align_to_mut","qualname":"<BitSlice<O, T>>::align_to_mut","value":"pub unsafe fn align_to_mut<U>(&mut Self)\n-> (&mut Self, &mut BitSlice<O, U>, &mut Self) where U: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Transmute the bitslice to a bitslice of another type, ensuring alignment\n of the types is maintained.","sig":null,"attributes":[{"value":"/ Transmute the bitslice to a bitslice of another type, ensuring alignment","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":319710,"byte_end":319786,"line_start":2186,"line_end":2186,"column_start":2,"column_end":78}},{"value":"/ of the types is maintained.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":319788,"byte_end":319819,"line_start":2187,"line_end":2187,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":319821,"byte_end":319824,"line_start":2188,"line_end":2188,"column_start":2,"column_end":5}},{"value":"/ This method splits the bitslice into three distinct bitslices: prefix,","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":319826,"byte_end":319900,"line_start":2189,"line_end":2189,"column_start":2,"column_end":76}},{"value":"/ correctly aligned middle bitslice of a new type, and the suffix","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":319902,"byte_end":319969,"line_start":2190,"line_end":2190,"column_start":2,"column_end":69}},{"value":"/ bitslice. The method may make the middle bitslice the greatest","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":319971,"byte_end":320037,"line_start":2191,"line_end":2191,"column_start":2,"column_end":68}},{"value":"/ length possible for a given type and input bitslice, but only your","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":320039,"byte_end":320109,"line_start":2192,"line_end":2192,"column_start":2,"column_end":72}},{"value":"/ algorithm's performance should depend on that, not its correctness. It","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":320111,"byte_end":320185,"line_start":2193,"line_end":2193,"column_start":2,"column_end":76}},{"value":"/ is permissible for all of the input data to be returned as the prefix or","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":320187,"byte_end":320263,"line_start":2194,"line_end":2194,"column_start":2,"column_end":78}},{"value":"/ suffix bitslice.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":320265,"byte_end":320285,"line_start":2195,"line_end":2195,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":320287,"byte_end":320290,"line_start":2196,"line_end":2196,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":320292,"byte_end":320306,"line_start":2197,"line_end":2197,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":320308,"byte_end":320311,"line_start":2198,"line_end":2198,"column_start":2,"column_end":5}},{"value":"/ [`slice::align_to`](https://doc.rust-lang.org/std/primitive.slice.html#method.align_to)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":320313,"byte_end":320404,"line_start":2199,"line_end":2199,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":320406,"byte_end":320409,"line_start":2200,"line_end":2200,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":320411,"byte_end":320432,"line_start":2201,"line_end":2201,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":320434,"byte_end":320437,"line_start":2202,"line_end":2202,"column_start":2,"column_end":5}},{"value":"/ Type `U` is **required** to have the same type family as type `T`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":320439,"byte_end":320509,"line_start":2203,"line_end":2203,"column_start":2,"column_end":72}},{"value":"/ Whatever `T` is of the fundamental integers, atomics, or `Cell`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":320511,"byte_end":320578,"line_start":2204,"line_end":2204,"column_start":2,"column_end":69}},{"value":"/ wrappers, `U` must be a different width in the same family. Changing the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":320580,"byte_end":320656,"line_start":2205,"line_end":2205,"column_start":2,"column_end":78}},{"value":"/ type family with this method is **unsound** and strictly forbidden.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":320658,"byte_end":320729,"line_start":2206,"line_end":2206,"column_start":2,"column_end":73}},{"value":"/ Unfortunately, it cannot be guaranteed by this function, so you are","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":320731,"byte_end":320802,"line_start":2207,"line_end":2207,"column_start":2,"column_end":73}},{"value":"/ required to abide by this limitation.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":320804,"byte_end":320845,"line_start":2208,"line_end":2208,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":320847,"byte_end":320850,"line_start":2209,"line_end":2209,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":320852,"byte_end":320864,"line_start":2210,"line_end":2210,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":320866,"byte_end":320869,"line_start":2211,"line_end":2211,"column_start":2,"column_end":5}},{"value":"/ This method is essentially a `transmute` with respect to the elements in","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":320871,"byte_end":320947,"line_start":2212,"line_end":2212,"column_start":2,"column_end":78}},{"value":"/ the returned middle bitslice, so all the usual caveats pertaining to","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":320949,"byte_end":321021,"line_start":2213,"line_end":2213,"column_start":2,"column_end":74}},{"value":"/ `transmute::<T, U>` also apply here.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":321023,"byte_end":321063,"line_start":2214,"line_end":2214,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":321065,"byte_end":321068,"line_start":2215,"line_end":2215,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":321070,"byte_end":321084,"line_start":2216,"line_end":2216,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":321086,"byte_end":321089,"line_start":2217,"line_end":2217,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":321091,"byte_end":321107,"line_start":2218,"line_end":2218,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":321109,"byte_end":321112,"line_start":2219,"line_end":2219,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":321114,"byte_end":321125,"line_start":2220,"line_end":2220,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":321127,"byte_end":321154,"line_start":2221,"line_end":2221,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":321156,"byte_end":321159,"line_start":2222,"line_end":2222,"column_start":2,"column_end":5}},{"value":"/ unsafe {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":321161,"byte_end":321173,"line_start":2223,"line_end":2223,"column_start":2,"column_end":14}},{"value":"/   let mut bytes: [u8; 7] = [1, 2, 3, 4, 5, 6, 7];","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":321175,"byte_end":321228,"line_start":2224,"line_end":2224,"column_start":2,"column_end":55}},{"value":"/   let bits = bytes.view_bits_mut::<LocalBits>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":321230,"byte_end":321282,"line_start":2225,"line_end":2225,"column_start":2,"column_end":54}},{"value":"/   let (prefix, shorts, suffix) = bits.align_to_mut::<u16>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":321284,"byte_end":321348,"line_start":2226,"line_end":2226,"column_start":2,"column_end":66}},{"value":"/   //  same access and behavior as in `align_to`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":321350,"byte_end":321401,"line_start":2227,"line_end":2227,"column_start":2,"column_end":53}},{"value":"/ }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":321403,"byte_end":321408,"line_start":2228,"line_end":2228,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":321410,"byte_end":321417,"line_start":2229,"line_end":2229,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":321419,"byte_end":321428,"line_start":2230,"line_end":2230,"column_start":2,"column_end":11}}]},{"kind":"Function","id":{"krate":0,"index":1437},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":323979,"byte_end":323987,"line_start":2340,"line_end":2340,"column_start":8,"column_end":16},"name":"from_ref","qualname":"::slice::api::from_ref","value":"pub fn from_ref<O, T>(&T) -> &BitSlice<O, T> where O: BitOrder, T: BitStore +\nBitMemory","parent":null,"children":[],"decl_id":null,"docs":" Converts a reference to `T` into a bitslice over one element.","sig":null,"attributes":[{"value":"* Converts a reference to `T` into a bitslice over one element.\n\n# Original\n\n[`slice::from_ref`](https://doc.rust-lang.org/core/slice/fn.from_ref.html)\n**/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":323796,"byte_end":323953,"line_start":2333,"line_end":2338,"column_start":1,"column_end":4}},{"value":"inline(always)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":323954,"byte_end":323971,"line_start":2339,"line_end":2339,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":1440},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":324287,"byte_end":324295,"line_start":2355,"line_end":2355,"column_start":8,"column_end":16},"name":"from_mut","qualname":"::slice::api::from_mut","value":"pub fn from_mut<O, T>(&mut T) -> &mut BitSlice<O, T> where O: BitOrder,\nT: BitStore + BitMemory","parent":null,"children":[],"decl_id":null,"docs":" Converts a reference to `T` into a bitslice over one element.","sig":null,"attributes":[{"value":"* Converts a reference to `T` into a bitslice over one element.\n\n# Original\n\n[`slice::from_mut`](https://doc.rust-lang.org/core/slice/fn.from_mut.html)\n**/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":324104,"byte_end":324261,"line_start":2348,"line_end":2353,"column_start":1,"column_end":4}},{"value":"inline(always)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":324262,"byte_end":324279,"line_start":2354,"line_end":2354,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":1443},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":326744,"byte_end":326758,"line_start":2420,"line_end":2420,"column_start":15,"column_end":29},"name":"from_raw_parts","qualname":"::slice::api::from_raw_parts","value":"pub unsafe fn from_raw_parts<'a, O, T>(*const T, usize) -> &'a BitSlice<O, T>\nwhere O: BitOrder, T: 'a + BitStore + BitMemory","parent":null,"children":[],"decl_id":null,"docs":" Forms a bitslice from a pointer and a length.","sig":null,"attributes":[{"value":"/ Forms a bitslice from a pointer and a length.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":324657,"byte_end":324706,"line_start":2368,"line_end":2368,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":324707,"byte_end":324710,"line_start":2369,"line_end":2369,"column_start":1,"column_end":4}},{"value":"/ The `len` argument is the number of **elements**, not the number of bits.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":324711,"byte_end":324788,"line_start":2370,"line_end":2370,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":324789,"byte_end":324792,"line_start":2371,"line_end":2371,"column_start":1,"column_end":4}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":324793,"byte_end":324807,"line_start":2372,"line_end":2372,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":324808,"byte_end":324811,"line_start":2373,"line_end":2373,"column_start":1,"column_end":4}},{"value":"/ [`slice::from_raw_parts`](https://doc.rust-lang.org/core/slice/fn.from_raw_parts.html)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":324812,"byte_end":324902,"line_start":2374,"line_end":2374,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":324903,"byte_end":324906,"line_start":2375,"line_end":2375,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":324907,"byte_end":324919,"line_start":2376,"line_end":2376,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":324920,"byte_end":324923,"line_start":2377,"line_end":2377,"column_start":1,"column_end":4}},{"value":"/ Behavior is undefined if any of the following conditions are violated:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":324924,"byte_end":324998,"line_start":2378,"line_end":2378,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":324999,"byte_end":325002,"line_start":2379,"line_end":2379,"column_start":1,"column_end":4}},{"value":"/ - `data` must be [valid] for `len * mem::size_of::<T>()` many bytes, and it","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":325003,"byte_end":325082,"line_start":2380,"line_end":2380,"column_start":1,"column_end":80}},{"value":"/   must be properly aligned. This means in particular:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":325083,"byte_end":325140,"line_start":2381,"line_end":2381,"column_start":1,"column_end":58}},{"value":"/   - The entire memory range of this slice must be contained within a single","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":325141,"byte_end":325220,"line_start":2382,"line_end":2382,"column_start":1,"column_end":80}},{"value":"/     allocated object! Slices can never span across multiple allocated","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":325221,"byte_end":325294,"line_start":2383,"line_end":2383,"column_start":1,"column_end":74}},{"value":"/     objects.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":325295,"byte_end":325311,"line_start":2384,"line_end":2384,"column_start":1,"column_end":17}},{"value":"/   - `data` must be non-null and aligned even for zero-length slices. The","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":325312,"byte_end":325388,"line_start":2385,"line_end":2385,"column_start":1,"column_end":77}},{"value":"/     `&BitSlice` pointer encoding requires this porperty to hold. You can","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":325389,"byte_end":325465,"line_start":2386,"line_end":2386,"column_start":1,"column_end":77}},{"value":"/     obtain a pointer that is usable as `data` for zero-length slices using","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":325466,"byte_end":325544,"line_start":2387,"line_end":2387,"column_start":1,"column_end":79}},{"value":"/     [`NonNull::dangling()`].","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":325545,"byte_end":325577,"line_start":2388,"line_end":2388,"column_start":1,"column_end":33}},{"value":"/ - The memory referenced by the returned bitslice must not be mutated for the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":325578,"byte_end":325658,"line_start":2389,"line_end":2389,"column_start":1,"column_end":81}},{"value":"/   duration of the lifetime `'a`, except inside an `UnsafeCell`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":325659,"byte_end":325726,"line_start":2390,"line_end":2390,"column_start":1,"column_end":68}},{"value":"/ - The total size `len * T::Mem::BITS` of the slice must be no larger than","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":325727,"byte_end":325804,"line_start":2391,"line_end":2391,"column_start":1,"column_end":78}},{"value":"/   [`BitSlice::<_, T>::MAX_BITS`]","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":325805,"byte_end":325841,"line_start":2392,"line_end":2392,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":325842,"byte_end":325845,"line_start":2393,"line_end":2393,"column_start":1,"column_end":4}},{"value":"/ # Caveat","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":325846,"byte_end":325858,"line_start":2394,"line_end":2394,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":325859,"byte_end":325862,"line_start":2395,"line_end":2395,"column_start":1,"column_end":4}},{"value":"/ The lifetime for the returned slice is inferred from its usage. To prevent","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":325863,"byte_end":325941,"line_start":2396,"line_end":2396,"column_start":1,"column_end":79}},{"value":"/ accidental misuse, it's suggested to tie the lifetime to whichever source","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":325942,"byte_end":326019,"line_start":2397,"line_end":2397,"column_start":1,"column_end":78}},{"value":"/ lifetime is safe in the context, such as by providing a helper function","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":326020,"byte_end":326095,"line_start":2398,"line_end":2398,"column_start":1,"column_end":76}},{"value":"/ taking the lifetime of a host value for the slice, or by explicit","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":326096,"byte_end":326165,"line_start":2399,"line_end":2399,"column_start":1,"column_end":70}},{"value":"/ annotation.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":326166,"byte_end":326181,"line_start":2400,"line_end":2400,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":326182,"byte_end":326185,"line_start":2401,"line_end":2401,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":326186,"byte_end":326200,"line_start":2402,"line_end":2402,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":326201,"byte_end":326204,"line_start":2403,"line_end":2403,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":326205,"byte_end":326216,"line_start":2404,"line_end":2404,"column_start":1,"column_end":12}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":326217,"byte_end":326244,"line_start":2405,"line_end":2405,"column_start":1,"column_end":28}},{"value":"/ use bitvec::slice as bv_slice;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":326245,"byte_end":326279,"line_start":2406,"line_end":2406,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":326280,"byte_end":326283,"line_start":2407,"line_end":2407,"column_start":1,"column_end":4}},{"value":"/ let x = 42u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":326284,"byte_end":326301,"line_start":2408,"line_end":2408,"column_start":1,"column_end":18}},{"value":"/ let ptr = &x as *const _;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":326302,"byte_end":326331,"line_start":2409,"line_end":2409,"column_start":1,"column_end":30}},{"value":"/ let bits = unsafe {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":326332,"byte_end":326355,"line_start":2410,"line_end":2410,"column_start":1,"column_end":24}},{"value":"/   bv_slice::from_raw_parts::<LocalBits, u8>(ptr, 1)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":326356,"byte_end":326411,"line_start":2411,"line_end":2411,"column_start":1,"column_end":56}},{"value":"/ };","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":326412,"byte_end":326418,"line_start":2412,"line_end":2412,"column_start":1,"column_end":7}},{"value":"/ assert_eq!(bits.count_ones(), 3);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":326419,"byte_end":326456,"line_start":2413,"line_end":2413,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":326457,"byte_end":326464,"line_start":2414,"line_end":2414,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":326465,"byte_end":326468,"line_start":2415,"line_end":2415,"column_start":1,"column_end":4}},{"value":"/ [valid]: https://doc.rust-lang.org/core/ptr/index.html#safety","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":326469,"byte_end":326534,"line_start":2416,"line_end":2416,"column_start":1,"column_end":66}},{"value":"/ [`BitSlice::<_, T>::MAX_BITS`]:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":326535,"byte_end":326570,"line_start":2417,"line_end":2417,"column_start":1,"column_end":36}},{"value":"/ struct.BitSlice.html#associatedconstant.MAX_BITS [`NonNull::dangling()`]: https://doc.rust-lang.org/core/ptr/struct.NonNull.html#method.dangling","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":326571,"byte_end":326719,"line_start":2418,"line_end":2418,"column_start":1,"column_end":149}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":326720,"byte_end":326729,"line_start":2419,"line_end":2419,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1448},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":328631,"byte_end":328649,"line_start":2469,"line_end":2469,"column_start":15,"column_end":33},"name":"from_raw_parts_mut","qualname":"::slice::api::from_raw_parts_mut","value":"pub unsafe fn from_raw_parts_mut<'a, O, T>(*mut T, usize)\n-> &'a mut BitSlice<O, T> where O: BitOrder, T: 'a + BitStore + BitMemory","parent":null,"children":[],"decl_id":null,"docs":" Performs the same functionality as [`from_raw_parts`], except that a mutable\n bitslice is returned.","sig":null,"attributes":[{"value":"/ Performs the same functionality as [`from_raw_parts`], except that a mutable","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":327102,"byte_end":327182,"line_start":2438,"line_end":2438,"column_start":1,"column_end":81}},{"value":"/ bitslice is returned.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":327183,"byte_end":327208,"line_start":2439,"line_end":2439,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":327209,"byte_end":327212,"line_start":2440,"line_end":2440,"column_start":1,"column_end":4}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":327213,"byte_end":327227,"line_start":2441,"line_end":2441,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":327228,"byte_end":327231,"line_start":2442,"line_end":2442,"column_start":1,"column_end":4}},{"value":"/ [`slice::from_raw_parts_mut`](https://doc.rust-lang.org/core/slice/fn.from_raw_parts_mut.html)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":327232,"byte_end":327330,"line_start":2443,"line_end":2443,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":327331,"byte_end":327334,"line_start":2444,"line_end":2444,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":327335,"byte_end":327347,"line_start":2445,"line_end":2445,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":327348,"byte_end":327351,"line_start":2446,"line_end":2446,"column_start":1,"column_end":4}},{"value":"/ Behavior is undefined if any of the following conditions are violated:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":327352,"byte_end":327426,"line_start":2447,"line_end":2447,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":327427,"byte_end":327430,"line_start":2448,"line_end":2448,"column_start":1,"column_end":4}},{"value":"/ - `data` must be [valid] for `len * mem::size_of::<T>()` many bytes, and it","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":327431,"byte_end":327510,"line_start":2449,"line_end":2449,"column_start":1,"column_end":80}},{"value":"/   must be properly aligned. This means in particular:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":327511,"byte_end":327568,"line_start":2450,"line_end":2450,"column_start":1,"column_end":58}},{"value":"/   - The entire memory range of this slice must be contained within a single","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":327569,"byte_end":327648,"line_start":2451,"line_end":2451,"column_start":1,"column_end":80}},{"value":"/     allocated object! Slices can never span across multiple allocated","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":327649,"byte_end":327722,"line_start":2452,"line_end":2452,"column_start":1,"column_end":74}},{"value":"/     objects.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":327723,"byte_end":327739,"line_start":2453,"line_end":2453,"column_start":1,"column_end":17}},{"value":"/   - `data` must be non-null and aligned even for zero-length slices. The","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":327740,"byte_end":327816,"line_start":2454,"line_end":2454,"column_start":1,"column_end":77}},{"value":"/     `&BitSlice` pointer encoding requires this porperty to hold. You can","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":327817,"byte_end":327893,"line_start":2455,"line_end":2455,"column_start":1,"column_end":77}},{"value":"/     obtain a pointer that is usable as `data` for zero-length slices using","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":327894,"byte_end":327972,"line_start":2456,"line_end":2456,"column_start":1,"column_end":79}},{"value":"/     [`NonNull::dangling()`].","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":327973,"byte_end":328005,"line_start":2457,"line_end":2457,"column_start":1,"column_end":33}},{"value":"/ - The memory referenced by the returned bitslice must not be accessed","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":328006,"byte_end":328079,"line_start":2458,"line_end":2458,"column_start":1,"column_end":74}},{"value":"/   through other pointer (not derived from the return value) for the duration","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":328080,"byte_end":328160,"line_start":2459,"line_end":2459,"column_start":1,"column_end":81}},{"value":"/   of the lifetime `'a`. Both read and write accesses are forbidden.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":328161,"byte_end":328232,"line_start":2460,"line_end":2460,"column_start":1,"column_end":72}},{"value":"/ - The total size `len * T::Mem::BITS` of the slice must be no larger than","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":328233,"byte_end":328310,"line_start":2461,"line_end":2461,"column_start":1,"column_end":78}},{"value":"/   [`BitSlice::<_, T>::MAX_BITS`]","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":328311,"byte_end":328347,"line_start":2462,"line_end":2462,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":328348,"byte_end":328351,"line_start":2463,"line_end":2463,"column_start":1,"column_end":4}},{"value":"/ [valid]: https://doc.rust-lang.org/core/ptr/index.html#safety","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":328352,"byte_end":328417,"line_start":2464,"line_end":2464,"column_start":1,"column_end":66}},{"value":"/ [`BitSlice::<_, T>::MAX_BITS`]:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":328418,"byte_end":328453,"line_start":2465,"line_end":2465,"column_start":1,"column_end":36}},{"value":"/ struct.BitSlice.html#associatedconstant.MAX_BITS","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":328454,"byte_end":328506,"line_start":2466,"line_end":2466,"column_start":1,"column_end":53}},{"value":"/ [`NonNull::dangling()`]: https://doc.rust-lang.org/core/ptr/struct.NonNull.html#method.dangling","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":328507,"byte_end":328606,"line_start":2467,"line_end":2467,"column_start":1,"column_end":100}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":328607,"byte_end":328616,"line_start":2468,"line_end":2468,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":1453},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":329857,"byte_end":329870,"line_start":2508,"line_end":2508,"column_start":11,"column_end":24},"name":"BitSliceIndex","qualname":"::slice::api::BitSliceIndex","value":"BitSliceIndex<'a, O, T>","parent":null,"children":[{"krate":0,"index":1457},{"krate":0,"index":1458},{"krate":0,"index":1459},{"krate":0,"index":1460},{"krate":0,"index":1461},{"krate":0,"index":1462},{"krate":0,"index":1463},{"krate":0,"index":1464}],"decl_id":null,"docs":" A helper trait used for indexing operations.","sig":null,"attributes":[{"value":"* A helper trait used for indexing operations.\n\nThis trait has its definition stabilized, but has not stabilized its associated\nfunctions. This means it cannot be implemented outside of the distribution\nlibraries. *Furthermore*, since `bitvec` cannot create `&mut bool` references,\nit is insufficient for `bitvec`’s uses.\n\nThere is no tracking issue for `feature(slice_index_methods)`.\n\n# Original\n\n[`slice::SliceIndex`](https://doc.rust-lang.org/stable/core/slice/trait.SliceIndex.html)\n\n# API Differences\n\n`SliceIndex::Output` is not usable here, because the `usize` implementation\ncannot produce `&mut bool`. Instead, two output types `Immut` and `Mut` are\ndefined. The range implementations define these to be the appropriately mutable\n`BitSlice` reference; the `usize` implementation defines them to be `&bool` and\nthe proxy type.\n**/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":329003,"byte_end":329846,"line_start":2487,"line_end":2507,"column_start":1,"column_end":4}}]},{"kind":"Type","id":{"krate":0,"index":1457},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":329979,"byte_end":329984,"line_start":2514,"line_end":2514,"column_start":7,"column_end":12},"name":"Immut","qualname":"::slice::api::BitSliceIndex::Immut","value":"type Immut;","parent":{"krate":0,"index":1453},"children":[],"decl_id":null,"docs":" The output type for immutable functions.\n","sig":null,"attributes":[{"value":"/ The output type for immutable functions.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":329928,"byte_end":329972,"line_start":2513,"line_end":2513,"column_start":2,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":1458},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":330037,"byte_end":330040,"line_start":2517,"line_end":2517,"column_start":7,"column_end":10},"name":"Mut","qualname":"::slice::api::BitSliceIndex::Mut","value":"type Mut;","parent":{"krate":0,"index":1453},"children":[],"decl_id":null,"docs":" The output type for mutable functions.\n","sig":null,"attributes":[{"value":"/ The output type for mutable functions.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":329988,"byte_end":330030,"line_start":2516,"line_end":2516,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1459},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":330247,"byte_end":330250,"line_start":2524,"line_end":2524,"column_start":5,"column_end":8},"name":"get","qualname":"::slice::api::BitSliceIndex::get","value":"pub fn get(Self, &'a BitSlice<O, T>) -> Option<Self::Immut>","parent":{"krate":0,"index":1453},"children":[],"decl_id":null,"docs":" Returns a shared reference to the output at this location, if in bounds.","sig":null,"attributes":[{"value":"/ Returns a shared reference to the output at this location, if in bounds.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":330044,"byte_end":330120,"line_start":2519,"line_end":2519,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":330122,"byte_end":330125,"line_start":2520,"line_end":2520,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":330127,"byte_end":330141,"line_start":2521,"line_end":2521,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":330143,"byte_end":330146,"line_start":2522,"line_end":2522,"column_start":2,"column_end":5}},{"value":"/ [`SliceIndex::get`](https://doc.rust-lang.org/core/slice/trait.SliceIndex.html#method.get)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":330148,"byte_end":330242,"line_start":2523,"line_end":2523,"column_start":2,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":1460},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":330527,"byte_end":330534,"line_start":2532,"line_end":2532,"column_start":5,"column_end":12},"name":"get_mut","qualname":"::slice::api::BitSliceIndex::get_mut","value":"pub fn get_mut(Self, &'a mut BitSlice<O, T>) -> Option<Self::Mut>","parent":{"krate":0,"index":1453},"children":[],"decl_id":null,"docs":" Returns a mutable reference to the output at this location, if in\n bounds.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the output at this location, if in","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":330310,"byte_end":330379,"line_start":2526,"line_end":2526,"column_start":2,"column_end":71}},{"value":"/ bounds.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":330381,"byte_end":330392,"line_start":2527,"line_end":2527,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":330394,"byte_end":330397,"line_start":2528,"line_end":2528,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":330399,"byte_end":330413,"line_start":2529,"line_end":2529,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":330415,"byte_end":330418,"line_start":2530,"line_end":2530,"column_start":2,"column_end":5}},{"value":"/ [`SliceIndex::get_mut`](https://doc.rust-lang.org/core/slice/trait.SliceIndex.html#method.get_mut)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":330420,"byte_end":330522,"line_start":2531,"line_end":2531,"column_start":2,"column_end":104}}]},{"kind":"Method","id":{"krate":0,"index":1461},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":331351,"byte_end":331364,"line_start":2551,"line_end":2551,"column_start":12,"column_end":25},"name":"get_unchecked","qualname":"::slice::api::BitSliceIndex::get_unchecked","value":"pub unsafe fn get_unchecked(Self, &'a BitSlice<O, T>) -> Self::Immut","parent":{"krate":0,"index":1453},"children":[],"decl_id":null,"docs":" Returns a shared reference to the output at this location, without\n performing any bounds checking. Calling this method with an\n out-of-bounds index is [undefined behavior] even if the resulting\n reference is not used.","sig":null,"attributes":[{"value":"/ Returns a shared reference to the output at this location, without","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":330596,"byte_end":330666,"line_start":2534,"line_end":2534,"column_start":2,"column_end":72}},{"value":"/ performing any bounds checking. Calling this method with an","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":330668,"byte_end":330731,"line_start":2535,"line_end":2535,"column_start":2,"column_end":65}},{"value":"/ out-of-bounds index is [undefined behavior] even if the resulting","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":330733,"byte_end":330802,"line_start":2536,"line_end":2536,"column_start":2,"column_end":71}},{"value":"/ reference is not used.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":330804,"byte_end":330830,"line_start":2537,"line_end":2537,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":330832,"byte_end":330835,"line_start":2538,"line_end":2538,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":330837,"byte_end":330851,"line_start":2539,"line_end":2539,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":330853,"byte_end":330856,"line_start":2540,"line_end":2540,"column_start":2,"column_end":5}},{"value":"/ [`SliceIndex::get_unchecked`](https://doc.rust-lang.org/core/slice/trait.SliceIndex.html#method.get_unchecked)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":330858,"byte_end":330972,"line_start":2541,"line_end":2541,"column_start":2,"column_end":116}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":330974,"byte_end":330977,"line_start":2542,"line_end":2542,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":330979,"byte_end":330991,"line_start":2543,"line_end":2543,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":330993,"byte_end":330996,"line_start":2544,"line_end":2544,"column_start":2,"column_end":5}},{"value":"/ As this function does not perform boundary checking, the caller must","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":330998,"byte_end":331070,"line_start":2545,"line_end":2545,"column_start":2,"column_end":74}},{"value":"/ ensure that `self` is an index within the boundaries of `slice` before","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":331072,"byte_end":331146,"line_start":2546,"line_end":2546,"column_start":2,"column_end":76}},{"value":"/ calling in order to prevent boundary escapes and the ensuing safety","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":331148,"byte_end":331219,"line_start":2547,"line_end":2547,"column_start":2,"column_end":73}},{"value":"/ violations.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":331221,"byte_end":331236,"line_start":2548,"line_end":2548,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":331238,"byte_end":331241,"line_start":2549,"line_end":2549,"column_start":2,"column_end":5}},{"value":"/ [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":331243,"byte_end":331339,"line_start":2550,"line_end":2550,"column_start":2,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":1462},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":332180,"byte_end":332197,"line_start":2570,"line_end":2570,"column_start":12,"column_end":29},"name":"get_unchecked_mut","qualname":"::slice::api::BitSliceIndex::get_unchecked_mut","value":"pub unsafe fn get_unchecked_mut(Self, &'a mut BitSlice<O, T>) -> Self::Mut","parent":{"krate":0,"index":1453},"children":[],"decl_id":null,"docs":" Returns a mutable reference to the output at this location, without\n performing any bounds checking. Calling this method with an\n out-of-bounds index is [undefined behavior] even if the resulting\n reference is not used.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the output at this location, without","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":331416,"byte_end":331487,"line_start":2553,"line_end":2553,"column_start":2,"column_end":73}},{"value":"/ performing any bounds checking. Calling this method with an","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":331489,"byte_end":331552,"line_start":2554,"line_end":2554,"column_start":2,"column_end":65}},{"value":"/ out-of-bounds index is [undefined behavior] even if the resulting","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":331554,"byte_end":331623,"line_start":2555,"line_end":2555,"column_start":2,"column_end":71}},{"value":"/ reference is not used.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":331625,"byte_end":331651,"line_start":2556,"line_end":2556,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":331653,"byte_end":331656,"line_start":2557,"line_end":2557,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":331658,"byte_end":331672,"line_start":2558,"line_end":2558,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":331674,"byte_end":331677,"line_start":2559,"line_end":2559,"column_start":2,"column_end":5}},{"value":"/ [`SliceIndex::get_unchecked_mut`](https://doc.rust-lang.org/core/slice/trait.SliceIndex.html#method.get_unchecked_mut)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":331679,"byte_end":331801,"line_start":2560,"line_end":2560,"column_start":2,"column_end":124}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":331803,"byte_end":331806,"line_start":2561,"line_end":2561,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":331808,"byte_end":331820,"line_start":2562,"line_end":2562,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":331822,"byte_end":331825,"line_start":2563,"line_end":2563,"column_start":2,"column_end":5}},{"value":"/ As this function does not perform boundary checking, the caller must","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":331827,"byte_end":331899,"line_start":2564,"line_end":2564,"column_start":2,"column_end":74}},{"value":"/ ensure that `self` is an index within the boundaries of `slice` before","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":331901,"byte_end":331975,"line_start":2565,"line_end":2565,"column_start":2,"column_end":76}},{"value":"/ calling in order to prevent boundary escapes and the ensuing safety","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":331977,"byte_end":332048,"line_start":2566,"line_end":2566,"column_start":2,"column_end":73}},{"value":"/ violations.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":332050,"byte_end":332065,"line_start":2567,"line_end":2567,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":332067,"byte_end":332070,"line_start":2568,"line_end":2568,"column_start":2,"column_end":5}},{"value":"/ [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":332072,"byte_end":332168,"line_start":2569,"line_end":2569,"column_start":2,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":1463},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":332485,"byte_end":332490,"line_start":2581,"line_end":2581,"column_start":5,"column_end":10},"name":"index","qualname":"::slice::api::BitSliceIndex::index","value":"pub fn index(Self, &'a BitSlice<O, T>) -> Self::Immut","parent":{"krate":0,"index":1453},"children":[],"decl_id":null,"docs":" Returns a shared reference to the output at this location, panicking if\n out of bounds.","sig":null,"attributes":[{"value":"/ Returns a shared reference to the output at this location, panicking if","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":332259,"byte_end":332334,"line_start":2575,"line_end":2575,"column_start":2,"column_end":77}},{"value":"/ out of bounds.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":332336,"byte_end":332354,"line_start":2576,"line_end":2576,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":332356,"byte_end":332359,"line_start":2577,"line_end":2577,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":332361,"byte_end":332375,"line_start":2578,"line_end":2578,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":332377,"byte_end":332380,"line_start":2579,"line_end":2579,"column_start":2,"column_end":5}},{"value":"/ [`SliceIndex::index`](https://doc.rust-lang.org/core/slice/trait.SliceIndex.html#method.index)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":332382,"byte_end":332480,"line_start":2580,"line_end":2580,"column_start":2,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":1464},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":332777,"byte_end":332786,"line_start":2589,"line_end":2589,"column_start":5,"column_end":14},"name":"index_mut","qualname":"::slice::api::BitSliceIndex::index_mut","value":"pub fn index_mut(Self, &'a mut BitSlice<O, T>) -> Self::Mut","parent":{"krate":0,"index":1453},"children":[],"decl_id":null,"docs":" Returns a mutable reference to the output at this location, panicking if\n out of bounds.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the output at this location, panicking if","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":332542,"byte_end":332618,"line_start":2583,"line_end":2583,"column_start":2,"column_end":78}},{"value":"/ out of bounds.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":332620,"byte_end":332638,"line_start":2584,"line_end":2584,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":332640,"byte_end":332643,"line_start":2585,"line_end":2585,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":332645,"byte_end":332659,"line_start":2586,"line_end":2586,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":332661,"byte_end":332664,"line_start":2587,"line_end":2587,"column_start":2,"column_end":5}},{"value":"/ [`SliceIndex::index_mut`](https://doc.rust-lang.org/core/slice/trait.SliceIndex.html#method.index_mut)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":332666,"byte_end":332772,"line_start":2588,"line_end":2588,"column_start":2,"column_end":108}}]},{"kind":"Struct","id":{"krate":0,"index":2787},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":339589,"byte_end":339593,"line_start":60,"line_end":60,"column_start":12,"column_end":16},"name":"Iter","qualname":"::slice::iter::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":2791},{"krate":0,"index":2792},{"krate":0,"index":2793},{"krate":0,"index":2794},{"krate":0,"index":2795}],"decl_id":null,"docs":" Immutable slice iterator","sig":null,"attributes":[{"value":"* Immutable slice iterator\n\nThis struct is created by the [`iter`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::Iter`](https://doc.rust-lang.org/core/slice/struct.Iter.html)\n\n# Examples\n\nBasic usage:\n\n```rust\n# #[cfg(feature = \"std\")] {\nuse bitvec::prelude::*;\n\n// First, we declare a type which has `iter` method to get the `Iter` struct (&BitSlice here):\nlet data = 129u8;\nlet bits = BitSlice::<LocalBits, _>::from_element(&data);\n\n// Then, we iterato over it:\nfor bit in bits.iter() {\n  println!(\"{}\", bit);\n}\n# }\n```\n\n[`BitSlice`]: struct.BitSlice.html\n[`iter`]: struct.BitSlice.html#method.iter\n**/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":338953,"byte_end":339560,"line_start":29,"line_end":58,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":1549},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":342097,"byte_end":342108,"line_start":134,"line_end":134,"column_start":9,"column_end":20},"name":"as_bitslice","qualname":"<Iter>::as_bitslice","value":"pub fn as_bitslice(&Self) -> &'a BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Views the underlying data as a subslice of the original data.","sig":null,"attributes":[{"value":"/ Views the underlying data as a subslice of the original data.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":340888,"byte_end":340953,"line_start":95,"line_end":95,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":340955,"byte_end":340958,"line_start":96,"line_end":96,"column_start":2,"column_end":5}},{"value":"/ This has the same lifetime as the original bit slice, and so the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":340960,"byte_end":341028,"line_start":97,"line_end":97,"column_start":2,"column_end":70}},{"value":"/ iterator can continue to be used while this exists.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":341030,"byte_end":341085,"line_start":98,"line_end":98,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":341087,"byte_end":341090,"line_start":99,"line_end":99,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":341092,"byte_end":341106,"line_start":100,"line_end":100,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":341108,"byte_end":341111,"line_start":101,"line_end":101,"column_start":2,"column_end":5}},{"value":"/ [`Iter::as_slice`](https://doc.rust-lang.org/core/slice/struct.Iter.html#method.as_slice)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":341113,"byte_end":341206,"line_start":102,"line_end":102,"column_start":2,"column_end":95}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":341208,"byte_end":341211,"line_start":103,"line_end":103,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":341213,"byte_end":341234,"line_start":104,"line_end":104,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":341236,"byte_end":341239,"line_start":105,"line_end":105,"column_start":2,"column_end":5}},{"value":"/ This is renamed, as its return type is not an element slice `&[T]` or","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":341241,"byte_end":341314,"line_start":106,"line_end":106,"column_start":2,"column_end":75}},{"value":"/ `&[bool]` but a bit slice.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":341316,"byte_end":341346,"line_start":107,"line_end":107,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":341348,"byte_end":341351,"line_start":108,"line_end":108,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":341353,"byte_end":341367,"line_start":109,"line_end":109,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":341369,"byte_end":341372,"line_start":110,"line_end":110,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":341374,"byte_end":341390,"line_start":111,"line_end":111,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":341392,"byte_end":341395,"line_start":112,"line_end":112,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":341397,"byte_end":341408,"line_start":113,"line_end":113,"column_start":2,"column_end":13}},{"value":"/ # #[cfg(feature = \"std\")] {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":341410,"byte_end":341441,"line_start":114,"line_end":114,"column_start":2,"column_end":33}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":341443,"byte_end":341470,"line_start":115,"line_end":115,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":341472,"byte_end":341475,"line_start":116,"line_end":116,"column_start":2,"column_end":5}},{"value":"/ // First, we declare a type which has the `iter` method to get the `Iter`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":341477,"byte_end":341554,"line_start":117,"line_end":117,"column_start":2,"column_end":79}},{"value":"/ // struct (&BitSlice here):","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":341556,"byte_end":341587,"line_start":118,"line_end":118,"column_start":2,"column_end":33}},{"value":"/ let data = 129u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":341589,"byte_end":341610,"line_start":119,"line_end":119,"column_start":2,"column_end":23}},{"value":"/ let bits = BitSlice::<Msb0, _>::from_element(&data);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":341612,"byte_end":341668,"line_start":120,"line_end":120,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":341670,"byte_end":341673,"line_start":121,"line_end":121,"column_start":2,"column_end":5}},{"value":"/ // Then, we get the iterator:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":341675,"byte_end":341708,"line_start":122,"line_end":122,"column_start":2,"column_end":35}},{"value":"/ let mut iter = bits.iter();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":341710,"byte_end":341741,"line_start":123,"line_end":123,"column_start":2,"column_end":33}},{"value":"/ // So if we print what `as_bitslice` returns here, we have \"[1, 0, 0, 0, 0, 0, 0, 1]\":","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":341743,"byte_end":341833,"line_start":124,"line_end":124,"column_start":2,"column_end":92}},{"value":"/ println!(\"{:?}\", iter.as_bitslice());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":341835,"byte_end":341876,"line_start":125,"line_end":125,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":341878,"byte_end":341881,"line_start":126,"line_end":126,"column_start":2,"column_end":5}},{"value":"/ // Next, we move to the second element of the slice:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":341883,"byte_end":341939,"line_start":127,"line_end":127,"column_start":2,"column_end":58}},{"value":"/ iter.next();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":341941,"byte_end":341957,"line_start":128,"line_end":128,"column_start":2,"column_end":18}},{"value":"/ // Now `as_bitslice` returns \"[0, 0, 0, 0, 0, 0, 1]\":","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":341959,"byte_end":342016,"line_start":129,"line_end":129,"column_start":2,"column_end":59}},{"value":"/ println!(\"{:?}\", iter.as_bitslice());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":342018,"byte_end":342059,"line_start":130,"line_end":130,"column_start":2,"column_end":43}},{"value":"/ # }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":342061,"byte_end":342068,"line_start":131,"line_end":131,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":342070,"byte_end":342077,"line_start":132,"line_end":132,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":342079,"byte_end":342088,"line_start":133,"line_end":133,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1550},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":342725,"byte_end":342733,"line_start":158,"line_end":158,"column_start":9,"column_end":17},"name":"as_slice","qualname":"<Iter>::as_slice","value":"pub fn as_slice(&Self) -> &'a BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":342570,"byte_end":342579,"line_start":152,"line_end":152,"column_start":2,"column_end":11}},{"value":"deprecated(note =\n             \"Use `.as_bitslice` on iterators to view the remaining data\")","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":342597,"byte_end":342684,"line_start":154,"line_end":156,"column_start":2,"column_end":4}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":342686,"byte_end":342716,"line_start":157,"line_end":157,"column_start":2,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":2801},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":345516,"byte_end":345523,"line_start":283,"line_end":283,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::slice::iter::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":2805},{"krate":0,"index":2806},{"krate":0,"index":2807},{"krate":0,"index":2808},{"krate":0,"index":2809}],"decl_id":null,"docs":" Mutable bit slice iterator.","sig":null,"attributes":[{"value":"* Mutable bit slice iterator.\n\nThis struct is created by the [`iter_mut`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::IterMut`](https://doc.rust-lang.org/core/slice/struct.IterMut.html)\n\n# API Differences\n\nIn addition to returning `BitMut` instead of `&mut bool`, all references\nproduced from this iterator are marked as aliasing. This is necessary because\nthe references receive the lifetime of the original slice, not of the iterator\nobject, and the iterator is able to produce multiple live references in the same\nscope.\n\n# Examples\n\nBasic usage:\n\n```rust\nuse bitvec::prelude::*;\n// First, we declare a type which has `iter_mut` method to get the `IterMut`\n// struct (&BitSlice here):\nlet mut data = 0u8;\nlet bits = data.view_bits_mut::<Msb0>();\n\n// Then, we iterate over it and modify bits:\nfor (idx, mut bit) in bits.iter_mut().enumerate() {\n  *bit = idx % 3 == 0;\n}\nassert_eq!(data, 0b100_100_10);\n```\n\n[`BitSlice`]: struct.BitSlice.html\n[`iter_mut`]: struct.BitSlice.html#method.iter_mut\n**/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":344484,"byte_end":345487,"line_start":245,"line_end":281,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":1575},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":347627,"byte_end":347640,"line_start":352,"line_end":352,"column_start":9,"column_end":22},"name":"into_bitslice","qualname":"<IterMut>::into_bitslice","value":"pub fn into_bitslice(Self) -> &'a mut BitSlice<O, T::Alias>","parent":null,"children":[],"decl_id":null,"docs":" Views the underlying data as a subslice of the original data.","sig":null,"attributes":[{"value":"/ Views the underlying data as a subslice of the original data.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":346188,"byte_end":346253,"line_start":305,"line_end":305,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":346255,"byte_end":346258,"line_start":306,"line_end":306,"column_start":2,"column_end":5}},{"value":"/ To avoid creating `&mut` references that alias the same *bits*, this is","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":346260,"byte_end":346335,"line_start":307,"line_end":307,"column_start":2,"column_end":77}},{"value":"/ forced to consume the iterator.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":346337,"byte_end":346372,"line_start":308,"line_end":308,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":346374,"byte_end":346377,"line_start":309,"line_end":309,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":346379,"byte_end":346393,"line_start":310,"line_end":310,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":346395,"byte_end":346398,"line_start":311,"line_end":311,"column_start":2,"column_end":5}},{"value":"/ [`IterMut::into_bitslice`](https://doc.rust-lang.org/core/slice/struct.IterMut.html#method.into_bitslice)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":346400,"byte_end":346509,"line_start":312,"line_end":312,"column_start":2,"column_end":111}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":346511,"byte_end":346514,"line_start":313,"line_end":313,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":346516,"byte_end":346537,"line_start":314,"line_end":314,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":346539,"byte_end":346542,"line_start":315,"line_end":315,"column_start":2,"column_end":5}},{"value":"/ This is renamed, as its return type is not an element slice `&mut [T]`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":346544,"byte_end":346618,"line_start":316,"line_end":316,"column_start":2,"column_end":76}},{"value":"/ or `&mut [bool]` but a bit slice.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":346620,"byte_end":346657,"line_start":317,"line_end":317,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":346659,"byte_end":346662,"line_start":318,"line_end":318,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":346664,"byte_end":346678,"line_start":319,"line_end":319,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":346680,"byte_end":346683,"line_start":320,"line_end":320,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":346685,"byte_end":346701,"line_start":321,"line_end":321,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":346703,"byte_end":346706,"line_start":322,"line_end":322,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":346708,"byte_end":346719,"line_start":323,"line_end":323,"column_start":2,"column_end":13}},{"value":"/ # #[cfg(feature = \"std\")] {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":346721,"byte_end":346752,"line_start":324,"line_end":324,"column_start":2,"column_end":33}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":346754,"byte_end":346781,"line_start":325,"line_end":325,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":346783,"byte_end":346786,"line_start":326,"line_end":326,"column_start":2,"column_end":5}},{"value":"/ // First, we declare a type which has `iter_mut` method to get the `IterMut`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":346788,"byte_end":346868,"line_start":327,"line_end":327,"column_start":2,"column_end":82}},{"value":"/ // struct (&BitSlice here):","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":346870,"byte_end":346901,"line_start":328,"line_end":328,"column_start":2,"column_end":33}},{"value":"/ let mut data = 0u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":346903,"byte_end":346926,"line_start":329,"line_end":329,"column_start":2,"column_end":25}},{"value":"/ let bits = data.view_bits_mut::<Lsb0>();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":346928,"byte_end":346972,"line_start":330,"line_end":330,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":346974,"byte_end":346977,"line_start":331,"line_end":331,"column_start":2,"column_end":5}},{"value":"/ {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":346979,"byte_end":346984,"line_start":332,"line_end":332,"column_start":2,"column_end":7}},{"value":"/   // Then, we get the iterator:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":346986,"byte_end":347021,"line_start":333,"line_end":333,"column_start":2,"column_end":37}},{"value":"/   let mut iter = bits.iter_mut();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":347023,"byte_end":347060,"line_start":334,"line_end":334,"column_start":2,"column_end":39}},{"value":"/   // We move to the next element:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":347062,"byte_end":347099,"line_start":335,"line_end":335,"column_start":2,"column_end":39}},{"value":"/   iter.next();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":347101,"byte_end":347119,"line_start":336,"line_end":336,"column_start":2,"column_end":20}},{"value":"/   // So if we print what `into_bitslice` method returns here, we have","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":347121,"byte_end":347194,"line_start":337,"line_end":337,"column_start":2,"column_end":75}},{"value":"/   // \"[0, 0, 0, 0, 0, 0, 0]\":","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":347196,"byte_end":347229,"line_start":338,"line_end":338,"column_start":2,"column_end":35}},{"value":"/   println!(\"{:?}\", iter.into_bitslice());","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":347231,"byte_end":347276,"line_start":339,"line_end":339,"column_start":2,"column_end":47}},{"value":"/ }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":347278,"byte_end":347283,"line_start":340,"line_end":340,"column_start":2,"column_end":7}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":347285,"byte_end":347288,"line_start":341,"line_end":341,"column_start":2,"column_end":5}},{"value":"/ // Now let's modify a value of the slice:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":347290,"byte_end":347335,"line_start":342,"line_end":342,"column_start":2,"column_end":47}},{"value":"/ {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":347337,"byte_end":347342,"line_start":343,"line_end":343,"column_start":2,"column_end":7}},{"value":"/   // First we get back the iterator:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":347344,"byte_end":347384,"line_start":344,"line_end":344,"column_start":2,"column_end":42}},{"value":"/   let mut iter = bits.iter_mut();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":347386,"byte_end":347423,"line_start":345,"line_end":345,"column_start":2,"column_end":39}},{"value":"/   // We change the value of the first bit of the slice returned by the `next` method:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":347425,"byte_end":347514,"line_start":346,"line_end":346,"column_start":2,"column_end":91}},{"value":"/   *iter.next().unwrap() = true;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":347516,"byte_end":347551,"line_start":347,"line_end":347,"column_start":2,"column_end":37}},{"value":"/ }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":347553,"byte_end":347558,"line_start":348,"line_end":348,"column_start":2,"column_end":7}},{"value":"/ // Now data is \"1\":","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":347560,"byte_end":347583,"line_start":349,"line_end":349,"column_start":2,"column_end":25}},{"value":"/ assert_eq!(data, 1);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":347585,"byte_end":347609,"line_start":350,"line_end":350,"column_start":2,"column_end":26}},{"value":"/ # }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":347611,"byte_end":347618,"line_start":351,"line_end":351,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":1576},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":348362,"byte_end":348372,"line_start":377,"line_end":377,"column_start":9,"column_end":19},"name":"into_slice","qualname":"<IterMut>::into_slice","value":"pub fn into_slice(Self) -> &'a mut BitSlice<O, T::Alias>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":348178,"byte_end":348187,"line_start":372,"line_end":372,"column_start":2,"column_end":11}},{"value":"deprecated(note =\n             \"Use `.into_bitslice` on mutable iterators to view \\\n\t                     the remaining data\")","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":348205,"byte_end":348321,"line_start":374,"line_end":375,"column_start":2,"column_end":44}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":348323,"byte_end":348353,"line_start":376,"line_end":376,"column_start":2,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":2885},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":354873,"byte_end":354880,"line_start":673,"line_end":673,"column_start":12,"column_end":19},"name":"Windows","qualname":"::slice::iter::Windows","value":"Windows {  }","parent":null,"children":[{"krate":0,"index":2889},{"krate":0,"index":2890}],"decl_id":null,"docs":" An iterator over overlapping subslices of length `size`.","sig":null,"attributes":[{"value":"* An iterator over overlapping subslices of length `size`.\n\nThis struct is created by the [`windows`] method on [bit slices].\n\n# Original\n\n[`slice::Windows`](https://doc.rust-lang.org/core/slice/struct.Windows.html)\n\n[bit slices]: struct.BitSlice.html\n[`windows`]: struct.BitSlice.html#method.windows\n**/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":354531,"byte_end":354837,"line_start":661,"line_end":671,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":2924},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":357004,"byte_end":357010,"line_start":761,"line_end":761,"column_start":12,"column_end":18},"name":"Chunks","qualname":"::slice::iter::Chunks","value":"Chunks {  }","parent":null,"children":[{"krate":0,"index":2928},{"krate":0,"index":2929}],"decl_id":null,"docs":" An iterator over a bit slice in (non-overlapping) chunks (`chunk_size` bits\nat a time), starting at the beginning of the slice.","sig":null,"attributes":[{"value":"* An iterator over a bit slice in (non-overlapping) chunks (`chunk_size` bits\nat a time), starting at the beginning of the slice.\n\nWhen the slice length is not evenly divided by the chunk size, the last slice of\nthe iteration will be the remainder.\n\nThis struct is created by the [`chunks`] method on [bit slices].\n\n# Original\n\n[`slice::Chunks`](https://doc.rust-lang.org/core/slice/struct.Chunks.html)\n\n[bit slices]: struct.BitSlice.html\n[`chunks`]: struct.BitSlice.html#method.chunks\n**/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":356477,"byte_end":356968,"line_start":745,"line_end":759,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":2963},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":359702,"byte_end":359711,"line_start":868,"line_end":868,"column_start":12,"column_end":21},"name":"ChunksMut","qualname":"::slice::iter::ChunksMut","value":"ChunksMut {  }","parent":null,"children":[{"krate":0,"index":2967},{"krate":0,"index":2968}],"decl_id":null,"docs":" An iterator over a bit slice in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the beginning of the slice.","sig":null,"attributes":[{"value":"* An iterator over a bit slice in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the beginning of the slice.\n\nWhen the slice len is not evenly divided by the chunk size, the last slice of\nthe iteration will be the remainder.\n\nThis struct is created by the [`chunks_mut`] method on [bit slices].\n\n# Original\n\n[`slice::ChunksMut`](https://doc.rust-lang.org/core/slice/struct.ChunksMut.html)\n\n# API Differences\n\nAll slices yielded from this iterator are marked as aliased.\n\n[bit slices]: struct.BitSlice.html\n[`chunks_mut`]: struct.BitSlice.html#chunks_mut\n**/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":359085,"byte_end":359673,"line_start":848,"line_end":866,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":2997},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":362579,"byte_end":362590,"line_start":975,"line_end":975,"column_start":12,"column_end":23},"name":"ChunksExact","qualname":"::slice::iter::ChunksExact","value":"ChunksExact {  }","parent":null,"children":[{"krate":0,"index":3001},{"krate":0,"index":3002},{"krate":0,"index":3003}],"decl_id":null,"docs":" An iterator over a bit slice in (non-overlapping) chunks (`chunk_size` bits\nat a time), starting at the beginning of the slice.","sig":null,"attributes":[{"value":"* An iterator over a bit slice in (non-overlapping) chunks (`chunk_size` bits\nat a time), starting at the beginning of the slice.\n\nWhen the slice len is not evenly divided by the chunk size, the last up to\n`chunk_size - 1` bits will be ommitted but can be retrieved from the\n[`remainder`] function from the iterator.\n\nThis struct is created by the [`chunks_exact`] method on [bit slices].\n\n# Original\n\n[`slice::ChunksExact`](https://doc.rust-lang.org/core/slice/struct.ChunksExact.html)\n\n[bit slices]: struct.BitSlice.html\n[`chunks_exact`]: struct.BitSlice.html#method.chunks_exact\n[`remainder`]: #method.remainder\n**/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":361923,"byte_end":362543,"line_start":957,"line_end":973,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":1593},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":363537,"byte_end":363546,"line_start":1012,"line_end":1012,"column_start":9,"column_end":18},"name":"remainder","qualname":"<ChunksExact>::remainder","value":"pub fn remainder(&Self) -> &'a BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the remainder of the original bit slice that is not going to be\n returned by the iterator. The returned slice has at most `chunk_size-1`\n bits.","sig":null,"attributes":[{"value":"/ Returns the remainder of the original bit slice that is not going to be","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":363221,"byte_end":363296,"line_start":1005,"line_end":1005,"column_start":2,"column_end":77}},{"value":"/ returned by the iterator. The returned slice has at most `chunk_size-1`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":363298,"byte_end":363373,"line_start":1006,"line_end":1006,"column_start":2,"column_end":77}},{"value":"/ bits.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":363375,"byte_end":363384,"line_start":1007,"line_end":1007,"column_start":2,"column_end":11}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":363386,"byte_end":363389,"line_start":1008,"line_end":1008,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":363391,"byte_end":363405,"line_start":1009,"line_end":1009,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":363407,"byte_end":363410,"line_start":1010,"line_end":1010,"column_start":2,"column_end":5}},{"value":"/ [`slice::ChunksExact::remainder`](https://doc.rust-lang.org/core/slice/struct.ChunksExact.html#method.remainder)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":363412,"byte_end":363528,"line_start":1011,"line_end":1011,"column_start":2,"column_end":118}}]},{"kind":"Struct","id":{"krate":0,"index":3037},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":365637,"byte_end":365651,"line_start":1096,"line_end":1096,"column_start":12,"column_end":26},"name":"ChunksExactMut","qualname":"::slice::iter::ChunksExactMut","value":"ChunksExactMut {  }","parent":null,"children":[{"krate":0,"index":3041},{"krate":0,"index":3042},{"krate":0,"index":3043}],"decl_id":null,"docs":" An iterator over a bit slice in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the beginning of the slice.","sig":null,"attributes":[{"value":"* An iterator over a bit slice in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the beginning of the slice.\n\nWhen the slice len is not evenly divided by the chunk size, the last up to\n`chunk_size-1` bits will be omitted but can be retrieved from the\n[`into_remainder`] function from the iterator.\n\nThis struct is created by the [`chunks_exact_mut`] method on [bit slices].\n\n# Original\n\n[`slice::ChunksExactMut`](https://doc.rust-lang.org/core/slice/struct.ChunksExactMut.html)\n\n# API Differences\n\nAll slices yielded from this iterator are marked as aliased.\n\n[bit slices]: struct.BitSlice.html\n[`chunks_exact_mut`]: struct.BitSlice.html#method.chunks_exact_mut\n[`into_remainder`]: #method.into_remainder\n**/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":364869,"byte_end":365608,"line_start":1074,"line_end":1094,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":1599},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":366787,"byte_end":366801,"line_start":1139,"line_end":1139,"column_start":9,"column_end":23},"name":"into_remainder","qualname":"<ChunksExactMut>::into_remainder","value":"pub fn into_remainder(Self) -> &'a mut BitSlice<O, T::Alias>","parent":null,"children":[],"decl_id":null,"docs":" Returns the remainder of the original slice that is not going to be\n returned by the iterator. The returned slice has at most `chunk_size-1`\n bits.","sig":null,"attributes":[{"value":"/ Returns the remainder of the original slice that is not going to be","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":366315,"byte_end":366386,"line_start":1126,"line_end":1126,"column_start":2,"column_end":73}},{"value":"/ returned by the iterator. The returned slice has at most `chunk_size-1`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":366388,"byte_end":366463,"line_start":1127,"line_end":1127,"column_start":2,"column_end":77}},{"value":"/ bits.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":366465,"byte_end":366474,"line_start":1128,"line_end":1128,"column_start":2,"column_end":11}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":366476,"byte_end":366479,"line_start":1129,"line_end":1129,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":366481,"byte_end":366495,"line_start":1130,"line_end":1130,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":366497,"byte_end":366500,"line_start":1131,"line_end":1131,"column_start":2,"column_end":5}},{"value":"/ [`slice::ChunksExactMut::into_remainder`](https://doc.rust-lang.org/core/slice/struct.ChunksExactMut.html#method.into_remainder)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":366502,"byte_end":366634,"line_start":1132,"line_end":1132,"column_start":2,"column_end":134}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":366636,"byte_end":366639,"line_start":1133,"line_end":1133,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":366641,"byte_end":366662,"line_start":1134,"line_end":1134,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":366664,"byte_end":366667,"line_start":1135,"line_end":1135,"column_start":2,"column_end":5}},{"value":"/ The remainder slice, as with all slices yielded from this iterator, is","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":366669,"byte_end":366743,"line_start":1136,"line_end":1136,"column_start":2,"column_end":76}},{"value":"/ marked as aliased.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":366745,"byte_end":366767,"line_start":1137,"line_end":1137,"column_start":2,"column_end":24}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":366769,"byte_end":366778,"line_start":1138,"line_end":1138,"column_start":2,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":3072},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":368785,"byte_end":368792,"line_start":1218,"line_end":1218,"column_start":12,"column_end":19},"name":"RChunks","qualname":"::slice::iter::RChunks","value":"RChunks {  }","parent":null,"children":[{"krate":0,"index":3076},{"krate":0,"index":3077}],"decl_id":null,"docs":" An iterator over a bit slice in (non-overlapping) chunks (`chunk_size` bits\nat a time), starting at the end of the slice.","sig":null,"attributes":[{"value":"* An iterator over a bit slice in (non-overlapping) chunks (`chunk_size` bits\nat a time), starting at the end of the slice.\n\nWhen the slice length is not evenly divided by the chunk size, the last slice of\nthe iteration will be the remainder.\n\nThis struct is created by the [`rchunks`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::RChunks`](https://doc.rust-lang.org/core/slice/struct.RChunks.html)\n\n[`BitSlice`]: struct.BitSlice.html\n[`rchunks`]: struct.BitSlice.html#method.rchunks\n**/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":368258,"byte_end":368749,"line_start":1202,"line_end":1216,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":3111},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":372077,"byte_end":372087,"line_start":1333,"line_end":1333,"column_start":12,"column_end":22},"name":"RChunksMut","qualname":"::slice::iter::RChunksMut","value":"RChunksMut {  }","parent":null,"children":[{"krate":0,"index":3115},{"krate":0,"index":3116}],"decl_id":null,"docs":" An iterator over a slice in (non-overlapping) mutable chunks (`chunk_size`\nbits at a time), starting at the end of the slice.","sig":null,"attributes":[{"value":"* An iterator over a slice in (non-overlapping) mutable chunks (`chunk_size`\nbits at a time), starting at the end of the slice.\n\nWhen the slice length is not evenly divided by the chunk size, the last slice of\nthe iteration will be the remainder.\n\nThis struct is created by the [`rchunks_mut`] method on [bit slices].\n\n# API Differences\n\nAll slices yielded from this iterator are marked as aliased.\n\n[bit slices]: struct.BitSlice.html\n[`rchunks_mut`]: struct.BitSlice.html#method.rchunks_mut\n**/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":371551,"byte_end":372048,"line_start":1317,"line_end":1331,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":3145},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":374742,"byte_end":374754,"line_start":1433,"line_end":1433,"column_start":12,"column_end":24},"name":"RChunksExact","qualname":"::slice::iter::RChunksExact","value":"RChunksExact {  }","parent":null,"children":[{"krate":0,"index":3149},{"krate":0,"index":3150},{"krate":0,"index":3151}],"decl_id":null,"docs":" An iterator over a bit slice in (non-overlapping) chunks (`chunk_size` bits\nat a time), starting at the end of the slice.","sig":null,"attributes":[{"value":"* An iterator over a bit slice in (non-overlapping) chunks (`chunk_size` bits\nat a time), starting at the end of the slice.\n\nWhen the slice len is not evenly divided by the chunk size, the last up to\n`chunk_size-1` bits will be omitted but can be retrieved from the [`remainder`]\nfunction from the iterator.\n\nThis struct is created by the [`rchunks_exact`] method on [bit slices].\n\n# Original\n\n[`slice::RChunksExact`](https://doc.rust-lang.org/core/slice/struct.RChunksExact.html)\n\n[bit slices]: struct.BitSlice.html\n[`rchunks_exact`]: struct.BitSlice.html#method.rchunks_exact\n[`remainder`]: #method.remainder\n**/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":374090,"byte_end":374706,"line_start":1415,"line_end":1431,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":1605},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":375674,"byte_end":375683,"line_start":1470,"line_end":1470,"column_start":9,"column_end":18},"name":"remainder","qualname":"<RChunksExact>::remainder","value":"pub fn remainder(&Self) -> &'a BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the remainder of the original slice that is not going to be\n returned by the iterator. The returned slice has at most `chunk_size-1`\n bits.","sig":null,"attributes":[{"value":"/ Returns the remainder of the original slice that is not going to be","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":375349,"byte_end":375420,"line_start":1462,"line_end":1462,"column_start":2,"column_end":73}},{"value":"/ returned by the iterator. The returned slice has at most `chunk_size-1`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":375422,"byte_end":375497,"line_start":1463,"line_end":1463,"column_start":2,"column_end":77}},{"value":"/ bits.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":375499,"byte_end":375508,"line_start":1464,"line_end":1464,"column_start":2,"column_end":11}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":375510,"byte_end":375513,"line_start":1465,"line_end":1465,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":375515,"byte_end":375529,"line_start":1466,"line_end":1466,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":375531,"byte_end":375534,"line_start":1467,"line_end":1467,"column_start":2,"column_end":5}},{"value":"/ [`slice::RChunksExact::remainder`](https://doc.rust-lang.org/core/slice/struct.RChunksExact.html#method.remainder)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":375536,"byte_end":375654,"line_start":1468,"line_end":1468,"column_start":2,"column_end":120}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":375656,"byte_end":375665,"line_start":1469,"line_end":1469,"column_start":2,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":3185},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":377897,"byte_end":377912,"line_start":1555,"line_end":1555,"column_start":12,"column_end":27},"name":"RChunksExactMut","qualname":"::slice::iter::RChunksExactMut","value":"RChunksExactMut {  }","parent":null,"children":[{"krate":0,"index":3189},{"krate":0,"index":3190},{"krate":0,"index":3191}],"decl_id":null,"docs":" An iterator over a bit slice in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the end of the slice.","sig":null,"attributes":[{"value":"* An iterator over a bit slice in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the end of the slice.\n\nWhen the slice len is not evenly divided by the chunk size, the last up to\n`chunk_size-1` bits will be omitted but can be retrieved from the\n[`into_remainder`] function from the iterator.\n\nThis struct is created by the [`rchunks_exact_mut`] method on [bit slices].\n\n# Original\n\n[`slice::RChunksExactMut`](https://doc.rust-lang.org/core/slice/struct.RChunksExactMut.html)\n\n# API Differences\n\nAll slices yielded from this iterator are marked as aliased.\n\n[bit slices]: struct.BitSlice.html\n[`into_remainder`]: #method.into_remainder\n[`rchunks_exact_mut`]: struct.BitSlice.html#method.rchunks_exact_mut\n**/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":377130,"byte_end":377868,"line_start":1533,"line_end":1553,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":1611},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":379014,"byte_end":379028,"line_start":1597,"line_end":1597,"column_start":9,"column_end":23},"name":"into_remainder","qualname":"<RChunksExactMut>::into_remainder","value":"pub fn into_remainder(Self) -> &'a mut BitSlice<O, T::Alias>","parent":null,"children":[],"decl_id":null,"docs":" Returns the remainder of the original slice that is not going to be\n returned by the iterator. The returned slice has at most `chunk_size-1`\n bits.","sig":null,"attributes":[{"value":"/ Returns the remainder of the original slice that is not going to be","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":378540,"byte_end":378611,"line_start":1584,"line_end":1584,"column_start":2,"column_end":73}},{"value":"/ returned by the iterator. The returned slice has at most `chunk_size-1`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":378613,"byte_end":378688,"line_start":1585,"line_end":1585,"column_start":2,"column_end":77}},{"value":"/ bits.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":378690,"byte_end":378699,"line_start":1586,"line_end":1586,"column_start":2,"column_end":11}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":378701,"byte_end":378704,"line_start":1587,"line_end":1587,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":378706,"byte_end":378720,"line_start":1588,"line_end":1588,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":378722,"byte_end":378725,"line_start":1589,"line_end":1589,"column_start":2,"column_end":5}},{"value":"/ [`slice::RChunksExactMut::into_remainder`](https://doc.rust-lang.org/core/slice/struct.RChunksExactMut.html#method.into_remainder)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":378727,"byte_end":378861,"line_start":1590,"line_end":1590,"column_start":2,"column_end":136}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":378863,"byte_end":378866,"line_start":1591,"line_end":1591,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":378868,"byte_end":378889,"line_start":1592,"line_end":1592,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":378891,"byte_end":378894,"line_start":1593,"line_end":1593,"column_start":2,"column_end":5}},{"value":"/ The remainder slice, as with all slices yielded from this iterator, is","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":378896,"byte_end":378970,"line_start":1594,"line_end":1594,"column_start":2,"column_end":76}},{"value":"/ marked as aliased.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":378972,"byte_end":378994,"line_start":1595,"line_end":1595,"column_start":2,"column_end":24}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":378996,"byte_end":379005,"line_start":1596,"line_end":1596,"column_start":2,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":3245},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":383320,"byte_end":383325,"line_start":1802,"line_end":1802,"column_start":12,"column_end":17},"name":"Split","qualname":"::slice::iter::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":3250},{"krate":0,"index":3251},{"krate":0,"index":3252}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction.","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction.\n\nThis struct is created by the [`split`] method on [bit slices].\n\n# Original\n\n[`slice::Split`](https://doc.rust-lang.org/core/slice/struct.Split.html)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[bit slices]: struct.BitSlice.html\n[`split`]: struct.BitSlice.html#method.split\n**/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":382811,"byte_end":383291,"line_start":1784,"line_end":1800,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1614},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":384899,"byte_end":384907,"line_start":1871,"line_end":1871,"column_start":12,"column_end":20},"name":"SplitMut","qualname":"::slice::iter::SplitMut","value":"SplitMut {  }","parent":null,"children":[{"krate":0,"index":1619},{"krate":0,"index":1620},{"krate":0,"index":1621}],"decl_id":null,"docs":" An iterator over the mutable subslices of the slice which are separated by\nbits that match `pred`.","sig":null,"attributes":[{"value":"* An iterator over the mutable subslices of the slice which are separated by\nbits that match `pred`.\n\nThis struct is created by the [`split_mut`] method on [bit slices].\n\n# Original\n\n[`slice::SplitMut`](https://doc.rust-lang.org/core/slice/struct.SplitMut.html)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[bit slices]: struct.BitSlice.html\n[`split_mut`]: struct.BitSlice.html#method.split_mut\n**/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":384368,"byte_end":384887,"line_start":1854,"line_end":1870,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":3335},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":386620,"byte_end":386626,"line_start":1948,"line_end":1948,"column_start":12,"column_end":18},"name":"RSplit","qualname":"::slice::iter::RSplit","value":"RSplit {  }","parent":null,"children":[{"krate":0,"index":3340},{"krate":0,"index":3341},{"krate":0,"index":3342}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction, starting from the end of the slice.","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction, starting from the end of the slice.\n\nThis struct is created by the [`rsplit`] method on [bit slices].\n\n# Original\n\n[`slice::RSplit`](https://doc.rust-lang.org/core/slice/struct.RSplit.html)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[bit slices]: struct.BitSlice.html\n[`rsplit`]: struct.BitSlice.html#method.rsplit\n**/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":386070,"byte_end":386591,"line_start":1930,"line_end":1946,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1622},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":388063,"byte_end":388072,"line_start":2005,"line_end":2005,"column_start":12,"column_end":21},"name":"RSplitMut","qualname":"::slice::iter::RSplitMut","value":"RSplitMut {  }","parent":null,"children":[{"krate":0,"index":1627},{"krate":0,"index":1628},{"krate":0,"index":1629}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction, starting from the end of the slice.","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction, starting from the end of the slice.\n\nThis struct is created by the [`rsplit_mut`] method on [bit slices].\n\n# Original\n\n[`slice::RSplit`](https://doc.rust-lang.org/core/slice/struct.RSplit.html)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[bit slices]: struct.BitSlice.html\n[`rsplit_mut`]: struct.BitSlice.html#method.rsplit_mut\n**/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":387518,"byte_end":388051,"line_start":1988,"line_end":2004,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1632},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":389725,"byte_end":389731,"line_start":2068,"line_end":2068,"column_start":12,"column_end":18},"name":"SplitN","qualname":"::slice::iter::SplitN","value":"SplitN {  }","parent":null,"children":[{"krate":0,"index":1637},{"krate":0,"index":1638}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits.","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits.\n\nThis struct is created by the [`splitn`] method on [bit slices].\n\n# Original\n\n[`slice::SplitN`](https://doc.rust-lang.org/core/slice/struct.SplitN.html)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[bit slices]: struct.BitSlice.html\n[`splitn`]: struct.BitSlice.html#method.splitn\n**/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":389191,"byte_end":389713,"line_start":2051,"line_end":2067,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1639},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":390487,"byte_end":390496,"line_start":2097,"line_end":2097,"column_start":12,"column_end":21},"name":"SplitNMut","qualname":"::slice::iter::SplitNMut","value":"SplitNMut {  }","parent":null,"children":[{"krate":0,"index":1644},{"krate":0,"index":1645}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits.","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits.\n\nThis struct is created by the [`splitn_mut`] method on [bit slices].\n\n# Original\n\n[`slice::SplitNMut`](https://doc.rust-lang.org/core/slice/struct.SplitNMut.html)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[bit slices]: struct.BitSlice.html\n[`splitn_mut`]: struct.BitSlice.html#method.splitn_mut\n**/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":389935,"byte_end":390475,"line_start":2080,"line_end":2096,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1646},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":391278,"byte_end":391285,"line_start":2127,"line_end":2127,"column_start":12,"column_end":19},"name":"RSplitN","qualname":"::slice::iter::RSplitN","value":"RSplitN {  }","parent":null,"children":[{"krate":0,"index":1651},{"krate":0,"index":1652}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits, starting from the end of the\nslice.","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits, starting from the end of the\nslice.\n\nThis struct is created by the [`rsplitn`] method on [bit slices].\n\n# Original\n\n[`slice::RSplitN`](https://doc.rust-lang.org/core/slice/struct.RSplitN.html)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[bit slices]: struct.BitSlice.html\n[`rsplitn`]: struct.BitSlice.html#method.rsplitn\n**/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":390703,"byte_end":391266,"line_start":2109,"line_end":2126,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1653},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":392083,"byte_end":392093,"line_start":2157,"line_end":2157,"column_start":12,"column_end":22},"name":"RSplitNMut","qualname":"::slice::iter::RSplitNMut","value":"RSplitNMut {  }","parent":null,"children":[{"krate":0,"index":1658},{"krate":0,"index":1659}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits, starting from the end of the\nslice.","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits, starting from the end of the\nslice.\n\nThis struct is created by the [`rsplitn_mut`] method on [bit slices].\n\n# Original\n\n[`slice::RSplitNMut`](https://doc.rust-lang.org/core/slice/struct.RSplitNMut.html)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[bit slices]: struct.BitSlice.html\n[`rsplitn_mut`]: struct.BitSlice.html#method.rsplitn_mut\n**/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":391490,"byte_end":392071,"line_start":2139,"line_end":2156,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1802},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/proxy.rs","byte_start":407015,"byte_end":407021,"line_start":86,"line_end":86,"column_start":12,"column_end":18},"name":"BitMut","qualname":"::slice::proxy::BitMut","value":"BitMut {  }","parent":null,"children":[{"krate":0,"index":1806},{"krate":0,"index":1807},{"krate":0,"index":1808},{"krate":0,"index":1809}],"decl_id":null,"docs":" Proxy reference type, equivalent to `&mut bool`.","sig":null,"attributes":[{"value":"* Proxy reference type, equivalent to `&mut bool`.\n\nThis is a two-word structure capable of correctly referring to a single bit in\na memory element. Because Rust does not permit reference-like objects in the\nsame manner that C++ does – `&T` and `&mut T` values are required to be\nimmediately-valid pointers, not objects – `bitvec` cannot manifest encoded\n`&mut Bit` values in the same way that it can manifest `&mut BitSlice`.\n\nInstead, this type implements `Deref` and `DerefMut` to an internal `bool` slot,\nand in `Drop` commits the value of that `bool` to the proxied bit in the source\n`BitSlice` from which the `BitMut` value was created. The combination of Rust’s\nown exclusion rules and the aliasing type system in this library ensure that a\n`BitMut` value has unique access to the bit it proxies, and the memory element\nit uses will not have destructive data races from other views.\n\n# Lifetimes\n\n- `'a`: The lifetime of the source `&'a mut BitSlice` that created the `BitMut`.\n\n# Type Parameters\n\n- `O`: The `BitOrder` type parameter from the source `&mut BitSlice`.\n- `T`: The `BitStore` type parameter from the source `&mut BitSlice`.\n\n# Examples\n\n```rust\nuse bitvec::prelude::*;\n\nlet bits = bits![mut 0; 2];\n\nlet (left, right) = bits.split_at_mut(1);\nlet mut first = left.get_mut(0).unwrap();\nlet second = right.get_mut(0).unwrap();\n\n// Referential behavior\n*first = true;\n// Direct write\nsecond.set(true);\n\ndrop(first); // it’s not a reference!\nassert_eq!(bits, bits![1; 2]);\n```\n**/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/proxy.rs","byte_start":405498,"byte_end":407003,"line_start":42,"line_end":85,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":1814},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/proxy.rs","byte_start":408725,"byte_end":408728,"line_start":144,"line_end":144,"column_start":9,"column_end":12},"name":"set","qualname":"<BitMut>::set","value":"pub fn set(Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Writes a bit into the proxied location without an intermediate copy.","sig":null,"attributes":[{"value":"/ Writes a bit into the proxied location without an intermediate copy.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/proxy.rs","byte_start":408123,"byte_end":408195,"line_start":131,"line_end":131,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/proxy.rs","byte_start":408197,"byte_end":408200,"line_start":132,"line_end":132,"column_start":2,"column_end":5}},{"value":"/ This function writes `value` directly into the proxied location, and","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/proxy.rs","byte_start":408202,"byte_end":408274,"line_start":133,"line_end":133,"column_start":2,"column_end":74}},{"value":"/ does not store `value` in the proxy’s internal cache. This should be","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/proxy.rs","byte_start":408276,"byte_end":408350,"line_start":134,"line_end":134,"column_start":2,"column_end":74}},{"value":"/ equivalent to the behavior seen when using ordinary `DerefMut` proxying,","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/proxy.rs","byte_start":408352,"byte_end":408428,"line_start":135,"line_end":135,"column_start":2,"column_end":78}},{"value":"/ but the latter depends on compiler optimization.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/proxy.rs","byte_start":408430,"byte_end":408482,"line_start":136,"line_end":136,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/proxy.rs","byte_start":408484,"byte_end":408487,"line_start":137,"line_end":137,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/proxy.rs","byte_start":408489,"byte_end":408505,"line_start":138,"line_end":138,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/proxy.rs","byte_start":408507,"byte_end":408510,"line_start":139,"line_end":139,"column_start":2,"column_end":5}},{"value":"/ - `self`: This destroys the proxy, as it becomes invalid when writing","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/proxy.rs","byte_start":408512,"byte_end":408585,"line_start":140,"line_end":140,"column_start":2,"column_end":75}},{"value":"/   directly to the location without updating the cache.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/proxy.rs","byte_start":408587,"byte_end":408645,"line_start":141,"line_end":141,"column_start":2,"column_end":60}},{"value":"/ - `value`: The new bit to write into the proxied slot.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/proxy.rs","byte_start":408647,"byte_end":408705,"line_start":142,"line_end":142,"column_start":2,"column_end":60}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/proxy.rs","byte_start":408707,"byte_end":408716,"line_start":143,"line_end":143,"column_start":2,"column_end":11}}]},{"kind":"Mod","id":{"krate":0,"index":2103},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/store.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"store","qualname":"::store","value":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/store.rs","parent":null,"children":[{"krate":0,"index":2104},{"krate":0,"index":2105},{"krate":0,"index":2108},{"krate":0,"index":2109},{"krate":0,"index":2112},{"krate":0,"index":2115},{"krate":0,"index":2116},{"krate":0,"index":2119},{"krate":0,"index":2120},{"krate":0,"index":2122},{"krate":0,"index":2123},{"krate":0,"index":2126},{"krate":0,"index":2129},{"krate":0,"index":3623},{"krate":0,"index":3634},{"krate":0,"index":3635},{"krate":0,"index":3646},{"krate":0,"index":3647},{"krate":0,"index":3658},{"krate":0,"index":3659},{"krate":0,"index":3670},{"krate":0,"index":3671},{"krate":0,"index":3682},{"krate":0,"index":2139},{"krate":0,"index":2149},{"krate":0,"index":2151}],"decl_id":null,"docs":" Memory modeling.","sig":null,"attributes":[{"value":"* Memory modeling.\n\nThis module provides a `BitStore` trait, which mediates how handles access\nmemory and perform analysis on the regions they describe.\n!*/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/store.rs","byte_start":427364,"byte_end":427522,"line_start":1,"line_end":5,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":2129},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/store.rs","byte_start":430649,"byte_end":430657,"line_start":85,"line_end":85,"column_start":11,"column_end":19},"name":"BitStore","qualname":"::store::BitStore","value":"BitStore: seal::Sealed + Sized + Debug","parent":null,"children":[{"krate":0,"index":2130},{"krate":0,"index":2131},{"krate":0,"index":2132},{"krate":0,"index":2133},{"krate":0,"index":2134},{"krate":0,"index":2136}],"decl_id":null,"docs":" Common interface for memory regions.","sig":null,"attributes":[{"value":"* Common interface for memory regions.\n\nThis trait is implemented on the fundamental integers no wider than the target\nprocessor word size, their `Cell` wrappers, and (if present) their `Atomic`\nvariants. Users provide this type as a parameter to their data structures in\norder to inform the structure of how it may access the memory it describes.\n\nCurrently, `bitvec` is only tested on 32- and 64- bit architectures. This means\nthat `u8`, `u16`, `u32`, and `usize` unconditionally implement `BitStore`, but\n`u64` will only do so on 64-bit targets, and will be unavailable on 32-bit\ntargets. This is a necessary restriction of `bitvec` internals. Please comment\non [Issue #76](https://github.com/myrrlyn/bitvec/issues/76) if this affects you.\n\nSpecifically, this has the davantage that a `BitSlice<_, Cell<_>>` knows that it\nhas a view of memory that will not undergo concurrent modification. As such, it\ncan forego atomic accesses, and just use ordinary load/store instructions\nwithout fear of causing observable race conditions.\n\nThe associated types `Mem` and `Alias` allow implementors to know the register\nwidth of the memory they describe (`Mem`) and to know the aliasing status of the\nregion.\n\n# Generic Programming\n\nGeneric programming with associated types is *hard*, especially when using them,\nas in this trait, to implement a closed graph of relationships between types.\n\nFor example, this trait is implemented such that for any given type `T`,\n`T::Alias::Mem` == `T::Mem` == `T::NoAlias::Mem`, `T::Alias::Alias == T::Alias`,\nand `T::NoAlias::NoAlias == T::NoAlias`. Unfortunately, the Rust type system\ndoes not allow these relationships to be described, so generic programming that\nperforms type transitions will *rapidly* become uncomfortable to use.\n\nInternally, `bitvec` makes use of type-manipulation functions that are known to\nbe correct with respect to the implementations of `BitStore` in order to ease\nimplementation of library methods.\n\nYou are not expected to do significant programming that is generic over the\n`BitStore` memory parameter. When using a concrete type, the compiler will\ngladly reduce the abstract type associations into their instantiated selections,\nallowing monomorphized code to be *much* more convenient than generic.\n\nIf you have a use case that involves generic programming over this trait, and\nyou are encountering difficulties dealing with the type associations, please\nfile an issue asking for support in this area.\n\n# Supertraits\n\nThis trait has trait requirements that better express its behavior:\n\n- `Sealed` prevents it from being implemented by downstream libraries (`Sealed`\n  is a public trait in a private module, that only this crate can name).\n- `Sized` instructs the compiler that values of this type can be used as\n  immediates.\n- `Debug` informs the compiler that other structures using this trait bound can\n  correctly derive `Debug`.\n  **/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/store.rs","byte_start":427732,"byte_end":430638,"line_start":28,"line_end":84,"column_start":1,"column_end":6}}]},{"kind":"Type","id":{"krate":0,"index":2130},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/store.rs","byte_start":430751,"byte_end":430754,"line_start":87,"line_end":87,"column_start":7,"column_end":10},"name":"Mem","qualname":"::store::BitStore::Mem","value":"type Mem: BitMemory + BitOps + BitStore + Into<Self>;","parent":{"krate":0,"index":2129},"children":[],"decl_id":null,"docs":" The register type that the implementor describes.\n","sig":null,"attributes":[{"value":"/ The register type that the implementor describes.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/store.rs","byte_start":430691,"byte_end":430744,"line_start":86,"line_end":86,"column_start":2,"column_end":55}}]},{"kind":"Type","id":{"krate":0,"index":2131},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/store.rs","byte_start":430878,"byte_end":430884,"line_start":90,"line_end":90,"column_start":7,"column_end":13},"name":"Access","qualname":"::store::BitStore::Access","value":"type Access: BitAccess<Self::Mem>;","parent":{"krate":0,"index":2129},"children":[],"decl_id":null,"docs":" The modifier type over `Self::Mem` used to perform memory access.\n","sig":null,"attributes":[{"value":"/ The modifier type over `Self::Mem` used to perform memory access.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/store.rs","byte_start":430802,"byte_end":430871,"line_start":89,"line_end":89,"column_start":2,"column_end":71}}]},{"kind":"Type","id":{"krate":0,"index":2132},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/store.rs","byte_start":431521,"byte_end":431526,"line_start":103,"line_end":103,"column_start":7,"column_end":12},"name":"Alias","qualname":"::store::BitStore::Alias","value":"type Alias: BitStore\n\t\t+ Radium<Self::Mem>\n\t\t+ Radium<<Self::Alias as BitStore>::Mem>;","parent":{"krate":0,"index":2129},"children":[],"decl_id":null,"docs":" A sibling `BitStore` implementor that performs alias-aware memory\n access.","sig":null,"attributes":[{"value":"/ A sibling `BitStore` implementor that performs alias-aware memory","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/store.rs","byte_start":430910,"byte_end":430979,"line_start":92,"line_end":92,"column_start":2,"column_end":71}},{"value":"/ access.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/store.rs","byte_start":430981,"byte_end":430992,"line_start":93,"line_end":93,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/store.rs","byte_start":430994,"byte_end":430997,"line_start":94,"line_end":94,"column_start":2,"column_end":5}},{"value":"/ While the associated type always has the same `Mem` concrete type as","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/store.rs","byte_start":430999,"byte_end":431071,"line_start":95,"line_end":95,"column_start":2,"column_end":74}},{"value":"/ `Self`, attempting to encode this requirement as `<Mem = Self::Mem>","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/store.rs","byte_start":431073,"byte_end":431144,"line_start":96,"line_end":96,"column_start":2,"column_end":73}},{"value":"/ causes Rust to enter an infinite recursion in the trait solver.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/store.rs","byte_start":431146,"byte_end":431213,"line_start":97,"line_end":97,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/store.rs","byte_start":431215,"byte_end":431218,"line_start":98,"line_end":98,"column_start":2,"column_end":5}},{"value":"/ Instead, the two `Radium` bounds inform the compiler that the `Alias` is","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/store.rs","byte_start":431220,"byte_end":431296,"line_start":99,"line_end":99,"column_start":2,"column_end":78}},{"value":"/ irradiant over both the current memory and the destination memory types,","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/store.rs","byte_start":431298,"byte_end":431374,"line_start":100,"line_end":100,"column_start":2,"column_end":78}},{"value":"/ allowing generic type algebra to resolve correctly even though the fact","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/store.rs","byte_start":431376,"byte_end":431451,"line_start":101,"line_end":101,"column_start":2,"column_end":77}},{"value":"/ that `Radium` is only implemented once is not guaranteed.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/store.rs","byte_start":431453,"byte_end":431514,"line_start":102,"line_end":102,"column_start":2,"column_end":63}}]},{"kind":"Type","id":{"krate":0,"index":2133},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/store.rs","byte_start":431876,"byte_end":431886,"line_start":113,"line_end":113,"column_start":7,"column_end":17},"name":"Threadsafe","qualname":"::store::BitStore::Threadsafe","value":"type Threadsafe;","parent":{"krate":0,"index":2129},"children":[],"decl_id":null,"docs":" Marker for the thread safety of the implementor.","sig":null,"attributes":[{"value":"/ Marker for the thread safety of the implementor.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/store.rs","byte_start":431605,"byte_end":431657,"line_start":107,"line_end":107,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/store.rs","byte_start":431659,"byte_end":431662,"line_start":108,"line_end":108,"column_start":2,"column_end":5}},{"value":"/ This is necessary because `Cell<T: Send>` is `Send`, but `Cell` does not","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/store.rs","byte_start":431664,"byte_end":431740,"line_start":109,"line_end":109,"column_start":2,"column_end":78}},{"value":"/ use synchronization instructions and thus cannot be used for aliased","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/store.rs","byte_start":431742,"byte_end":431814,"line_start":110,"line_end":110,"column_start":2,"column_end":74}},{"value":"/ parallelized memory manipulation.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/store.rs","byte_start":431816,"byte_end":431853,"line_start":111,"line_end":111,"column_start":2,"column_end":39}}]},{"kind":"Const","id":{"krate":0,"index":2134},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/store.rs","byte_start":431975,"byte_end":431992,"line_start":117,"line_end":117,"column_start":8,"column_end":25},"name":"__ALIGNED_TO_SIZE","qualname":"::store::BitStore::__ALIGNED_TO_SIZE","value":"[(); ]","parent":{"krate":0,"index":2129},"children":[],"decl_id":null,"docs":" Require that all implementors are aligned to their width.\n","sig":null,"attributes":[{"value":"/ Require that all implementors are aligned to their width.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/store.rs","byte_start":431890,"byte_end":431951,"line_start":115,"line_end":115,"column_start":2,"column_end":63}}]},{"kind":"Const","id":{"krate":0,"index":2136},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/store.rs","byte_start":432124,"byte_end":432137,"line_start":122,"line_end":122,"column_start":8,"column_end":21},"name":"__ALIAS_WIDTH","qualname":"::store::BitStore::__ALIAS_WIDTH","value":"[(); ]","parent":{"krate":0,"index":2129},"children":[],"decl_id":null,"docs":" Require that the `::Alias` associated type has the same width and\n alignment as `Self`.\n","sig":null,"attributes":[{"value":"/ Require that the `::Alias` associated type has the same width and","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/store.rs","byte_start":432005,"byte_end":432074,"line_start":119,"line_end":119,"column_start":2,"column_end":71}},{"value":"/ alignment as `Self`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/store.rs","byte_start":432076,"byte_end":432100,"line_start":120,"line_end":120,"column_start":2,"column_end":26}}]},{"kind":"Trait","id":{"krate":0,"index":2152},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/store.rs","byte_start":434888,"byte_end":434894,"line_start":229,"line_end":229,"column_start":12,"column_end":18},"name":"Sealed","qualname":"::store::seal::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":" Marker trait to seal `BitStore` against downstream implementation.","sig":null,"attributes":[{"value":"/ Marker trait to seal `BitStore` against downstream implementation.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/store.rs","byte_start":434520,"byte_end":434590,"line_start":222,"line_end":222,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/store.rs","byte_start":434592,"byte_end":434595,"line_start":223,"line_end":223,"column_start":2,"column_end":5}},{"value":"/ This trait is public in the module, so that other modules in the crate","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/store.rs","byte_start":434597,"byte_end":434671,"line_start":224,"line_end":224,"column_start":2,"column_end":76}},{"value":"/ can use it, but so long as it is not exported by the crate root and this","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/store.rs","byte_start":434673,"byte_end":434749,"line_start":225,"line_end":225,"column_start":2,"column_end":78}},{"value":"/ module is private, this trait effectively forbids downstream","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/store.rs","byte_start":434751,"byte_end":434815,"line_start":226,"line_end":226,"column_start":2,"column_end":66}},{"value":"/ implementation of the `BitStore` trait.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/store.rs","byte_start":434817,"byte_end":434860,"line_start":227,"line_end":227,"column_start":2,"column_end":45}}]},{"kind":"Mod","id":{"krate":0,"index":2153},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"view","qualname":"::view","value":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","parent":null,"children":[{"krate":0,"index":2154},{"krate":0,"index":2155},{"krate":0,"index":2158},{"krate":0,"index":2161},{"krate":0,"index":2164},{"krate":0,"index":2167},{"krate":0,"index":2170},{"krate":0,"index":2173},{"krate":0,"index":2186},{"krate":0,"index":2195},{"krate":0,"index":2204},{"krate":0,"index":3683},{"krate":0,"index":3693},{"krate":0,"index":3703},{"krate":0,"index":3713},{"krate":0,"index":3723},{"krate":0,"index":3733},{"krate":0,"index":3743},{"krate":0,"index":3753},{"krate":0,"index":3763},{"krate":0,"index":3773},{"krate":0,"index":3783},{"krate":0,"index":3793},{"krate":0,"index":3803},{"krate":0,"index":3813},{"krate":0,"index":3823},{"krate":0,"index":3833},{"krate":0,"index":3843},{"krate":0,"index":3853},{"krate":0,"index":3863},{"krate":0,"index":3873},{"krate":0,"index":3883},{"krate":0,"index":3893},{"krate":0,"index":3903},{"krate":0,"index":3913},{"krate":0,"index":3923},{"krate":0,"index":3933},{"krate":0,"index":3943},{"krate":0,"index":3953},{"krate":0,"index":3963},{"krate":0,"index":3973},{"krate":0,"index":3983},{"krate":0,"index":3993},{"krate":0,"index":4003},{"krate":0,"index":4013},{"krate":0,"index":4023},{"krate":0,"index":4033},{"krate":0,"index":4043},{"krate":0,"index":4053},{"krate":0,"index":4063},{"krate":0,"index":4073},{"krate":0,"index":4083},{"krate":0,"index":4093},{"krate":0,"index":4103},{"krate":0,"index":4113},{"krate":0,"index":4123},{"krate":0,"index":4133},{"krate":0,"index":4143},{"krate":0,"index":4153},{"krate":0,"index":4163},{"krate":0,"index":4173},{"krate":0,"index":4183},{"krate":0,"index":4193},{"krate":0,"index":4203},{"krate":0,"index":4213},{"krate":0,"index":4223},{"krate":0,"index":4233},{"krate":0,"index":4243},{"krate":0,"index":4253},{"krate":0,"index":4263},{"krate":0,"index":4273},{"krate":0,"index":4283},{"krate":0,"index":4293},{"krate":0,"index":4303},{"krate":0,"index":4313},{"krate":0,"index":2215},{"krate":0,"index":2219},{"krate":0,"index":2223},{"krate":0,"index":2228}],"decl_id":null,"docs":" View constructors for memory regions.","sig":null,"attributes":[{"value":"* View constructors for memory regions.\n\nThe `&BitSlice` type is a referential view over existing memory. The inherent\nconstructors are awkward to call, as they require function syntax rather than\nmethod syntax, and must provide a token for the memory type even though this is\nprovided by the prior binding.\n\nThis module provides a view trait, `ViewBits`, which provides `BitSlice`\nconstructors available in method-call syntax with only ordering type parameters.\n\nIn addition, the traits `AsBits` and `AsBitsMut` are analogues of [`AsRef`] and\n[`AsMut`], respectively. These traits have a blanket implementation for all\n`A: As{Ref,Mut}<[T: BitStore]>`, so that any type that implements a view to a\nsuitable memory region automatically implements a view to that region’s bits.\n\nThese traits are distinct because `ViewBits` combines the im/mutable view\nfunctions into one trait, and can provide specialized implementations with a\nslight performance increase over the generic, but `AsBits{,Mut}` can fit in the\ngeneric type system of any library without undue effort.\n\n[`AsMut`]: https://doc.rust-lang.org/core/convert/trait.AsMut.html\n[`AsRef`]: https://doc.rust-lang.org/core/convert/trait.AsRef.html\n!*/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":436994,"byte_end":438201,"line_start":1,"line_end":23,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":2173},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":438903,"byte_end":438910,"line_start":46,"line_end":46,"column_start":11,"column_end":18},"name":"BitView","qualname":"::view::BitView","value":"BitView","parent":null,"children":[{"krate":0,"index":2174},{"krate":0,"index":2175},{"krate":0,"index":2176},{"krate":0,"index":2178},{"krate":0,"index":2180},{"krate":0,"index":2182},{"krate":0,"index":2184},{"krate":0,"index":2185}],"decl_id":null,"docs":" Views a type that can store bits as a bit-slice.","sig":null,"attributes":[{"value":"* Views a type that can store bits as a bit-slice.\n\nThis trait is implemented on all `T: BitStore` types, and the arrays and slices\nof them that are supported by the standard library.\n\nThis means that until type-level integers are stabilized, only arrays in\n`[T: BitStore; 0 ..= 32]` will implement the trait; wider arrays will need to\nreborrow as slices `[T]` in order to use the slice implementation.\n\nIf you have a type that contains a bit-storage type that can be viewed with this\ntrait, then you can implement this trait by forwarding to the interior view.\n**/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":438325,"byte_end":438892,"line_start":34,"line_end":45,"column_start":1,"column_end":4}}]},{"kind":"Type","id":{"krate":0,"index":2174},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":438971,"byte_end":438976,"line_start":48,"line_end":48,"column_start":7,"column_end":12},"name":"Store","qualname":"::view::BitView::Store","value":"type Store: BitStore;","parent":{"krate":0,"index":2173},"children":[],"decl_id":null,"docs":" The access-control type of the storage region.\n","sig":null,"attributes":[{"value":"/ The access-control type of the storage region.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":438914,"byte_end":438964,"line_start":47,"line_end":47,"column_start":2,"column_end":52}}]},{"kind":"Type","id":{"krate":0,"index":2175},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":439052,"byte_end":439055,"line_start":51,"line_end":51,"column_start":7,"column_end":10},"name":"Mem","qualname":"::view::BitView::Mem","value":"type Mem: BitMemory;","parent":{"krate":0,"index":2173},"children":[],"decl_id":null,"docs":" The underlying register type of the storage region.\n","sig":null,"attributes":[{"value":"/ The underlying register type of the storage region.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":438990,"byte_end":439045,"line_start":50,"line_end":50,"column_start":2,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2176},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":439360,"byte_end":439369,"line_start":66,"line_end":66,"column_start":5,"column_end":14},"name":"view_bits","qualname":"::view::BitView::view_bits","value":"pub fn view_bits<O>(&Self) -> &BitSlice<O, Self::Store> where O: BitOrder","parent":{"krate":0,"index":2173},"children":[],"decl_id":null,"docs":" Views a memory region as a `BitSlice`.","sig":null,"attributes":[{"value":"/ Views a memory region as a `BitSlice`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":439070,"byte_end":439112,"line_start":53,"line_end":53,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":439114,"byte_end":439117,"line_start":54,"line_end":54,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":439119,"byte_end":439140,"line_start":55,"line_end":55,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":439142,"byte_end":439145,"line_start":56,"line_end":56,"column_start":2,"column_end":5}},{"value":"/ - `O`: The bit ordering used for the region.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":439147,"byte_end":439195,"line_start":57,"line_end":57,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":439197,"byte_end":439200,"line_start":58,"line_end":58,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":439202,"byte_end":439218,"line_start":59,"line_end":59,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":439220,"byte_end":439223,"line_start":60,"line_end":60,"column_start":2,"column_end":5}},{"value":"/ - `&self`: The region to view as individual bits.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":439225,"byte_end":439278,"line_start":61,"line_end":61,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":439280,"byte_end":439283,"line_start":62,"line_end":62,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":439285,"byte_end":439298,"line_start":63,"line_end":63,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":439300,"byte_end":439303,"line_start":64,"line_end":64,"column_start":2,"column_end":5}},{"value":"/ A `&BitSlice` view over the region at `*self`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":439305,"byte_end":439355,"line_start":65,"line_end":65,"column_start":2,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2178},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":439557,"byte_end":439561,"line_start":75,"line_end":75,"column_start":5,"column_end":9},"name":"bits","qualname":"::view::BitView::bits","value":"pub fn bits<O>(&Self) -> &BitSlice<O, Self::Store> where O: BitOrder","parent":{"krate":0,"index":2173},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":439447,"byte_end":439464,"line_start":70,"line_end":70,"column_start":2,"column_end":19}},{"value":"deprecated(since = \"0.18.0\", note =\n             \"The method is renamed to `.view_bits`\")","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":439466,"byte_end":439552,"line_start":71,"line_end":74,"column_start":2,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":2180},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":439961,"byte_end":439974,"line_start":93,"line_end":93,"column_start":5,"column_end":18},"name":"view_bits_mut","qualname":"::view::BitView::view_bits_mut","value":"pub fn view_bits_mut<O>(&mut Self) -> &mut BitSlice<O, Self::Store> where\nO: BitOrder","parent":{"krate":0,"index":2173},"children":[],"decl_id":null,"docs":" Views a memory region as a mutable `BitSlice`.","sig":null,"attributes":[{"value":"/ Views a memory region as a mutable `BitSlice`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":439651,"byte_end":439701,"line_start":80,"line_end":80,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":439703,"byte_end":439706,"line_start":81,"line_end":81,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":439708,"byte_end":439729,"line_start":82,"line_end":82,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":439731,"byte_end":439734,"line_start":83,"line_end":83,"column_start":2,"column_end":5}},{"value":"/ - `O`: The bit ordering used for the region.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":439736,"byte_end":439784,"line_start":84,"line_end":84,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":439786,"byte_end":439789,"line_start":85,"line_end":85,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":439791,"byte_end":439807,"line_start":86,"line_end":86,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":439809,"byte_end":439812,"line_start":87,"line_end":87,"column_start":2,"column_end":5}},{"value":"/ - `&self`: The region to view as individual mutable bits.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":439814,"byte_end":439875,"line_start":88,"line_end":88,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":439877,"byte_end":439880,"line_start":89,"line_end":89,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":439882,"byte_end":439895,"line_start":90,"line_end":90,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":439897,"byte_end":439900,"line_start":91,"line_end":91,"column_start":2,"column_end":5}},{"value":"/ A `&mut BitSlice` view over the region at `*self`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":439902,"byte_end":439956,"line_start":92,"line_end":92,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2182},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":440174,"byte_end":440182,"line_start":102,"line_end":102,"column_start":5,"column_end":13},"name":"bits_mut","qualname":"::view::BitView::bits_mut","value":"pub fn bits_mut<O>(&mut Self) -> &BitSlice<O, Self::Store> where O: BitOrder","parent":{"krate":0,"index":2173},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":440060,"byte_end":440077,"line_start":97,"line_end":97,"column_start":2,"column_end":19}},{"value":"deprecated(since = \"0.18.0\", note =\n             \"The method is renamed to `.view_bits_mut`\")","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":440079,"byte_end":440169,"line_start":98,"line_end":101,"column_start":2,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":2184},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":440369,"byte_end":440379,"line_start":109,"line_end":109,"column_start":5,"column_end":15},"name":"const_bits","qualname":"::view::BitView::const_bits","value":"pub fn const_bits() -> usize where Self: Sized","parent":{"krate":0,"index":2173},"children":[],"decl_id":null,"docs":" Produces the number of bits that the implementing type can hold.\n","sig":null,"attributes":[{"value":"/ Produces the number of bits that the implementing type can hold.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":440280,"byte_end":440348,"line_start":107,"line_end":107,"column_start":2,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":2185},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":440590,"byte_end":440600,"line_start":116,"line_end":116,"column_start":5,"column_end":15},"name":"const_elts","qualname":"::view::BitView::const_elts","value":"pub fn const_elts() -> usize where Self: Sized","parent":{"krate":0,"index":2173},"children":[],"decl_id":null,"docs":" Produces the number of memory elements that the implementing type holds.\n","sig":null,"attributes":[{"value":"/ Produces the number of memory elements that the implementing type holds.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":440493,"byte_end":440569,"line_start":114,"line_end":114,"column_start":2,"column_end":78}}]},{"kind":"Trait","id":{"krate":0,"index":2215},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":444293,"byte_end":444299,"line_start":278,"line_end":278,"column_start":11,"column_end":17},"name":"AsBits","qualname":"::view::AsBits","value":"AsBits<T>","parent":null,"children":[{"krate":0,"index":2217}],"decl_id":null,"docs":" Views a region as an immutable bit-slice only.","sig":null,"attributes":[{"value":"* Views a region as an immutable bit-slice only.\n\nThis trait is an analogue to the [`AsRef`] trait, in that it enables any type to\nprovide an immutable-only view of a bit slice.\n\nIt does not require an `AsRef<[T: BitStore]>` implementation, and a blanket\nimplementation for all such types is provided. This allows you to choose whether\nto implement only one of `AsBits<T>` or `AsRef<[T]>`, and gain a bit-slice view\nwith either choice.\n\n# Type Parameters\n\n- `T`: The underlying storage region.\n\n# Notes\n\nYou are not *forbidden* from creating multiple views with different element\ntypes to the same region, but doing so is likely to cause inconsistent and\nunsurprising behavior.\n\nRefrain from implementing this trait with more than one storage argument unless\nyou are sure that you can uphold the memory region requirements of all of them,\nand are aware of the behavior conflicts that may arise.\n\n[`AsRef`]: https://doc.rust-lang.org/core/convert/trait.AsRef.html\n**/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":443314,"byte_end":444282,"line_start":252,"line_end":277,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":2217},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":444612,"byte_end":444619,"line_start":294,"line_end":294,"column_start":5,"column_end":12},"name":"as_bits","qualname":"::view::AsBits::as_bits","value":"pub fn as_bits<O>(&Self) -> &BitSlice<O, T> where O: BitOrder","parent":{"krate":0,"index":2215},"children":[],"decl_id":null,"docs":" Views memory as a slice of immutable bits.","sig":null,"attributes":[{"value":"/ Views memory as a slice of immutable bits.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":444324,"byte_end":444370,"line_start":281,"line_end":281,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":444372,"byte_end":444375,"line_start":282,"line_end":282,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":444377,"byte_end":444398,"line_start":283,"line_end":283,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":444400,"byte_end":444403,"line_start":284,"line_end":284,"column_start":2,"column_end":5}},{"value":"/ - `O`: The bit ordering used for the region.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":444405,"byte_end":444453,"line_start":285,"line_end":285,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":444455,"byte_end":444458,"line_start":286,"line_end":286,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":444460,"byte_end":444476,"line_start":287,"line_end":287,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":444478,"byte_end":444481,"line_start":288,"line_end":288,"column_start":2,"column_end":5}},{"value":"/ - `&self`: The value that is providing a bit-slice view.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":444483,"byte_end":444543,"line_start":289,"line_end":289,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":444545,"byte_end":444548,"line_start":290,"line_end":290,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":444550,"byte_end":444563,"line_start":291,"line_end":291,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":444565,"byte_end":444568,"line_start":292,"line_end":292,"column_start":2,"column_end":5}},{"value":"/ An immutable view into some bits.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":444570,"byte_end":444607,"line_start":293,"line_end":293,"column_start":2,"column_end":39}}]},{"kind":"Trait","id":{"krate":0,"index":2219},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":445638,"byte_end":445647,"line_start":324,"line_end":324,"column_start":11,"column_end":20},"name":"AsBitsMut","qualname":"::view::AsBitsMut","value":"AsBitsMut<T>","parent":null,"children":[{"krate":0,"index":2221}],"decl_id":null,"docs":" Views a region as a mutable bit-slice.","sig":null,"attributes":[{"value":"* Views a region as a mutable bit-slice.\n\nThis trait is an analogue to the [`AsMut`] trait, in that it enables any type to\nprovide a mutable view of a bit slice.\n\nIt does not require an `AsMut<[T: BitStore]>` implementation, and a blanket\nimplementation for all such types is provided. This allows you to choose whether\nto implement only one of `AsBitsMut<T>` or `AsMut<[T]>`, and gain a bit-slice\nview with either choice.\n\n# Type Parameters\n\n- `T`: The underlying storage region.\n\n# Notes\n\nYou are not *forbidden* from creating multiple views with different element\ntypes to the same region, but doing so is likely to cause inconsistent and\nunsurprising behavior.\n\nRefrain from implementing this trait with more than one storage argument unless\nyou are sure that you can uphold the memory region requirements of all of them,\nand are aware of the behavior conflicts that may arise.\n\n[`AsMut`]: https://doc.rust-lang.org/core/convert/trait.AsMut.html\n**/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":444672,"byte_end":445627,"line_start":298,"line_end":323,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":2221},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":445959,"byte_end":445970,"line_start":340,"line_end":340,"column_start":5,"column_end":16},"name":"as_bits_mut","qualname":"::view::AsBitsMut::as_bits_mut","value":"pub fn as_bits_mut<O>(&mut Self) -> &mut BitSlice<O, T> where O: BitOrder","parent":{"krate":0,"index":2219},"children":[],"decl_id":null,"docs":" Views memory as a slice of mutable bits.","sig":null,"attributes":[{"value":"/ Views memory as a slice of mutable bits.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":445672,"byte_end":445716,"line_start":327,"line_end":327,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":445718,"byte_end":445721,"line_start":328,"line_end":328,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":445723,"byte_end":445744,"line_start":329,"line_end":329,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":445746,"byte_end":445749,"line_start":330,"line_end":330,"column_start":2,"column_end":5}},{"value":"/ - `O`: The bit ordering used for the region.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":445751,"byte_end":445799,"line_start":331,"line_end":331,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":445801,"byte_end":445804,"line_start":332,"line_end":332,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":445806,"byte_end":445822,"line_start":333,"line_end":333,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":445824,"byte_end":445827,"line_start":334,"line_end":334,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`: The value that is providing a bit-slice view.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":445829,"byte_end":445893,"line_start":335,"line_end":335,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":445895,"byte_end":445898,"line_start":336,"line_end":336,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":445900,"byte_end":445913,"line_start":337,"line_end":337,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":445915,"byte_end":445918,"line_start":338,"line_end":338,"column_start":2,"column_end":5}},{"value":"/ A mutable view into some bits.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":445920,"byte_end":445954,"line_start":339,"line_end":339,"column_start":2,"column_end":36}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/access.rs","byte_start":43972,"byte_end":43973,"line_start":358,"line_end":358,"column_start":29,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":50355,"byte_end":50363,"line_start":153,"line_end":153,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/ops.rs","byte_start":53933,"byte_end":53941,"line_start":25,"line_end":25,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":165},{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/ops.rs","byte_start":54232,"byte_end":54240,"line_start":41,"line_end":41,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":171}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/ops.rs","byte_start":54487,"byte_end":54495,"line_start":54,"line_end":54,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":176},{"krate":0,"index":177}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/ops.rs","byte_start":54783,"byte_end":54791,"line_start":70,"line_end":70,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/ops.rs","byte_start":55037,"byte_end":55045,"line_start":83,"line_end":83,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":187},{"krate":0,"index":188}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/ops.rs","byte_start":55336,"byte_end":55344,"line_start":99,"line_end":99,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":193}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/ops.rs","byte_start":55581,"byte_end":55589,"line_start":112,"line_end":112,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":197},{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/ops.rs","byte_start":55815,"byte_end":55823,"line_start":126,"line_end":126,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":202}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/ops.rs","byte_start":56033,"byte_end":56041,"line_start":138,"line_end":138,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":207},{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/ops.rs","byte_start":56354,"byte_end":56362,"line_start":153,"line_end":153,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":213}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/ops.rs","byte_start":56620,"byte_end":56628,"line_start":166,"line_end":166,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":217},{"krate":0,"index":218}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":57223,"byte_end":57231,"line_start":35,"line_end":35,"column_start":46,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":285}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":57452,"byte_end":57460,"line_start":47,"line_end":47,"column_start":49,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":289}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":57636,"byte_end":57644,"line_start":58,"line_end":58,"column_start":19,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":57747,"byte_end":57755,"line_start":66,"line_end":66,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":296}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":57991,"byte_end":57999,"line_start":78,"line_end":78,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":301}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":58193,"byte_end":58201,"line_start":90,"line_end":90,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":306}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":58497,"byte_end":58505,"line_start":105,"line_end":105,"column_start":46,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":311}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":58767,"byte_end":58775,"line_start":118,"line_end":118,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":316}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":59075,"byte_end":59083,"line_start":132,"line_end":132,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":320}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":59300,"byte_end":59308,"line_start":144,"line_end":144,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":324}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":59516,"byte_end":59524,"line_start":156,"line_end":156,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":328}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":59727,"byte_end":59735,"line_start":168,"line_end":168,"column_start":52,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":334},{"krate":0,"index":335}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":61241,"byte_end":61249,"line_start":229,"line_end":229,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":351}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":61418,"byte_end":61426,"line_start":241,"line_end":241,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":355}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":61637,"byte_end":61645,"line_start":253,"line_end":253,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":359}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":61974,"byte_end":61982,"line_start":273,"line_end":273,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":363}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":62196,"byte_end":62204,"line_start":285,"line_end":285,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":367}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":62417,"byte_end":62425,"line_start":297,"line_end":297,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":371}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":62638,"byte_end":62646,"line_start":309,"line_end":309,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":375}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":62858,"byte_end":62866,"line_start":321,"line_end":321,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":379}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":63782,"byte_end":63790,"line_start":363,"line_end":363,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":64030,"byte_end":64050,"line_start":376,"line_end":376,"column_start":6,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":399}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":64164,"byte_end":64184,"line_start":384,"line_end":384,"column_start":18,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":402}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":74815,"byte_end":74824,"line_start":367,"line_end":367,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":467}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":74983,"byte_end":74992,"line_start":379,"line_end":379,"column_start":21,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":82311,"byte_end":82317,"line_start":639,"line_end":639,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":474}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":82462,"byte_end":82468,"line_start":649,"line_end":649,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":478},{"krate":0,"index":479}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":83233,"byte_end":83239,"line_start":684,"line_end":684,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":486}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":83980,"byte_end":83986,"line_start":717,"line_end":717,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":492}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":84259,"byte_end":84265,"line_start":731,"line_end":731,"column_start":39,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":84313,"byte_end":84319,"line_start":735,"line_end":735,"column_start":18,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":95745,"byte_end":95753,"line_start":300,"line_end":300,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":573},{"krate":0,"index":575},{"krate":0,"index":577},{"krate":0,"index":579}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":99866,"byte_end":99874,"line_start":460,"line_end":460,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":583},{"krate":0,"index":585},{"krate":0,"index":587},{"krate":0,"index":589}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":103260,"byte_end":103268,"line_start":622,"line_end":622,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":594},{"krate":0,"index":596},{"krate":0,"index":598},{"krate":0,"index":600}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":114301,"byte_end":114307,"line_start":125,"line_end":125,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":670},{"krate":0,"index":671},{"krate":0,"index":672},{"krate":0,"index":673},{"krate":0,"index":674},{"krate":0,"index":675},{"krate":0,"index":676},{"krate":0,"index":678},{"krate":0,"index":680},{"krate":0,"index":682},{"krate":0,"index":683},{"krate":0,"index":686},{"krate":0,"index":689},{"krate":0,"index":690}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":122145,"byte_end":122151,"line_start":376,"line_end":376,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":693}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":122349,"byte_end":122355,"line_start":386,"line_end":386,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":696}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":122561,"byte_end":122567,"line_start":396,"line_end":396,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":699}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":124637,"byte_end":124644,"line_start":462,"line_end":462,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":702},{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":706}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":127267,"byte_end":127274,"line_start":563,"line_end":563,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":709}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":127470,"byte_end":127477,"line_start":572,"line_end":572,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":712}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":129122,"byte_end":129128,"line_start":619,"line_end":619,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":715},{"krate":0,"index":716},{"krate":0,"index":717},{"krate":0,"index":718},{"krate":0,"index":719}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":131332,"byte_end":131338,"line_start":715,"line_end":715,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":722}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":132536,"byte_end":132542,"line_start":755,"line_end":755,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":725},{"krate":0,"index":726},{"krate":0,"index":727},{"krate":0,"index":728},{"krate":0,"index":729}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":134453,"byte_end":134459,"line_start":835,"line_end":835,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":734}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":134693,"byte_end":134699,"line_start":846,"line_end":846,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":737}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":135527,"byte_end":135534,"line_start":875,"line_end":875,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":740},{"krate":0,"index":741},{"krate":0,"index":742},{"krate":0,"index":743},{"krate":0,"index":744},{"krate":0,"index":745},{"krate":0,"index":746}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":137462,"byte_end":137469,"line_start":962,"line_end":962,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":749}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":137704,"byte_end":137711,"line_start":973,"line_end":973,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":752}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":137877,"byte_end":137884,"line_start":981,"line_end":981,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":755}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":138043,"byte_end":138050,"line_start":990,"line_end":990,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":759},{"krate":0,"index":760}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":138189,"byte_end":138196,"line_start":1000,"line_end":1000,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":763},{"krate":0,"index":764}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":138329,"byte_end":138336,"line_start":1010,"line_end":1010,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":767},{"krate":0,"index":768}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":152286,"byte_end":152290,"line_start":248,"line_end":248,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":823},{"krate":0,"index":825},{"krate":0,"index":827}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":153764,"byte_end":153768,"line_start":293,"line_end":293,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":832},{"krate":0,"index":834},{"krate":0,"index":836}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/pointer.rs","byte_start":162016,"byte_end":162023,"line_start":63,"line_end":63,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":903},{"krate":0,"index":904},{"krate":0,"index":905},{"krate":0,"index":906},{"krate":0,"index":907},{"krate":0,"index":908}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/pointer.rs","byte_start":163017,"byte_end":163024,"line_start":108,"line_end":108,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":911}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/pointer.rs","byte_start":163171,"byte_end":163178,"line_start":118,"line_end":118,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":914}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/pointer.rs","byte_start":163342,"byte_end":163349,"line_start":128,"line_end":128,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":917}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/pointer.rs","byte_start":163518,"byte_end":163525,"line_start":138,"line_end":138,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":920}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/pointer.rs","byte_start":163689,"byte_end":163696,"line_start":148,"line_end":148,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":923}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/pointer.rs","byte_start":163854,"byte_end":163861,"line_start":158,"line_end":158,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":926}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/pointer.rs","byte_start":164051,"byte_end":164058,"line_start":168,"line_end":168,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":929}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/pointer.rs","byte_start":164215,"byte_end":164222,"line_start":177,"line_end":177,"column_start":18,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Inherent","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/pointer.rs","byte_start":170111,"byte_end":170117,"line_start":331,"line_end":331,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":934},{"krate":0,"index":935},{"krate":0,"index":936},{"krate":0,"index":937},{"krate":0,"index":938},{"krate":0,"index":939},{"krate":0,"index":940},{"krate":0,"index":941},{"krate":0,"index":942},{"krate":0,"index":944},{"krate":0,"index":946},{"krate":0,"index":947},{"krate":0,"index":948},{"krate":0,"index":949},{"krate":0,"index":950},{"krate":0,"index":951},{"krate":0,"index":952},{"krate":0,"index":953},{"krate":0,"index":954},{"krate":0,"index":956},{"krate":0,"index":958},{"krate":0,"index":960},{"krate":0,"index":962},{"krate":0,"index":964},{"krate":0,"index":966},{"krate":0,"index":969},{"krate":0,"index":972}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/pointer.rs","byte_start":189028,"byte_end":189034,"line_start":953,"line_end":953,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":977}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/pointer.rs","byte_start":189146,"byte_end":189152,"line_start":961,"line_end":961,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":981}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/pointer.rs","byte_start":189679,"byte_end":189685,"line_start":979,"line_end":979,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":984}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/pointer.rs","byte_start":189821,"byte_end":189827,"line_start":989,"line_end":989,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":987}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/pointer.rs","byte_start":190006,"byte_end":190012,"line_start":999,"line_end":999,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":990}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/pointer.rs","byte_start":190200,"byte_end":190206,"line_start":1009,"line_end":1009,"column_start":18,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Inherent","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":209457,"byte_end":209465,"line_start":415,"line_end":415,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1154},{"krate":0,"index":1155},{"krate":0,"index":1156},{"krate":0,"index":1157},{"krate":0,"index":1158},{"krate":0,"index":1159}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":216705,"byte_end":216713,"line_start":653,"line_end":653,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1163},{"krate":0,"index":1165},{"krate":0,"index":1167},{"krate":0,"index":1168},{"krate":0,"index":1169},{"krate":0,"index":1173},{"krate":0,"index":1177},{"krate":0,"index":1178},{"krate":0,"index":1179},{"krate":0,"index":1180},{"krate":0,"index":1184},{"krate":0,"index":1188},{"krate":0,"index":1189},{"krate":0,"index":1191},{"krate":0,"index":1192},{"krate":0,"index":1194},{"krate":0,"index":1196},{"krate":0,"index":1197},{"krate":0,"index":1198},{"krate":0,"index":1199},{"krate":0,"index":1200},{"krate":0,"index":1201},{"krate":0,"index":1202},{"krate":0,"index":1203},{"krate":0,"index":1204},{"krate":0,"index":1206},{"krate":0,"index":1207},{"krate":0,"index":1208},{"krate":0,"index":1209}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Inherent","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":248328,"byte_end":248336,"line_start":1788,"line_end":1788,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1213},{"krate":0,"index":1214},{"krate":0,"index":1215}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Inherent","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":250477,"byte_end":250485,"line_start":1857,"line_end":1857,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1219},{"krate":0,"index":1220}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":257102,"byte_end":257110,"line_start":59,"line_end":59,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1350},{"krate":0,"index":1351},{"krate":0,"index":1352},{"krate":0,"index":1353},{"krate":0,"index":1354},{"krate":0,"index":1355},{"krate":0,"index":1356},{"krate":0,"index":1357},{"krate":0,"index":1358},{"krate":0,"index":1359},{"krate":0,"index":1360},{"krate":0,"index":1363},{"krate":0,"index":1366},{"krate":0,"index":1369},{"krate":0,"index":1372},{"krate":0,"index":1373},{"krate":0,"index":1374},{"krate":0,"index":1375},{"krate":0,"index":1376},{"krate":0,"index":1377},{"krate":0,"index":1378},{"krate":0,"index":1379},{"krate":0,"index":1380},{"krate":0,"index":1381},{"krate":0,"index":1382},{"krate":0,"index":1383},{"krate":0,"index":1384},{"krate":0,"index":1385},{"krate":0,"index":1386},{"krate":0,"index":1387},{"krate":0,"index":1388},{"krate":0,"index":1389},{"krate":0,"index":1391},{"krate":0,"index":1393},{"krate":0,"index":1395},{"krate":0,"index":1397},{"krate":0,"index":1399},{"krate":0,"index":1401},{"krate":0,"index":1403},{"krate":0,"index":1405},{"krate":0,"index":1409},{"krate":0,"index":1412},{"krate":0,"index":1415},{"krate":0,"index":1416},{"krate":0,"index":1417},{"krate":0,"index":1420},{"krate":0,"index":1423},{"krate":0,"index":1424},{"krate":0,"index":1425},{"krate":0,"index":1427},{"krate":0,"index":1430},{"krate":0,"index":1433},{"krate":0,"index":1435}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":337949,"byte_end":337958,"line_start":2815,"line_end":2815,"column_start":44,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1484},{"krate":0,"index":1485},{"krate":0,"index":1486},{"krate":0,"index":1487},{"krate":0,"index":1488},{"krate":0,"index":1489},{"krate":0,"index":1490},{"krate":0,"index":1491}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":340826,"byte_end":340830,"line_start":90,"line_end":90,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1549},{"krate":0,"index":1550},{"krate":0,"index":1551},{"krate":0,"index":1552}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":343549,"byte_end":343553,"line_start":190,"line_end":190,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1556}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":343678,"byte_end":343682,"line_start":200,"line_end":200,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1560}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":344430,"byte_end":344434,"line_start":238,"line_end":238,"column_start":21,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Inherent","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":346123,"byte_end":346130,"line_start":300,"line_end":300,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1575},{"krate":0,"index":1576},{"krate":0,"index":1577},{"krate":0,"index":1578}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Inherent","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":362874,"byte_end":362885,"line_start":988,"line_end":988,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1592},{"krate":0,"index":1593}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Inherent","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":365957,"byte_end":365971,"line_start":1109,"line_end":1109,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1598},{"krate":0,"index":1599}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Inherent","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":375038,"byte_end":375050,"line_start":1446,"line_end":1446,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1604},{"krate":0,"index":1605}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Inherent","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":378218,"byte_end":378233,"line_start":1568,"line_end":1568,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1610},{"krate":0,"index":1611}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/ops.rs","byte_start":401466,"byte_end":401474,"line_start":32,"line_end":32,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1729}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/ops.rs","byte_start":401730,"byte_end":401738,"line_start":44,"line_end":44,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1735}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/ops.rs","byte_start":401994,"byte_end":402002,"line_start":56,"line_end":56,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1741}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/ops.rs","byte_start":402249,"byte_end":402257,"line_start":68,"line_end":68,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1746},{"krate":0,"index":1747}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Inherent","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/proxy.rs","byte_start":407417,"byte_end":407423,"line_start":101,"line_end":101,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1813},{"krate":0,"index":1814},{"krate":0,"index":1815}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/proxy.rs","byte_start":409084,"byte_end":409090,"line_start":159,"line_end":159,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1819}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/proxy.rs","byte_start":409454,"byte_end":409460,"line_start":175,"line_end":175,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1823},{"krate":0,"index":1824}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/proxy.rs","byte_start":409619,"byte_end":409625,"line_start":188,"line_end":188,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1828}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/proxy.rs","byte_start":409774,"byte_end":409780,"line_start":199,"line_end":199,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1832}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/traits.rs","byte_start":411091,"byte_end":411099,"line_start":43,"line_end":43,"column_start":19,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/traits.rs","byte_start":411164,"byte_end":411172,"line_start":50,"line_end":50,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1913}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/traits.rs","byte_start":411674,"byte_end":411682,"line_start":69,"line_end":69,"column_start":54,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1919}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/traits.rs","byte_start":412535,"byte_end":412543,"line_start":115,"line_end":115,"column_start":55,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1938}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/traits.rs","byte_start":412792,"byte_end":412800,"line_start":129,"line_end":129,"column_start":59,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":1944}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/traits.rs","byte_start":413368,"byte_end":413376,"line_start":149,"line_end":149,"column_start":55,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1950}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/traits.rs","byte_start":414401,"byte_end":414409,"line_start":198,"line_end":198,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":1968}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/traits.rs","byte_start":414667,"byte_end":414675,"line_start":211,"line_end":211,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":1974}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/traits.rs","byte_start":416052,"byte_end":416060,"line_start":289,"line_end":289,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2004}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/traits.rs","byte_start":416332,"byte_end":416340,"line_start":305,"line_end":305,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2008}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/traits.rs","byte_start":416603,"byte_end":416611,"line_start":318,"line_end":318,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2012}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/traits.rs","byte_start":422265,"byte_end":422273,"line_start":476,"line_end":476,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2017}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/traits.rs","byte_start":422470,"byte_end":422478,"line_start":490,"line_end":490,"column_start":28,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/traits.rs","byte_start":422573,"byte_end":422581,"line_start":498,"line_end":498,"column_start":28,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/store.rs","byte_start":433691,"byte_end":433695,"line_start":189,"line_end":189,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2141},{"krate":0,"index":2142},{"krate":0,"index":2143},{"krate":0,"index":2144},{"krate":0,"index":2145},{"krate":0,"index":2147}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/store.rs","byte_start":434213,"byte_end":434217,"line_start":210,"line_end":210,"column_start":26,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":440686,"byte_end":440687,"line_start":121,"line_end":121,"column_start":21,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2188},{"krate":0,"index":2189},{"krate":0,"index":2190},{"krate":0,"index":2192},{"krate":0,"index":2194}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":446087,"byte_end":446088,"line_start":345,"line_end":345,"column_start":26,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2226}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":446310,"byte_end":446311,"line_start":358,"line_end":358,"column_start":29,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2231}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/lib.rs","byte_start":6142,"byte_end":6148,"line_start":156,"line_end":156,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":4}},{"kind":"Mod","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/macros.rs","byte_start":6629,"byte_end":6637,"line_start":5,"line_end":5,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":5}},{"kind":"Mod","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/lib.rs","byte_start":6171,"byte_end":6176,"line_start":159,"line_end":159,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":76}},{"kind":"Mod","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/lib.rs","byte_start":6186,"byte_end":6192,"line_start":160,"line_end":160,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":403}},{"kind":"Mod","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/lib.rs","byte_start":6202,"byte_end":6207,"line_start":161,"line_end":161,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":498}},{"kind":"Mod","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/lib.rs","byte_start":6217,"byte_end":6222,"line_start":162,"line_end":162,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":619}},{"kind":"Mod","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/lib.rs","byte_start":6232,"byte_end":6235,"line_start":163,"line_end":163,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":769}},{"kind":"Mod","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/lib.rs","byte_start":6245,"byte_end":6250,"line_start":164,"line_end":164,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":792}},{"kind":"Mod","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/lib.rs","byte_start":6273,"byte_end":6280,"line_start":166,"line_end":166,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":993}},{"kind":"Mod","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/lib.rs","byte_start":6290,"byte_end":6295,"line_start":167,"line_end":167,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1076}},{"kind":"Mod","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/lib.rs","byte_start":6305,"byte_end":6310,"line_start":168,"line_end":168,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":2103}},{"kind":"Mod","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/lib.rs","byte_start":6320,"byte_end":6324,"line_start":169,"line_end":169,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":2153}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/access.rs","byte_start":34930,"byte_end":34935,"line_start":42,"line_end":42,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":1,"index":8894},"to":{"krate":0,"index":49}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/access.rs","byte_start":34938,"byte_end":34944,"line_start":42,"line_end":42,"column_start":33,"column_end":39},"kind":"SuperTrait","from":{"krate":4,"index":51},"to":{"krate":0,"index":49}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/access.rs","byte_start":34950,"byte_end":34955,"line_start":42,"line_end":42,"column_start":45,"column_end":50},"kind":"SuperTrait","from":{"krate":1,"index":2854},"to":{"krate":0,"index":49}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/access.rs","byte_start":43972,"byte_end":43973,"line_start":358,"line_end":358,"column_start":29,"column_end":30},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":75},"to":{"krate":0,"index":49}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array.rs","byte_start":50355,"byte_end":50363,"line_start":153,"line_end":153,"column_start":12,"column_end":20},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":2291},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/ops.rs","byte_start":53933,"byte_end":53941,"line_start":25,"line_end":25,"column_start":33,"column_end":41},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":2291},"to":{"krate":1,"index":2972}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/ops.rs","byte_start":54232,"byte_end":54240,"line_start":41,"line_end":41,"column_start":39,"column_end":47},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":2291},"to":{"krate":1,"index":2999}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/ops.rs","byte_start":54487,"byte_end":54495,"line_start":54,"line_end":54,"column_start":32,"column_end":40},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":2291},"to":{"krate":1,"index":2977}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/ops.rs","byte_start":54783,"byte_end":54791,"line_start":70,"line_end":70,"column_start":38,"column_end":46},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":2291},"to":{"krate":1,"index":3003}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/ops.rs","byte_start":55037,"byte_end":55045,"line_start":83,"line_end":83,"column_start":33,"column_end":41},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":2291},"to":{"krate":1,"index":2982}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/ops.rs","byte_start":55336,"byte_end":55344,"line_start":99,"line_end":99,"column_start":39,"column_end":47},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":2291},"to":{"krate":1,"index":3007}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/ops.rs","byte_start":55581,"byte_end":55589,"line_start":112,"line_end":112,"column_start":22,"column_end":30},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":2291},"to":{"krate":1,"index":3060}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/ops.rs","byte_start":55815,"byte_end":55823,"line_start":126,"line_end":126,"column_start":25,"column_end":33},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":2291},"to":{"krate":1,"index":3073}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/ops.rs","byte_start":56033,"byte_end":56041,"line_start":138,"line_end":138,"column_start":32,"column_end":40},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":2291},"to":{"krate":1,"index":3145}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/ops.rs","byte_start":56354,"byte_end":56362,"line_start":153,"line_end":153,"column_start":35,"column_end":43},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":2291},"to":{"krate":1,"index":3149}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/ops.rs","byte_start":56620,"byte_end":56628,"line_start":166,"line_end":166,"column_start":20,"column_end":28},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":2291},"to":{"krate":1,"index":2968}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":57223,"byte_end":57231,"line_start":35,"line_end":35,"column_start":46,"column_end":54},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":2291},"to":{"krate":1,"index":2448}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":57452,"byte_end":57460,"line_start":47,"line_end":47,"column_start":49,"column_end":57},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":2291},"to":{"krate":1,"index":2451}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":57636,"byte_end":57644,"line_start":58,"line_end":58,"column_start":19,"column_end":27},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":2291},"to":{"krate":1,"index":2505}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":57747,"byte_end":57755,"line_start":66,"line_end":66,"column_start":20,"column_end":28},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":2291},"to":{"krate":1,"index":2536}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":57991,"byte_end":57999,"line_start":78,"line_end":78,"column_start":45,"column_end":53},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1145},"to":{"krate":1,"index":2500}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":58193,"byte_end":58201,"line_start":90,"line_end":90,"column_start":36,"column_end":44},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":2291},"to":{"krate":1,"index":2500}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":58497,"byte_end":58505,"line_start":105,"line_end":105,"column_start":46,"column_end":54},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1145},"to":{"krate":1,"index":2547}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":58767,"byte_end":58775,"line_start":118,"line_end":118,"column_start":37,"column_end":45},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":2291},"to":{"krate":1,"index":2547}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":59075,"byte_end":59083,"line_start":132,"line_end":132,"column_start":45,"column_end":53},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":2291},"to":{"krate":1,"index":2746}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":59300,"byte_end":59308,"line_start":144,"line_end":144,"column_start":45,"column_end":53},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":2291},"to":{"krate":1,"index":2749}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":59516,"byte_end":59524,"line_start":156,"line_end":156,"column_start":24,"column_end":32},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":2291},"to":{"krate":1,"index":2755}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":59727,"byte_end":59735,"line_start":168,"line_end":168,"column_start":52,"column_end":60},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":2291},"to":{"krate":1,"index":2762}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":61241,"byte_end":61249,"line_start":229,"line_end":229,"column_start":24,"column_end":32},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":2291},"to":{"krate":1,"index":2827}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":61418,"byte_end":61426,"line_start":241,"line_end":241,"column_start":23,"column_end":31},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":2291},"to":{"krate":1,"index":8905}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":61637,"byte_end":61645,"line_start":253,"line_end":253,"column_start":22,"column_end":30},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":2291},"to":{"krate":1,"index":8894}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":61974,"byte_end":61982,"line_start":273,"line_end":273,"column_start":24,"column_end":32},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":2291},"to":{"krate":1,"index":8901}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":62196,"byte_end":62204,"line_start":285,"line_end":285,"column_start":25,"column_end":33},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":2291},"to":{"krate":1,"index":8907}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":62417,"byte_end":62425,"line_start":297,"line_end":297,"column_start":22,"column_end":30},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":2291},"to":{"krate":1,"index":8903}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":62638,"byte_end":62646,"line_start":309,"line_end":309,"column_start":25,"column_end":33},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":2291},"to":{"krate":1,"index":8909}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":62858,"byte_end":62866,"line_start":321,"line_end":321,"column_start":21,"column_end":29},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":2291},"to":{"krate":1,"index":9100}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":63782,"byte_end":63790,"line_start":363,"line_end":363,"column_start":22,"column_end":30},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":2291},"to":{"krate":1,"index":2890}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":64030,"byte_end":64050,"line_start":376,"line_end":376,"column_start":6,"column_end":26},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":2303},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/array/traits.rs","byte_start":64164,"byte_end":64184,"line_start":384,"line_end":384,"column_start":18,"column_end":38},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":2303},"to":{"krate":1,"index":8901}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":74815,"byte_end":74824,"line_start":367,"line_end":367,"column_start":22,"column_end":31},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":2323},"to":{"krate":1,"index":2470}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":74983,"byte_end":74992,"line_start":379,"line_end":379,"column_start":21,"column_end":30},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":2323},"to":{"krate":1,"index":2859}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":82311,"byte_end":82317,"line_start":639,"line_end":639,"column_start":19,"column_end":25},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":2383},"to":{"krate":1,"index":2470}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":82462,"byte_end":82468,"line_start":649,"line_end":649,"column_start":26,"column_end":32},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":2383},"to":{"krate":1,"index":7317}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":83233,"byte_end":83239,"line_start":684,"line_end":684,"column_start":37,"column_end":43},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":2383},"to":{"krate":1,"index":7181}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":83980,"byte_end":83986,"line_start":717,"line_end":717,"column_start":31,"column_end":37},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":2383},"to":{"krate":1,"index":7206}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":84259,"byte_end":84265,"line_start":731,"line_end":731,"column_start":39,"column_end":45},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":2383},"to":{"krate":1,"index":7593}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/domain.rs","byte_start":84313,"byte_end":84319,"line_start":735,"line_end":735,"column_start":18,"column_end":24},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":2383},"to":{"krate":1,"index":2859}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":95745,"byte_end":95753,"line_start":300,"line_end":300,"column_start":22,"column_end":30},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1145},"to":{"krate":0,"index":558}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":99866,"byte_end":99874,"line_start":460,"line_end":460,"column_start":22,"column_end":30},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1145},"to":{"krate":0,"index":558}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/field.rs","byte_start":103260,"byte_end":103268,"line_start":622,"line_end":622,"column_start":25,"column_end":33},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":2291},"to":{"krate":0,"index":558}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":114301,"byte_end":114307,"line_start":125,"line_end":125,"column_start":9,"column_end":15},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":2438},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":122145,"byte_end":122151,"line_start":376,"line_end":376,"column_start":20,"column_end":26},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":2438},"to":{"krate":1,"index":8905}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":122349,"byte_end":122355,"line_start":386,"line_end":386,"column_start":19,"column_end":25},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":2438},"to":{"krate":1,"index":8894}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":122561,"byte_end":122567,"line_start":396,"line_end":396,"column_start":21,"column_end":27},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":2438},"to":{"krate":1,"index":8901}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":124637,"byte_end":124644,"line_start":462,"line_end":462,"column_start":9,"column_end":16},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":2471},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":127267,"byte_end":127274,"line_start":563,"line_end":563,"column_start":19,"column_end":26},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":2471},"to":{"krate":1,"index":8894}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":127470,"byte_end":127477,"line_start":572,"line_end":572,"column_start":21,"column_end":28},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":2471},"to":{"krate":1,"index":8901}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":129122,"byte_end":129128,"line_start":619,"line_end":619,"column_start":9,"column_end":15},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":2504},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":131332,"byte_end":131338,"line_start":715,"line_end":715,"column_start":19,"column_end":25},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":2504},"to":{"krate":1,"index":8894}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":132536,"byte_end":132542,"line_start":755,"line_end":755,"column_start":9,"column_end":15},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":2537},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":134453,"byte_end":134459,"line_start":835,"line_end":835,"column_start":19,"column_end":25},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":2537},"to":{"krate":1,"index":8894}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":134693,"byte_end":134699,"line_start":846,"line_end":846,"column_start":21,"column_end":27},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":2537},"to":{"krate":1,"index":8901}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":135527,"byte_end":135534,"line_start":875,"line_end":875,"column_start":9,"column_end":16},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":2569},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":137462,"byte_end":137469,"line_start":962,"line_end":962,"column_start":19,"column_end":26},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":2569},"to":{"krate":1,"index":8894}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":137704,"byte_end":137711,"line_start":973,"line_end":973,"column_start":21,"column_end":28},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":2569},"to":{"krate":1,"index":8901}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":137877,"byte_end":137884,"line_start":981,"line_end":981,"column_start":28,"column_end":35},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":2569},"to":{"krate":1,"index":7113}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":138043,"byte_end":138050,"line_start":990,"line_end":990,"column_start":23,"column_end":30},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":2569},"to":{"krate":1,"index":2972}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":138189,"byte_end":138196,"line_start":1000,"line_end":1000,"column_start":22,"column_end":29},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":2569},"to":{"krate":1,"index":2977}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/index.rs","byte_start":138329,"byte_end":138336,"line_start":1010,"line_end":1010,"column_start":17,"column_end":24},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":2569},"to":{"krate":1,"index":2968}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/mem.rs","byte_start":141248,"byte_end":141258,"line_start":21,"line_end":21,"column_start":22,"column_end":32},"kind":"SuperTrait","from":{"krate":6,"index":267},"to":{"krate":0,"index":776}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/mem.rs","byte_start":141267,"byte_end":141273,"line_start":21,"line_end":21,"column_start":41,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":791},"to":{"krate":0,"index":776}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":152286,"byte_end":152290,"line_start":248,"line_end":248,"column_start":26,"column_end":30},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":2625},"to":{"krate":0,"index":813}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/order.rs","byte_start":153764,"byte_end":153768,"line_start":293,"line_end":293,"column_start":26,"column_end":30},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":2647},"to":{"krate":0,"index":813}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/pointer.rs","byte_start":162016,"byte_end":162023,"line_start":63,"line_end":63,"column_start":9,"column_end":16},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":2669},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/pointer.rs","byte_start":163017,"byte_end":163024,"line_start":108,"line_end":108,"column_start":19,"column_end":26},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":2669},"to":{"krate":1,"index":2470}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/pointer.rs","byte_start":163171,"byte_end":163178,"line_start":118,"line_end":118,"column_start":22,"column_end":29},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":2669},"to":{"krate":1,"index":2755}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/pointer.rs","byte_start":163342,"byte_end":163349,"line_start":128,"line_end":128,"column_start":28,"column_end":35},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":2669},"to":{"krate":1,"index":2755}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/pointer.rs","byte_start":163518,"byte_end":163525,"line_start":138,"line_end":138,"column_start":26,"column_end":33},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":2669},"to":{"krate":1,"index":2755}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/pointer.rs","byte_start":163689,"byte_end":163696,"line_start":148,"line_end":148,"column_start":26,"column_end":33},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":2669},"to":{"krate":1,"index":2755}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/pointer.rs","byte_start":163854,"byte_end":163861,"line_start":158,"line_end":158,"column_start":19,"column_end":26},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":2669},"to":{"krate":1,"index":8894}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/pointer.rs","byte_start":164051,"byte_end":164058,"line_start":168,"line_end":168,"column_start":21,"column_end":28},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":2669},"to":{"krate":1,"index":8911}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/pointer.rs","byte_start":164215,"byte_end":164222,"line_start":177,"line_end":177,"column_start":18,"column_end":25},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":2669},"to":{"krate":1,"index":2859}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/pointer.rs","byte_start":170111,"byte_end":170117,"line_start":331,"line_end":331,"column_start":9,"column_end":15},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":2694},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/pointer.rs","byte_start":189028,"byte_end":189034,"line_start":953,"line_end":953,"column_start":19,"column_end":25},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":2694},"to":{"krate":1,"index":2470}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/pointer.rs","byte_start":189146,"byte_end":189152,"line_start":961,"line_end":961,"column_start":37,"column_end":43},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":2694},"to":{"krate":1,"index":2500}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/pointer.rs","byte_start":189679,"byte_end":189685,"line_start":979,"line_end":979,"column_start":21,"column_end":27},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":2694},"to":{"krate":1,"index":2827}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/pointer.rs","byte_start":189821,"byte_end":189827,"line_start":989,"line_end":989,"column_start":19,"column_end":25},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":2694},"to":{"krate":1,"index":8894}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/pointer.rs","byte_start":190006,"byte_end":190012,"line_start":999,"line_end":999,"column_start":21,"column_end":27},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":2694},"to":{"krate":1,"index":8911}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/pointer.rs","byte_start":190200,"byte_end":190206,"line_start":1009,"line_end":1009,"column_start":18,"column_end":24},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":2694},"to":{"krate":1,"index":2859}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":209457,"byte_end":209465,"line_start":415,"line_end":415,"column_start":12,"column_end":20},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1145},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":216705,"byte_end":216713,"line_start":653,"line_end":653,"column_start":12,"column_end":20},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1145},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":248328,"byte_end":248336,"line_start":1788,"line_end":1788,"column_start":12,"column_end":20},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1145},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice.rs","byte_start":250477,"byte_end":250485,"line_start":1857,"line_end":1857,"column_start":12,"column_end":20},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1145},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":257102,"byte_end":257110,"line_start":59,"line_end":59,"column_start":12,"column_end":20},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1145},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/api.rs","byte_start":337949,"byte_end":337958,"line_start":2815,"line_end":2815,"column_start":44,"column_end":53},"kind":{"Impl":{"id":107}},"from":{"krate":1,"index":38516},"to":{"krate":0,"index":1453}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":340826,"byte_end":340830,"line_start":90,"line_end":90,"column_start":16,"column_end":20},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":2787},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":343549,"byte_end":343553,"line_start":190,"line_end":190,"column_start":22,"column_end":26},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":2787},"to":{"krate":1,"index":2470}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":343678,"byte_end":343682,"line_start":200,"line_end":200,"column_start":38,"column_end":42},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":2787},"to":{"krate":1,"index":2746}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":344430,"byte_end":344434,"line_start":238,"line_end":238,"column_start":21,"column_end":25},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":2787},"to":{"krate":1,"index":2859}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":346123,"byte_end":346130,"line_start":300,"line_end":300,"column_start":16,"column_end":23},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":2801},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":362874,"byte_end":362885,"line_start":988,"line_end":988,"column_start":16,"column_end":27},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":2997},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":365957,"byte_end":365971,"line_start":1109,"line_end":1109,"column_start":16,"column_end":30},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":3037},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":375038,"byte_end":375050,"line_start":1446,"line_end":1446,"column_start":16,"column_end":28},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":3145},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":378218,"byte_end":378233,"line_start":1568,"line_end":1568,"column_start":16,"column_end":31},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":3185},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/iter.rs","byte_start":389021,"byte_end":389040,"line_start":2045,"line_end":2045,"column_start":18,"column_end":37},"kind":"SuperTrait","from":{"krate":1,"index":7181},"to":{"krate":0,"index":1630}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/ops.rs","byte_start":401466,"byte_end":401474,"line_start":32,"line_end":32,"column_start":39,"column_end":47},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1145},"to":{"krate":1,"index":2999}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/ops.rs","byte_start":401730,"byte_end":401738,"line_start":44,"line_end":44,"column_start":38,"column_end":46},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1145},"to":{"krate":1,"index":3003}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/ops.rs","byte_start":401994,"byte_end":402002,"line_start":56,"line_end":56,"column_start":39,"column_end":47},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1145},"to":{"krate":1,"index":3007}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/ops.rs","byte_start":402249,"byte_end":402257,"line_start":68,"line_end":68,"column_start":29,"column_end":37},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1145},"to":{"krate":1,"index":3145}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/proxy.rs","byte_start":407417,"byte_end":407423,"line_start":101,"line_end":101,"column_start":12,"column_end":18},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1802},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/proxy.rs","byte_start":409084,"byte_end":409090,"line_start":159,"line_end":159,"column_start":22,"column_end":28},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1802},"to":{"krate":1,"index":8894}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/proxy.rs","byte_start":409454,"byte_end":409460,"line_start":175,"line_end":175,"column_start":22,"column_end":28},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1802},"to":{"krate":1,"index":3060}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/proxy.rs","byte_start":409619,"byte_end":409625,"line_start":188,"line_end":188,"column_start":25,"column_end":31},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1802},"to":{"krate":1,"index":3073}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/proxy.rs","byte_start":409774,"byte_end":409780,"line_start":199,"line_end":199,"column_start":21,"column_end":27},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":1802},"to":{"krate":1,"index":3084}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/traits.rs","byte_start":411091,"byte_end":411099,"line_start":43,"line_end":43,"column_start":19,"column_end":27},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":1145},"to":{"krate":1,"index":2505}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/traits.rs","byte_start":411164,"byte_end":411172,"line_start":50,"line_end":50,"column_start":20,"column_end":28},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":1145},"to":{"krate":1,"index":2536}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/traits.rs","byte_start":411674,"byte_end":411682,"line_start":69,"line_end":69,"column_start":54,"column_end":62},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":1145},"to":{"krate":1,"index":2500}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/traits.rs","byte_start":412535,"byte_end":412543,"line_start":115,"line_end":115,"column_start":55,"column_end":63},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":1145},"to":{"krate":1,"index":2500}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/traits.rs","byte_start":412792,"byte_end":412800,"line_start":129,"line_end":129,"column_start":59,"column_end":67},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":1145},"to":{"krate":1,"index":2500}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/traits.rs","byte_start":413368,"byte_end":413376,"line_start":149,"line_end":149,"column_start":55,"column_end":63},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":1145},"to":{"krate":1,"index":2547}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/traits.rs","byte_start":414401,"byte_end":414409,"line_start":198,"line_end":198,"column_start":56,"column_end":64},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":1145},"to":{"krate":1,"index":2547}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/traits.rs","byte_start":414667,"byte_end":414675,"line_start":211,"line_end":211,"column_start":60,"column_end":68},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":1145},"to":{"krate":1,"index":2547}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/traits.rs","byte_start":416052,"byte_end":416060,"line_start":289,"line_end":289,"column_start":22,"column_end":30},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":1145},"to":{"krate":1,"index":8894}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/traits.rs","byte_start":416332,"byte_end":416340,"line_start":305,"line_end":305,"column_start":24,"column_end":32},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":1145},"to":{"krate":1,"index":8901}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/traits.rs","byte_start":416603,"byte_end":416611,"line_start":318,"line_end":318,"column_start":24,"column_end":32},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":1145},"to":{"krate":1,"index":8911}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/traits.rs","byte_start":422265,"byte_end":422273,"line_start":476,"line_end":476,"column_start":21,"column_end":29},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":1145},"to":{"krate":1,"index":9100}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/traits.rs","byte_start":422470,"byte_end":422478,"line_start":490,"line_end":490,"column_start":28,"column_end":36},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":1145},"to":{"krate":1,"index":2849}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/slice/traits.rs","byte_start":422573,"byte_end":422581,"line_start":498,"line_end":498,"column_start":28,"column_end":36},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":1145},"to":{"krate":1,"index":2861}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/store.rs","byte_start":430665,"byte_end":430671,"line_start":85,"line_end":85,"column_start":27,"column_end":33},"kind":"SuperTrait","from":{"krate":0,"index":2152},"to":{"krate":0,"index":2129}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/store.rs","byte_start":430674,"byte_end":430679,"line_start":85,"line_end":85,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":2854},"to":{"krate":0,"index":2129}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/store.rs","byte_start":430682,"byte_end":430687,"line_start":85,"line_end":85,"column_start":44,"column_end":49},"kind":"SuperTrait","from":{"krate":1,"index":8894},"to":{"krate":0,"index":2129}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/store.rs","byte_start":433691,"byte_end":433695,"line_start":189,"line_end":189,"column_start":22,"column_end":26},"kind":{"Impl":{"id":150}},"from":{"krate":1,"index":3983},"to":{"krate":0,"index":2129}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/store.rs","byte_start":434213,"byte_end":434217,"line_start":210,"line_end":210,"column_start":26,"column_end":30},"kind":{"Impl":{"id":151}},"from":{"krate":1,"index":3983},"to":{"krate":0,"index":2152}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":440686,"byte_end":440687,"line_start":121,"line_end":121,"column_start":21,"column_end":22},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":2187},"to":{"krate":0,"index":2173}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":446087,"byte_end":446088,"line_start":345,"line_end":345,"column_start":26,"column_end":27},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":2224},"to":{"krate":0,"index":2215}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.18.5/src/view.rs","byte_start":446310,"byte_end":446311,"line_start":358,"line_end":358,"column_start":29,"column_end":30},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":2229},"to":{"krate":0,"index":2219}}]}
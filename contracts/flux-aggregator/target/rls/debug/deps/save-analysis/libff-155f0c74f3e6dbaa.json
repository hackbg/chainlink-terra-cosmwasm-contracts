{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0","program":"/home/denis/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","ff","--edition=2018","/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=155f0c74f3e6dbaa","-C","extra-filename=-155f0c74f3e6dbaa","--out-dir","/home/denis/Documents/coding/hack/chainlink-terra-cosmwasm-contracts/contracts/flux-aggregator/target/rls/debug/deps","-C","linker=x86_64-linux-gnu-gcc","-L","dependency=/home/denis/Documents/coding/hack/chainlink-terra-cosmwasm-contracts/contracts/flux-aggregator/target/rls/debug/deps","--extern","bitvec=/home/denis/Documents/coding/hack/chainlink-terra-cosmwasm-contracts/contracts/flux-aggregator/target/rls/debug/deps/libbitvec-12bab257f2ddc99f.rmeta","--extern","rand_core=/home/denis/Documents/coding/hack/chainlink-terra-cosmwasm-contracts/contracts/flux-aggregator/target/rls/debug/deps/librand_core-068c259e0461f3fc.rmeta","--extern","subtle=/home/denis/Documents/coding/hack/chainlink-terra-cosmwasm-contracts/contracts/flux-aggregator/target/rls/debug/deps/libsubtle-2fa1dd64c20bf922.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/denis/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":"/home/denis/Documents/coding/hack/chainlink-terra-cosmwasm-contracts/contracts/flux-aggregator/target/rls/debug/deps/libff-155f0c74f3e6dbaa.rmeta"},"prelude":{"crate_id":{"name":"ff","disambiguator":[2127753199578883533,6038891583446360077]},"crate_root":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src","external_crates":[{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[17044353007700780372,2918200604221815240]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[16381423150204372411,13484601183843768894]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[14897589902885170584,12420159477491062790]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","num":4,"id":{"name":"bitvec","disambiguator":[12843394802284785757,18049944760944282035]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","num":5,"id":{"name":"radium","disambiguator":[6170578490148099913,11385662121544404573]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","num":6,"id":{"name":"wyz","disambiguator":[14075336805396516078,8175419829704857618]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","num":7,"id":{"name":"funty","disambiguator":[18100334673436176153,12213058834818999383]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","num":8,"id":{"name":"rand_core","disambiguator":[15262903449215184178,1965405531746979256]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","num":9,"id":{"name":"std","disambiguator":[10283585399922801530,3113815793436671734]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","num":10,"id":{"name":"alloc","disambiguator":[4001252548733048619,17242313319436819942]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","num":11,"id":{"name":"libc","disambiguator":[5352780060018682353,5212160423076132458]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","num":12,"id":{"name":"unwind","disambiguator":[17147711338457548981,6939542792032145917]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","num":13,"id":{"name":"cfg_if","disambiguator":[2842547253401849104,13491194742958542480]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","num":14,"id":{"name":"hashbrown","disambiguator":[743652736616489669,1287960927584068912]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","num":15,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[16292678807852148020,5791869870655771082]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","num":16,"id":{"name":"rustc_demangle","disambiguator":[9404817637945341771,5464406936793117880]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","num":17,"id":{"name":"std_detect","disambiguator":[17888196348013287212,15275907588461469564]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","num":18,"id":{"name":"addr2line","disambiguator":[1276787031323089283,14926302036319710225]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","num":19,"id":{"name":"gimli","disambiguator":[3988411805964943353,12607049771423756955]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","num":20,"id":{"name":"object","disambiguator":[2565427104194196404,14362732384292144629]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","num":21,"id":{"name":"miniz_oxide","disambiguator":[11025534897254923617,14932093111515565771]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","num":22,"id":{"name":"adler","disambiguator":[6421578182970509025,18151391361782090522]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","num":23,"id":{"name":"panic_unwind","disambiguator":[6900026989174100552,1126691905217298232]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","num":24,"id":{"name":"getrandom","disambiguator":[17970065197973694116,6812716713039249432]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","num":25,"id":{"name":"cfg_if","disambiguator":[18066125678311518643,11358915899814267326]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","num":26,"id":{"name":"libc","disambiguator":[2521045491498281214,2123948796851982599]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","num":27,"id":{"name":"subtle","disambiguator":[13649248947348070893,10545555751276563020]}}],"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":0,"byte_end":7615,"line_start":1,"line_end":252,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":6561,"byte_end":6562,"line_start":217,"line_end":217,"column_start":27,"column_end":28},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":0,"byte_end":7615,"line_start":1,"line_end":252,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":36},{"krate":0,"index":39},{"krate":0,"index":42},{"krate":0,"index":45},{"krate":0,"index":48},{"krate":0,"index":51},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":61},{"krate":0,"index":80},{"krate":0,"index":96},{"krate":0,"index":97}],"decl_id":null,"docs":" This crate provides traits for working with finite fields.\n","sig":null,"attributes":[{"value":"/ This crate provides traits for working with finite fields.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":0,"byte_end":62,"line_start":1,"line_end":1,"column_start":1,"column_end":63}},{"value":"no_std","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":118,"byte_end":128,"line_start":4,"line_end":4,"column_start":1,"column_end":11}},{"value":"deny(intra_doc_link_resolution_failure)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":129,"byte_end":172,"line_start":5,"line_end":5,"column_start":1,"column_end":44}},{"value":"allow(unused_imports)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":173,"byte_end":198,"line_start":6,"line_end":6,"column_start":1,"column_end":26}}]},{"kind":"Trait","id":{"krate":0,"index":61},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":713,"byte_end":718,"line_start":26,"line_end":26,"column_start":11,"column_end":16},"name":"Field","qualname":"::Field","value":"Field: Sized + Eq + Copy + Clone + Default + Send + Sync + fmt::Debug + 'static +\nConditionallySelectable + Add<Output = Self> + Sub<Output = Self> + Mul<Output\n= Self> + Neg<Output = Self> + for<'a> Add<&'a Self, Output = Self> +\nfor<'a> Mul<&'a Self, Output = Self> + for<'a> Sub<&'a Self, Output = Self> +\nMulAssign + AddAssign + SubAssign + for<'a> MulAssign<&'a Self> +\nfor<'a> AddAssign<&'a Self> + for<'a> SubAssign<&'a Self>","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78}],"decl_id":null,"docs":" This trait represents an element of a field.\n","sig":null,"attributes":[{"value":"/ This trait represents an element of a field.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":654,"byte_end":702,"line_start":25,"line_end":25,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":1328,"byte_end":1334,"line_start":52,"line_end":52,"column_start":8,"column_end":14},"name":"random","qualname":"::Field::random","value":"pub fn random<impl RngCore: RngCore>(impl RngCore) -> Self","parent":{"krate":0,"index":61},"children":[],"decl_id":null,"docs":" Returns an element chosen uniformly at random using a user-provided RNG.\n","sig":null,"attributes":[{"value":"/ Returns an element chosen uniformly at random using a user-provided RNG.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":1244,"byte_end":1320,"line_start":51,"line_end":51,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":1441,"byte_end":1445,"line_start":55,"line_end":55,"column_start":8,"column_end":12},"name":"zero","qualname":"::Field::zero","value":"pub fn zero() -> Self","parent":{"krate":0,"index":61},"children":[],"decl_id":null,"docs":" Returns the zero element of the field, the additive identity.\n","sig":null,"attributes":[{"value":"/ Returns the zero element of the field, the additive identity.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":1368,"byte_end":1433,"line_start":54,"line_end":54,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":1540,"byte_end":1543,"line_start":58,"line_end":58,"column_start":8,"column_end":11},"name":"one","qualname":"::Field::one","value":"pub fn one() -> Self","parent":{"krate":0,"index":61},"children":[],"decl_id":null,"docs":" Returns the one element of the field, the multiplicative identity.\n","sig":null,"attributes":[{"value":"/ Returns the one element of the field, the multiplicative identity.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":1462,"byte_end":1532,"line_start":57,"line_end":57,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":1610,"byte_end":1617,"line_start":61,"line_end":61,"column_start":8,"column_end":15},"name":"is_zero","qualname":"::Field::is_zero","value":"pub fn is_zero(&Self) -> bool","parent":{"krate":0,"index":61},"children":[],"decl_id":null,"docs":" Returns true iff this element is zero.\n","sig":null,"attributes":[{"value":"/ Returns true iff this element is zero.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":1560,"byte_end":1602,"line_start":60,"line_end":60,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":1688,"byte_end":1694,"line_start":65,"line_end":65,"column_start":8,"column_end":14},"name":"square","qualname":"::Field::square","value":"pub fn square(&Self) -> Self","parent":{"krate":0,"index":61},"children":[],"decl_id":null,"docs":" Squares this element.\n","sig":null,"attributes":[{"value":"/ Squares this element.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":1639,"byte_end":1664,"line_start":63,"line_end":63,"column_start":5,"column_end":30}},{"value":"must_use","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":1669,"byte_end":1680,"line_start":64,"line_end":64,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":1763,"byte_end":1767,"line_start":69,"line_end":69,"column_start":8,"column_end":12},"name":"cube","qualname":"::Field::cube","value":"pub fn cube(&Self) -> Self","parent":{"krate":0,"index":61},"children":[],"decl_id":null,"docs":" Cubes this element.\n","sig":null,"attributes":[{"value":"/ Cubes this element.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":1716,"byte_end":1739,"line_start":67,"line_end":67,"column_start":5,"column_end":28}},{"value":"must_use","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":1744,"byte_end":1755,"line_start":68,"line_end":68,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":1874,"byte_end":1880,"line_start":75,"line_end":75,"column_start":8,"column_end":14},"name":"double","qualname":"::Field::double","value":"pub fn double(&Self) -> Self","parent":{"krate":0,"index":61},"children":[],"decl_id":null,"docs":" Doubles this element.\n","sig":null,"attributes":[{"value":"/ Doubles this element.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":1825,"byte_end":1850,"line_start":73,"line_end":73,"column_start":5,"column_end":30}},{"value":"must_use","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":1855,"byte_end":1866,"line_start":74,"line_end":74,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":2006,"byte_end":2012,"line_start":79,"line_end":79,"column_start":8,"column_end":14},"name":"invert","qualname":"::Field::invert","value":"pub fn invert(&Self) -> CtOption<Self>","parent":{"krate":0,"index":61},"children":[],"decl_id":null,"docs":" Computes the multiplicative inverse of this element,\n failing if the element is zero.\n","sig":null,"attributes":[{"value":"/ Computes the multiplicative inverse of this element,","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":1902,"byte_end":1958,"line_start":77,"line_end":77,"column_start":5,"column_end":61}},{"value":"/ failing if the element is zero.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":1963,"byte_end":1998,"line_start":78,"line_end":78,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":2137,"byte_end":2141,"line_start":83,"line_end":83,"column_start":8,"column_end":12},"name":"sqrt","qualname":"::Field::sqrt","value":"pub fn sqrt(&Self) -> CtOption<Self>","parent":{"krate":0,"index":61},"children":[],"decl_id":null,"docs":" Returns the square root of the field element, if it is\n quadratic residue.\n","sig":null,"attributes":[{"value":"/ Returns the square root of the field element, if it is","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":2044,"byte_end":2102,"line_start":81,"line_end":81,"column_start":5,"column_end":63}},{"value":"/ quadratic residue.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":2107,"byte_end":2129,"line_start":82,"line_end":82,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":2439,"byte_end":2450,"line_start":90,"line_end":90,"column_start":8,"column_end":19},"name":"pow_vartime","qualname":"::Field::pow_vartime","value":"pub fn pow_vartime<S: AsRef<[u64]>>(&Self, S) -> Self","parent":{"krate":0,"index":61},"children":[],"decl_id":null,"docs":" Exponentiates `self` by `exp`, where `exp` is a little-endian order\n integer exponent.","sig":null,"attributes":[{"value":"/ Exponentiates `self` by `exp`, where `exp` is a little-endian order","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":2173,"byte_end":2244,"line_start":85,"line_end":85,"column_start":5,"column_end":76}},{"value":"/ integer exponent.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":2249,"byte_end":2270,"line_start":86,"line_end":86,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":2275,"byte_end":2278,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ **This operation is variable time with respect to the exponent.** If the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":2283,"byte_end":2359,"line_start":88,"line_end":88,"column_start":5,"column_end":81}},{"value":"/ exponent is fixed, this operation is effectively constant time.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":2364,"byte_end":2431,"line_start":89,"line_end":89,"column_start":5,"column_end":72}}]},{"kind":"Trait","id":{"krate":0,"index":80},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":2854,"byte_end":2864,"line_start":107,"line_end":107,"column_start":11,"column_end":21},"name":"PrimeField","qualname":"::PrimeField","value":"PrimeField: Field + From<u64>","parent":null,"children":[{"krate":0,"index":81},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95}],"decl_id":null,"docs":" This represents an element of a prime field.\n","sig":null,"attributes":[{"value":"/ This represents an element of a prime field.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":2795,"byte_end":2843,"line_start":106,"line_end":106,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":81},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":2992,"byte_end":2996,"line_start":110,"line_end":110,"column_start":10,"column_end":14},"name":"Repr","qualname":"::PrimeField::Repr","value":"type Repr: Default + AsRef<[u8]> + AsMut<[u8]> + From<Self> + for<'r> From<&'r Self>;","parent":{"krate":0,"index":80},"children":[],"decl_id":null,"docs":" The prime field can be converted back and forth into this binary\n representation.\n","sig":null,"attributes":[{"value":"/ The prime field can be converted back and forth into this binary","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":2890,"byte_end":2958,"line_start":108,"line_end":108,"column_start":5,"column_end":73}},{"value":"/ representation.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":2963,"byte_end":2982,"line_start":109,"line_end":109,"column_start":5,"column_end":24}}]},{"kind":"Type","id":{"krate":0,"index":83},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":3160,"byte_end":3168,"line_start":113,"line_end":113,"column_start":10,"column_end":18},"name":"ReprBits","qualname":"::PrimeField::ReprBits","value":"type ReprBits: BitView + Send + Sync;","parent":{"krate":0,"index":80},"children":[],"decl_id":null,"docs":" The backing store for a bit representation of a prime field element.\n","sig":null,"attributes":[{"value":"/ The backing store for a bit representation of a prime field element.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":3078,"byte_end":3150,"line_start":112,"line_end":112,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":3347,"byte_end":3355,"line_start":117,"line_end":117,"column_start":8,"column_end":16},"name":"from_str","qualname":"::PrimeField::from_str","value":"pub fn from_str(&str) -> Option<Self>","parent":{"krate":0,"index":80},"children":[],"decl_id":null,"docs":" Interpret a string of numbers as a (congruent) prime field element.\n Does not accept unnecessary leading zeroes or a blank string.\n","sig":null,"attributes":[{"value":"/ Interpret a string of numbers as a (congruent) prime field element.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":3198,"byte_end":3269,"line_start":115,"line_end":115,"column_start":5,"column_end":76}},{"value":"/ Does not accept unnecessary leading zeroes or a blank string.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":3274,"byte_end":3339,"line_start":116,"line_end":116,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":4525,"byte_end":4534,"line_start":161,"line_end":161,"column_start":8,"column_end":17},"name":"from_repr","qualname":"::PrimeField::from_repr","value":"pub fn from_repr(Self::Repr) -> Option<Self>","parent":{"krate":0,"index":80},"children":[],"decl_id":null,"docs":" Attempts to convert a byte representation of a field element into an element of\n this prime field, failing if the input is not canonical (is not smaller than the\n field's modulus).","sig":null,"attributes":[{"value":"/ Attempts to convert a byte representation of a field element into an element of","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":4182,"byte_end":4265,"line_start":155,"line_end":155,"column_start":5,"column_end":88}},{"value":"/ this prime field, failing if the input is not canonical (is not smaller than the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":4270,"byte_end":4354,"line_start":156,"line_end":156,"column_start":5,"column_end":89}},{"value":"/ field's modulus).","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":4359,"byte_end":4380,"line_start":157,"line_end":157,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":4385,"byte_end":4388,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ The byte representation is interpreted with the same endianness as elements","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":4393,"byte_end":4472,"line_start":159,"line_end":159,"column_start":5,"column_end":84}},{"value":"/ returned by [`PrimeField::to_repr`].","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":4477,"byte_end":4517,"line_start":160,"line_end":160,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":4843,"byte_end":4850,"line_start":168,"line_end":168,"column_start":8,"column_end":15},"name":"to_repr","qualname":"::PrimeField::to_repr","value":"pub fn to_repr(&Self) -> Self::Repr","parent":{"krate":0,"index":80},"children":[],"decl_id":null,"docs":" Converts an element of the prime field into the standard byte representation for\n this field.","sig":null,"attributes":[{"value":"/ Converts an element of the prime field into the standard byte representation for","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":4572,"byte_end":4656,"line_start":163,"line_end":163,"column_start":5,"column_end":89}},{"value":"/ this field.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":4661,"byte_end":4676,"line_start":164,"line_end":164,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":4681,"byte_end":4684,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ The endianness of the byte representation is implementation-specific. Generic","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":4689,"byte_end":4770,"line_start":166,"line_end":166,"column_start":5,"column_end":86}},{"value":"/ encodings of field elements should be treated as opaque.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":4775,"byte_end":4835,"line_start":167,"line_end":167,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":4967,"byte_end":4977,"line_start":171,"line_end":171,"column_start":8,"column_end":18},"name":"to_le_bits","qualname":"::PrimeField::to_le_bits","value":"pub fn to_le_bits(&Self) -> BitArray<Lsb0, Self::ReprBits>","parent":{"krate":0,"index":80},"children":[],"decl_id":null,"docs":" Converts an element of the prime field into a little-endian sequence of bits.\n","sig":null,"attributes":[{"value":"/ Converts an element of the prime field into a little-endian sequence of bits.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":4878,"byte_end":4959,"line_start":170,"line_end":170,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":5074,"byte_end":5080,"line_start":174,"line_end":174,"column_start":8,"column_end":14},"name":"is_odd","qualname":"::PrimeField::is_odd","value":"pub fn is_odd(&Self) -> bool","parent":{"krate":0,"index":80},"children":[],"decl_id":null,"docs":" Returns true iff this element is odd.\n","sig":null,"attributes":[{"value":"/ Returns true iff this element is odd.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":5025,"byte_end":5066,"line_start":173,"line_end":173,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":5174,"byte_end":5181,"line_start":178,"line_end":178,"column_start":8,"column_end":15},"name":"is_even","qualname":"::PrimeField::is_even","value":"pub fn is_even(&Self) -> bool","parent":{"krate":0,"index":80},"children":[],"decl_id":null,"docs":" Returns true iff this element is even.\n","sig":null,"attributes":[{"value":"/ Returns true iff this element is even.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":5102,"byte_end":5144,"line_start":176,"line_end":176,"column_start":5,"column_end":47}},{"value":"inline(always)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":5149,"byte_end":5166,"line_start":177,"line_end":177,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":5327,"byte_end":5339,"line_start":183,"line_end":183,"column_start":8,"column_end":20},"name":"char_le_bits","qualname":"::PrimeField::char_le_bits","value":"pub fn char_le_bits() -> BitArray<Lsb0, Self::ReprBits>","parent":{"krate":0,"index":80},"children":[],"decl_id":null,"docs":" Returns the bits of the field characteristic (the modulus) in little-endian order.\n","sig":null,"attributes":[{"value":"/ Returns the bits of the field characteristic (the modulus) in little-endian order.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":5233,"byte_end":5319,"line_start":182,"line_end":182,"column_start":5,"column_end":91}}]},{"kind":"Const","id":{"krate":0,"index":91},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":5460,"byte_end":5468,"line_start":186,"line_end":186,"column_start":11,"column_end":19},"name":"NUM_BITS","qualname":"::PrimeField::NUM_BITS","value":"u32","parent":{"krate":0,"index":80},"children":[],"decl_id":null,"docs":" How many bits are needed to represent an element of this field.\n","sig":null,"attributes":[{"value":"/ How many bits are needed to represent an element of this field.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":5382,"byte_end":5449,"line_start":185,"line_end":185,"column_start":5,"column_end":72}}]},{"kind":"Const","id":{"krate":0,"index":92},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":5622,"byte_end":5630,"line_start":191,"line_end":191,"column_start":11,"column_end":19},"name":"CAPACITY","qualname":"::PrimeField::CAPACITY","value":"u32","parent":{"krate":0,"index":80},"children":[],"decl_id":null,"docs":" How many bits of information can be reliably stored in the field element.","sig":null,"attributes":[{"value":"/ How many bits of information can be reliably stored in the field element.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":5480,"byte_end":5557,"line_start":188,"line_end":188,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":5562,"byte_end":5565,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ This is usually `Self::NUM_BITS - 1`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":5570,"byte_end":5611,"line_start":190,"line_end":190,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":6054,"byte_end":6078,"line_start":202,"line_end":202,"column_start":8,"column_end":32},"name":"multiplicative_generator","qualname":"::PrimeField::multiplicative_generator","value":"pub fn multiplicative_generator() -> Self","parent":{"krate":0,"index":80},"children":[],"decl_id":null,"docs":" Returns a fixed multiplicative generator of `modulus - 1` order. This element must\n also be a quadratic nonresidue.","sig":null,"attributes":[{"value":"/ Returns a fixed multiplicative generator of `modulus - 1` order. This element must","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":5642,"byte_end":5728,"line_start":193,"line_end":193,"column_start":5,"column_end":91}},{"value":"/ also be a quadratic nonresidue.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":5733,"byte_end":5768,"line_start":194,"line_end":194,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":5773,"byte_end":5776,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ It can be calculated using [SageMath] as `GF(modulus).primitive_element()`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":5781,"byte_end":5860,"line_start":196,"line_end":196,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":5865,"byte_end":5868,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ Implementations of this method MUST ensure that this is the generator used to","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":5873,"byte_end":5954,"line_start":198,"line_end":198,"column_start":5,"column_end":86}},{"value":"/ derive `Self::root_of_unity`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":5959,"byte_end":5992,"line_start":199,"line_end":199,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":5997,"byte_end":6000,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ [SageMath]: https://www.sagemath.org/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":6005,"byte_end":6046,"line_start":201,"line_end":201,"column_start":5,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":94},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":6308,"byte_end":6309,"line_start":208,"line_end":208,"column_start":11,"column_end":12},"name":"S","qualname":"::PrimeField::S","value":"u32","parent":{"krate":0,"index":80},"children":[],"decl_id":null,"docs":" An integer `s` satisfying the equation `2^s * t = modulus - 1` with `t` odd.","sig":null,"attributes":[{"value":"/ An integer `s` satisfying the equation `2^s * t = modulus - 1` with `t` odd.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":6095,"byte_end":6175,"line_start":204,"line_end":204,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":6180,"byte_end":6183,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ This is the number of leading zero bits in the little-endian bit representation of","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":6188,"byte_end":6274,"line_start":206,"line_end":206,"column_start":5,"column_end":91}},{"value":"/ `modulus - 1`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":6279,"byte_end":6297,"line_start":207,"line_end":207,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":6507,"byte_end":6520,"line_start":214,"line_end":214,"column_start":8,"column_end":21},"name":"root_of_unity","qualname":"::PrimeField::root_of_unity","value":"pub fn root_of_unity() -> Self","parent":{"krate":0,"index":80},"children":[],"decl_id":null,"docs":" Returns the `2^s` root of unity.","sig":null,"attributes":[{"value":"/ Returns the `2^s` root of unity.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":6321,"byte_end":6357,"line_start":210,"line_end":210,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":6362,"byte_end":6365,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ It can be calculated by exponentiating `Self::multiplicative_generator` by `t`,","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":6370,"byte_end":6453,"line_start":212,"line_end":212,"column_start":5,"column_end":88}},{"value":"/ where `t = (modulus - 1) >> Self::S`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":6458,"byte_end":6499,"line_start":213,"line_end":213,"column_start":5,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":98},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":6710,"byte_end":6713,"line_start":223,"line_end":223,"column_start":12,"column_end":15},"name":"sbb","qualname":"::arith_impl::sbb","value":"pub fn sbb(u64, u64, &mut u64) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Calculate a - b - borrow, returning the result and modifying\n the borrow value.\n","sig":null,"attributes":[{"value":"/ Calculate a - b - borrow, returning the result and modifying","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":6586,"byte_end":6650,"line_start":220,"line_end":220,"column_start":5,"column_end":69}},{"value":"/ the borrow value.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":6655,"byte_end":6676,"line_start":221,"line_end":221,"column_start":5,"column_end":26}},{"value":"inline(always)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":6681,"byte_end":6698,"line_start":222,"line_end":222,"column_start":5,"column_end":22}}]},{"kind":"Function","id":{"krate":0,"index":99},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":7049,"byte_end":7052,"line_start":234,"line_end":234,"column_start":12,"column_end":15},"name":"adc","qualname":"::arith_impl::adc","value":"pub fn adc(u64, u64, &mut u64) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Calculate a + b + carry, returning the sum and modifying the\n carry value.\n","sig":null,"attributes":[{"value":"/ Calculate a + b + carry, returning the sum and modifying the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":6930,"byte_end":6994,"line_start":231,"line_end":231,"column_start":5,"column_end":69}},{"value":"/ carry value.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":6999,"byte_end":7015,"line_start":232,"line_end":232,"column_start":5,"column_end":21}},{"value":"inline(always)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":7020,"byte_end":7037,"line_start":233,"line_end":233,"column_start":5,"column_end":22}}]},{"kind":"Function","id":{"krate":0,"index":100},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":7397,"byte_end":7411,"line_start":245,"line_end":245,"column_start":12,"column_end":26},"name":"mac_with_carry","qualname":"::arith_impl::mac_with_carry","value":"pub fn mac_with_carry(u64, u64, u64, &mut u64) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Calculate a + (b * c) + carry, returning the least significant digit\n and setting carry to the most significant digit.\n","sig":null,"attributes":[{"value":"/ Calculate a + (b * c) + carry, returning the least significant digit","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":7234,"byte_end":7306,"line_start":242,"line_end":242,"column_start":5,"column_end":77}},{"value":"/ and setting carry to the most significant digit.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":7311,"byte_end":7363,"line_start":243,"line_end":243,"column_start":5,"column_end":57}},{"value":"inline(always)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":7368,"byte_end":7385,"line_start":244,"line_end":244,"column_start":5,"column_end":22}}]}],"impls":[],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":724,"byte_end":729,"line_start":27,"line_end":27,"column_start":5,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":2854},"to":{"krate":0,"index":61}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":736,"byte_end":738,"line_start":28,"line_end":28,"column_start":7,"column_end":9},"kind":"SuperTrait","from":{"krate":1,"index":2505},"to":{"krate":0,"index":61}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":745,"byte_end":749,"line_start":29,"line_end":29,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2859},"to":{"krate":0,"index":61}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":756,"byte_end":761,"line_start":30,"line_end":30,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":1,"index":2470},"to":{"krate":0,"index":61}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":768,"byte_end":775,"line_start":31,"line_end":31,"column_start":7,"column_end":14},"kind":"SuperTrait","from":{"krate":1,"index":2827},"to":{"krate":0,"index":61}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":782,"byte_end":786,"line_start":32,"line_end":32,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2849},"to":{"krate":0,"index":61}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":793,"byte_end":797,"line_start":33,"line_end":33,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2861},"to":{"krate":0,"index":61}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":809,"byte_end":814,"line_start":34,"line_end":34,"column_start":12,"column_end":17},"kind":"SuperTrait","from":{"krate":1,"index":8894},"to":{"krate":0,"index":61}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":835,"byte_end":858,"line_start":36,"line_end":36,"column_start":7,"column_end":30},"kind":"SuperTrait","from":{"krate":27,"index":66},"to":{"krate":0,"index":61}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":865,"byte_end":868,"line_start":37,"line_end":37,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":2916},"to":{"krate":0,"index":61}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":890,"byte_end":893,"line_start":38,"line_end":38,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":2921},"to":{"krate":0,"index":61}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":915,"byte_end":918,"line_start":39,"line_end":39,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":2926},"to":{"krate":0,"index":61}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":940,"byte_end":943,"line_start":40,"line_end":40,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":2943},"to":{"krate":0,"index":61}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":973,"byte_end":976,"line_start":41,"line_end":41,"column_start":15,"column_end":18},"kind":"SuperTrait","from":{"krate":1,"index":2916},"to":{"krate":0,"index":61}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":1016,"byte_end":1019,"line_start":42,"line_end":42,"column_start":15,"column_end":18},"kind":"SuperTrait","from":{"krate":1,"index":2926},"to":{"krate":0,"index":61}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":1059,"byte_end":1062,"line_start":43,"line_end":43,"column_start":15,"column_end":18},"kind":"SuperTrait","from":{"krate":1,"index":2921},"to":{"krate":0,"index":61}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":1094,"byte_end":1103,"line_start":44,"line_end":44,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":1,"index":2955},"to":{"krate":0,"index":61}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":1110,"byte_end":1119,"line_start":45,"line_end":45,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":1,"index":2947},"to":{"krate":0,"index":61}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":1126,"byte_end":1135,"line_start":46,"line_end":46,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":1,"index":2951},"to":{"krate":0,"index":61}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":1150,"byte_end":1159,"line_start":47,"line_end":47,"column_start":15,"column_end":24},"kind":"SuperTrait","from":{"krate":1,"index":2955},"to":{"krate":0,"index":61}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":1184,"byte_end":1193,"line_start":48,"line_end":48,"column_start":15,"column_end":24},"kind":"SuperTrait","from":{"krate":1,"index":2947},"to":{"krate":0,"index":61}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":1218,"byte_end":1227,"line_start":49,"line_end":49,"column_start":15,"column_end":24},"kind":"SuperTrait","from":{"krate":1,"index":2951},"to":{"krate":0,"index":61}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":2866,"byte_end":2871,"line_start":107,"line_end":107,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":0,"index":61},"to":{"krate":0,"index":80}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/ff-0.8.0/src/lib.rs","byte_start":2874,"byte_end":2878,"line_start":107,"line_end":107,"column_start":31,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":2755},"to":{"krate":0,"index":80}}]}
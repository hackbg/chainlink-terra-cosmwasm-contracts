{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1","program":"/home/denis/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","rand_core","--edition=2018","/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"getrandom\"","--cfg","feature=\"std\"","-C","metadata=068c259e0461f3fc","-C","extra-filename=-068c259e0461f3fc","--out-dir","/home/denis/Documents/coding/hack/chainlink-terra-cosmwasm-contracts/contracts/flux-aggregator/target/rls/debug/deps","-C","linker=x86_64-linux-gnu-gcc","-L","dependency=/home/denis/Documents/coding/hack/chainlink-terra-cosmwasm-contracts/contracts/flux-aggregator/target/rls/debug/deps","--extern","getrandom=/home/denis/Documents/coding/hack/chainlink-terra-cosmwasm-contracts/contracts/flux-aggregator/target/rls/debug/deps/libgetrandom-7555de48a1b18a60.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/denis/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":"/home/denis/Documents/coding/hack/chainlink-terra-cosmwasm-contracts/contracts/flux-aggregator/target/rls/debug/deps/librand_core-068c259e0461f3fc.rmeta"},"prelude":{"crate_id":{"name":"rand_core","disambiguator":[15262903449215184178,1965405531746979256]},"crate_root":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src","external_crates":[{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[10283585399922801530,3113815793436671734]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[17044353007700780372,2918200604221815240]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[16381423150204372411,13484601183843768894]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[14897589902885170584,12420159477491062790]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4001252548733048619,17242313319436819942]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[5352780060018682353,5212160423076132458]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[17147711338457548981,6939542792032145917]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[2842547253401849104,13491194742958542480]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[743652736616489669,1287960927584068912]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[16292678807852148020,5791869870655771082]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[9404817637945341771,5464406936793117880]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[17888196348013287212,15275907588461469564]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[1276787031323089283,14926302036319710225]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[3988411805964943353,12607049771423756955]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[2565427104194196404,14362732384292144629]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","num":16,"id":{"name":"miniz_oxide","disambiguator":[11025534897254923617,14932093111515565771]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","num":17,"id":{"name":"adler","disambiguator":[6421578182970509025,18151391361782090522]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","num":18,"id":{"name":"panic_unwind","disambiguator":[6900026989174100552,1126691905217298232]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/os.rs","num":19,"id":{"name":"getrandom","disambiguator":[17970065197973694116,6812716713039249432]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/os.rs","num":20,"id":{"name":"cfg_if","disambiguator":[18066125678311518643,11358915899814267326]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/os.rs","num":21,"id":{"name":"libc","disambiguator":[2521045491498281214,2123948796851982599]}}],"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":408,"byte_end":19375,"line_start":10,"line_end":492,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":25},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":1842,"byte_end":1847,"line_start":50,"line_end":50,"column_start":16,"column_end":21},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":255},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":1889,"byte_end":1894,"line_start":51,"line_end":51,"column_start":41,"column_end":46},"alias_span":null,"name":"OsRng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":256},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":1889,"byte_end":1894,"line_start":51,"line_end":51,"column_start":41,"column_end":46},"alias_span":null,"name":"OsRng","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":408,"byte_end":19375,"line_start":10,"line_end":492,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":52},{"krate":0,"index":134},{"krate":0,"index":165},{"krate":0,"index":172},{"krate":0,"index":195},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":210},{"krate":0,"index":217},{"krate":0,"index":223},{"krate":0,"index":225},{"krate":0,"index":228}],"decl_id":null,"docs":" Random number generation traits","sig":null,"attributes":[{"value":"/ Random number generation traits","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":408,"byte_end":443,"line_start":10,"line_end":10,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":444,"byte_end":447,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This crate is mainly of interest to crates publishing implementations of","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":448,"byte_end":524,"line_start":12,"line_end":12,"column_start":1,"column_end":77}},{"value":"/ [`RngCore`]. Other users are encouraged to use the [`rand`] crate instead","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":525,"byte_end":602,"line_start":13,"line_end":13,"column_start":1,"column_end":78}},{"value":"/ which re-exports the main traits and error types.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":603,"byte_end":656,"line_start":14,"line_end":14,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":657,"byte_end":660,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ [`RngCore`] is the core trait implemented by algorithmic pseudo-random number","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":661,"byte_end":742,"line_start":16,"line_end":16,"column_start":1,"column_end":82}},{"value":"/ generators and external random-number sources.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":743,"byte_end":793,"line_start":17,"line_end":17,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":794,"byte_end":797,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ [`SeedableRng`] is an extension trait for construction from fixed seeds and","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":798,"byte_end":877,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ other random number generators.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":878,"byte_end":913,"line_start":20,"line_end":20,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":914,"byte_end":917,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ [`Error`] is provided for error-handling. It is safe to use in `no_std`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":918,"byte_end":993,"line_start":22,"line_end":22,"column_start":1,"column_end":76}},{"value":"/ environments.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":994,"byte_end":1011,"line_start":23,"line_end":23,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":1012,"byte_end":1015,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ The [`impls`] and [`le`] sub-modules include a few small functions to assist","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":1016,"byte_end":1096,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/ implementation of [`RngCore`].","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":1097,"byte_end":1131,"line_start":26,"line_end":26,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":1132,"byte_end":1135,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ [`rand`]: https://docs.rs/rand","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":1136,"byte_end":1170,"line_start":28,"line_end":28,"column_start":1,"column_end":35}},{"value":"deny(missing_docs)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":1387,"byte_end":1409,"line_start":34,"line_end":34,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":1410,"byte_end":1449,"line_start":35,"line_end":35,"column_start":1,"column_end":40}},{"value":"allow(clippy :: unreadable_literal)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":1512,"byte_end":1549,"line_start":38,"line_end":38,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":25},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":20061,"byte_end":20066,"line_start":20,"line_end":20,"column_start":12,"column_end":17},"name":"Error","qualname":"::error::Error","value":"Error {  }","parent":null,"children":[{"krate":0,"index":26}],"decl_id":null,"docs":" Error type of random number generators","sig":null,"attributes":[{"value":"/ Error type of random number generators","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":19794,"byte_end":19836,"line_start":15,"line_end":15,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":19837,"byte_end":19840,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ In order to be compatible with `std` and `no_std`, this type has two","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":19841,"byte_end":19913,"line_start":17,"line_end":17,"column_start":1,"column_end":73}},{"value":"/ possible implementations: with `std` a boxed `Error` trait object is stored,","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":19914,"byte_end":19994,"line_start":18,"line_end":18,"column_start":1,"column_end":81}},{"value":"/ while with `no_std` we merely store an error code.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":19995,"byte_end":20049,"line_start":19,"line_end":19,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":20490,"byte_end":20493,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"new","qualname":"<Error>::new","value":"pub fn new<E>(E) -> Self where\nE: Into<Box<dyn std::error::Error + Send + Sync + 'static>>","parent":null,"children":[],"decl_id":null,"docs":" Construct from any type supporting `std::error::Error`\n \n Available only when configured with `std`.\n \n See also `From<NonZeroU32>`, which is available with and without `std`.\n","sig":null,"attributes":[{"value":"/ Construct from any type supporting `std::error::Error`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":20231,"byte_end":20289,"line_start":28,"line_end":28,"column_start":5,"column_end":63}},{"value":"/ ","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":20294,"byte_end":20298,"line_start":29,"line_end":29,"column_start":5,"column_end":9}},{"value":"/ Available only when configured with `std`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":20303,"byte_end":20349,"line_start":30,"line_end":30,"column_start":5,"column_end":51}},{"value":"/ ","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":20354,"byte_end":20358,"line_start":31,"line_end":31,"column_start":5,"column_end":9}},{"value":"/ See also `From<NonZeroU32>`, which is available with and without `std`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":20363,"byte_end":20438,"line_start":32,"line_end":32,"column_start":5,"column_end":80}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":20443,"byte_end":20464,"line_start":33,"line_end":33,"column_start":5,"column_end":26}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":20469,"byte_end":20478,"line_start":34,"line_end":34,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":20883,"byte_end":20888,"line_start":47,"line_end":47,"column_start":12,"column_end":17},"name":"inner","qualname":"<Error>::inner","value":"pub fn inner(&Self) -> &dyn std::error::Error + Send + Sync + 'static","parent":null,"children":[],"decl_id":null,"docs":" Reference the inner error (`std` only)\n \n When configured with `std`, this is a trivial operation and never\n panics. Without `std`, this method is simply unavailable.\n","sig":null,"attributes":[{"value":"/ Reference the inner error (`std` only)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":20640,"byte_end":20682,"line_start":41,"line_end":41,"column_start":5,"column_end":47}},{"value":"/ ","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":20687,"byte_end":20691,"line_start":42,"line_end":42,"column_start":5,"column_end":9}},{"value":"/ When configured with `std`, this is a trivial operation and never","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":20696,"byte_end":20765,"line_start":43,"line_end":43,"column_start":5,"column_end":74}},{"value":"/ panics. Without `std`, this method is simply unavailable.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":20770,"byte_end":20831,"line_start":44,"line_end":44,"column_start":5,"column_end":66}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":20836,"byte_end":20857,"line_start":45,"line_end":45,"column_start":5,"column_end":26}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":20862,"byte_end":20871,"line_start":46,"line_end":46,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":21226,"byte_end":21236,"line_start":57,"line_end":57,"column_start":12,"column_end":22},"name":"take_inner","qualname":"<Error>::take_inner","value":"pub fn take_inner(Self) -> Box<dyn std::error::Error + Send + Sync + 'static>","parent":null,"children":[],"decl_id":null,"docs":" Unwrap the inner error (`std` only)\n \n When configured with `std`, this is a trivial operation and never\n panics. Without `std`, this method is simply unavailable.\n","sig":null,"attributes":[{"value":"/ Unwrap the inner error (`std` only)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":20986,"byte_end":21025,"line_start":51,"line_end":51,"column_start":5,"column_end":44}},{"value":"/ ","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":21030,"byte_end":21034,"line_start":52,"line_end":52,"column_start":5,"column_end":9}},{"value":"/ When configured with `std`, this is a trivial operation and never","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":21039,"byte_end":21108,"line_start":53,"line_end":53,"column_start":5,"column_end":74}},{"value":"/ panics. Without `std`, this method is simply unavailable.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":21113,"byte_end":21174,"line_start":54,"line_end":54,"column_start":5,"column_end":66}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":21179,"byte_end":21200,"line_start":55,"line_end":55,"column_start":5,"column_end":26}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":21205,"byte_end":21214,"line_start":56,"line_end":56,"column_start":5,"column_end":14}}]},{"kind":"Const","id":{"krate":0,"index":32},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":21561,"byte_end":21575,"line_start":64,"line_end":64,"column_start":15,"column_end":29},"name":"INTERNAL_START","qualname":"::error::Error::INTERNAL_START","value":"u32","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Codes below this point represent OS Errors (i.e. positive i32 values).\n Codes at or above this point, but below [`Error::CUSTOM_START`] are\n reserved for use by the `rand` and `getrandom` crates.\n","sig":null,"attributes":[{"value":"/ Codes below this point represent OS Errors (i.e. positive i32 values).","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":21333,"byte_end":21407,"line_start":61,"line_end":61,"column_start":5,"column_end":79}},{"value":"/ Codes at or above this point, but below [`Error::CUSTOM_START`] are","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":21412,"byte_end":21483,"line_start":62,"line_end":62,"column_start":5,"column_end":76}},{"value":"/ reserved for use by the `rand` and `getrandom` crates.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":21488,"byte_end":21546,"line_start":63,"line_end":63,"column_start":5,"column_end":63}}]},{"kind":"Const","id":{"krate":0,"index":33},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":21708,"byte_end":21720,"line_start":68,"line_end":68,"column_start":15,"column_end":27},"name":"CUSTOM_START","qualname":"::error::Error::CUSTOM_START","value":"u32","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Codes at or above this point can be used by users to define their own\n custom errors.\n","sig":null,"attributes":[{"value":"/ Codes at or above this point can be used by users to define their own","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":21597,"byte_end":21670,"line_start":66,"line_end":66,"column_start":5,"column_end":78}},{"value":"/ custom errors.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":21675,"byte_end":21693,"line_start":67,"line_end":67,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":22088,"byte_end":22100,"line_start":76,"line_end":76,"column_start":12,"column_end":24},"name":"raw_os_error","qualname":"<Error>::raw_os_error","value":"pub fn raw_os_error(&Self) -> Option<i32>","parent":null,"children":[],"decl_id":null,"docs":" Extract the raw OS error code (if this error came from the OS)","sig":null,"attributes":[{"value":"/ Extract the raw OS error code (if this error came from the OS)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":21756,"byte_end":21822,"line_start":70,"line_end":70,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":21827,"byte_end":21830,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ This method is identical to `std::io::Error::raw_os_error()`, except","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":21835,"byte_end":21907,"line_start":72,"line_end":72,"column_start":5,"column_end":77}},{"value":"/ that it works in `no_std` contexts. If this method returns `None`, the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":21912,"byte_end":21986,"line_start":73,"line_end":73,"column_start":5,"column_end":79}},{"value":"/ error value can still be formatted via the `Diplay` implementation.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":21991,"byte_end":22062,"line_start":74,"line_end":74,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":22067,"byte_end":22076,"line_start":75,"line_end":75,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":22769,"byte_end":22773,"line_start":95,"line_end":95,"column_start":12,"column_end":16},"name":"code","qualname":"<Error>::code","value":"pub fn code(&Self) -> Option<NonZeroU32>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the error code, if any.\n \n If this `Error` was constructed via `From<NonZeroU32>`, then this method\n will return this `NonZeroU32` code (for `no_std` this is always the\n case). Otherwise, this method will return `None`.\n","sig":null,"attributes":[{"value":"/ Retrieve the error code, if any.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":22483,"byte_end":22519,"line_start":89,"line_end":89,"column_start":5,"column_end":41}},{"value":"/ ","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":22524,"byte_end":22528,"line_start":90,"line_end":90,"column_start":5,"column_end":9}},{"value":"/ If this `Error` was constructed via `From<NonZeroU32>`, then this method","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":22533,"byte_end":22609,"line_start":91,"line_end":91,"column_start":5,"column_end":81}},{"value":"/ will return this `NonZeroU32` code (for `no_std` this is always the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":22614,"byte_end":22685,"line_start":92,"line_end":92,"column_start":5,"column_end":76}},{"value":"/ case). Otherwise, this method will return `None`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":22690,"byte_end":22743,"line_start":93,"line_end":93,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":22748,"byte_end":22757,"line_start":94,"line_end":94,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":52},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"block","qualname":"::block","value":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","parent":null,"children":[{"krate":0,"index":53},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":60},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":80},{"krate":0,"index":83},{"krate":0,"index":238},{"krate":0,"index":243},{"krate":0,"index":87},{"krate":0,"index":90},{"krate":0,"index":96},{"krate":0,"index":103},{"krate":0,"index":246},{"krate":0,"index":252},{"krate":0,"index":110},{"krate":0,"index":113},{"krate":0,"index":119},{"krate":0,"index":125},{"krate":0,"index":132}],"decl_id":null,"docs":" The `BlockRngCore` trait and implementation helpers","sig":null,"attributes":[{"value":"/ The `BlockRngCore` trait and implementation helpers","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":25581,"byte_end":25636,"line_start":9,"line_end":9,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":25637,"byte_end":25640,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ The [`BlockRngCore`] trait exists to assist in the implementation of RNGs","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":25641,"byte_end":25718,"line_start":11,"line_end":11,"column_start":1,"column_end":78}},{"value":"/ which generate a block of data in a cache instead of returning generated","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":25719,"byte_end":25795,"line_start":12,"line_end":12,"column_start":1,"column_end":77}},{"value":"/ values directly.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":25796,"byte_end":25816,"line_start":13,"line_end":13,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":25817,"byte_end":25820,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ Usage of this trait is optional, but provides two advantages:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":25821,"byte_end":25886,"line_start":15,"line_end":15,"column_start":1,"column_end":66}},{"value":"/ implementations only need to concern themselves with generation of the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":25887,"byte_end":25961,"line_start":16,"line_end":16,"column_start":1,"column_end":75}},{"value":"/ block, not the various [`RngCore`] methods (especially [`fill_bytes`], where","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":25962,"byte_end":26042,"line_start":17,"line_end":17,"column_start":1,"column_end":81}},{"value":"/ the optimal implementations are not trivial), and this allows","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":26043,"byte_end":26108,"line_start":18,"line_end":18,"column_start":1,"column_end":66}},{"value":"/ `ReseedingRng` (see [`rand`](https://docs.rs/rand) crate) perform periodic","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":26109,"byte_end":26187,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/ reseeding with very low overhead.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":26188,"byte_end":26225,"line_start":20,"line_end":20,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":26226,"byte_end":26229,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":26230,"byte_end":26243,"line_start":22,"line_end":22,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":26244,"byte_end":26247,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ```norun","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":26248,"byte_end":26260,"line_start":24,"line_end":24,"column_start":1,"column_end":13}},{"value":"/ use rand_core::block::{BlockRngCore, BlockRng};","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":26261,"byte_end":26312,"line_start":25,"line_end":25,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":26313,"byte_end":26316,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ struct MyRngCore;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":26317,"byte_end":26338,"line_start":27,"line_end":27,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":26339,"byte_end":26342,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ impl BlockRngCore for MyRngCore {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":26343,"byte_end":26380,"line_start":29,"line_end":29,"column_start":1,"column_end":38}},{"value":"/     type Results = [u32; 16];","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":26381,"byte_end":26414,"line_start":30,"line_end":30,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":26415,"byte_end":26418,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/     fn generate(&mut self, results: &mut Self::Results) {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":26419,"byte_end":26480,"line_start":32,"line_end":32,"column_start":1,"column_end":62}},{"value":"/         unimplemented!()","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":26481,"byte_end":26509,"line_start":33,"line_end":33,"column_start":1,"column_end":29}},{"value":"/     }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":26510,"byte_end":26519,"line_start":34,"line_end":34,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":26520,"byte_end":26525,"line_start":35,"line_end":35,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":26526,"byte_end":26529,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ impl SeedableRng for MyRngCore {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":26530,"byte_end":26566,"line_start":37,"line_end":37,"column_start":1,"column_end":37}},{"value":"/     type Seed = unimplemented!();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":26567,"byte_end":26604,"line_start":38,"line_end":38,"column_start":1,"column_end":38}},{"value":"/     fn from_seed(seed: Self::Seed) -> Self {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":26605,"byte_end":26653,"line_start":39,"line_end":39,"column_start":1,"column_end":49}},{"value":"/         unimplemented!()","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":26654,"byte_end":26682,"line_start":40,"line_end":40,"column_start":1,"column_end":29}},{"value":"/     }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":26683,"byte_end":26692,"line_start":41,"line_end":41,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":26693,"byte_end":26698,"line_start":42,"line_end":42,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":26699,"byte_end":26702,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ // optionally, also implement CryptoRng for MyRngCore","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":26703,"byte_end":26760,"line_start":44,"line_end":44,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":26761,"byte_end":26764,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ // Final RNG.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":26765,"byte_end":26782,"line_start":46,"line_end":46,"column_start":1,"column_end":18}},{"value":"/ type MyRng = BlockRng<u32, MyRngCore>;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":26783,"byte_end":26825,"line_start":47,"line_end":47,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":26826,"byte_end":26833,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":26834,"byte_end":26837,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ [`BlockRngCore`]: crate::block::BlockRngCore","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":26838,"byte_end":26886,"line_start":50,"line_end":50,"column_start":1,"column_end":49}},{"value":"/ [`fill_bytes`]: RngCore::fill_bytes","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":26887,"byte_end":26926,"line_start":51,"line_end":51,"column_start":1,"column_end":40}}]},{"kind":"Trait","id":{"krate":0,"index":83},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":27426,"byte_end":27438,"line_start":64,"line_end":64,"column_start":11,"column_end":23},"name":"BlockRngCore","qualname":"::block::BlockRngCore","value":"BlockRngCore","parent":null,"children":[{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86}],"decl_id":null,"docs":" A trait for RNGs which do not generate random numbers individually, but in\n blocks (typically `[u32; N]`). This technique is commonly used by\n cryptographic RNGs to improve performance.","sig":null,"attributes":[{"value":"/ A trait for RNGs which do not generate random numbers individually, but in","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":27154,"byte_end":27232,"line_start":59,"line_end":59,"column_start":1,"column_end":79}},{"value":"/ blocks (typically `[u32; N]`). This technique is commonly used by","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":27233,"byte_end":27302,"line_start":60,"line_end":60,"column_start":1,"column_end":70}},{"value":"/ cryptographic RNGs to improve performance.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":27303,"byte_end":27349,"line_start":61,"line_end":61,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":27350,"byte_end":27353,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ See the [module][crate::block] documentation for details.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":27354,"byte_end":27415,"line_start":63,"line_end":63,"column_start":1,"column_end":62}}]},{"kind":"Type","id":{"krate":0,"index":84},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":27492,"byte_end":27496,"line_start":66,"line_end":66,"column_start":10,"column_end":14},"name":"Item","qualname":"::block::BlockRngCore::Item","value":"type Item;","parent":{"krate":0,"index":83},"children":[],"decl_id":null,"docs":" Results element type, e.g. `u32`.\n","sig":null,"attributes":[{"value":"/ Results element type, e.g. `u32`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":27445,"byte_end":27482,"line_start":65,"line_end":65,"column_start":5,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":85},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":27653,"byte_end":27660,"line_start":70,"line_end":70,"column_start":10,"column_end":17},"name":"Results","qualname":"::block::BlockRngCore::Results","value":"type Results: AsRef<[Self::Item]> + AsMut<[Self::Item]> + Default;","parent":{"krate":0,"index":83},"children":[],"decl_id":null,"docs":" Results type. This is the 'block' an RNG implementing `BlockRngCore`\n generates, which will usually be an array like `[u32; 16]`.\n","sig":null,"attributes":[{"value":"/ Results type. This is the 'block' an RNG implementing `BlockRngCore`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":27503,"byte_end":27575,"line_start":68,"line_end":68,"column_start":5,"column_end":77}},{"value":"/ generates, which will usually be an array like `[u32; 16]`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":27580,"byte_end":27643,"line_start":69,"line_end":69,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":27764,"byte_end":27772,"line_start":73,"line_end":73,"column_start":8,"column_end":16},"name":"generate","qualname":"::block::BlockRngCore::generate","value":"pub fn generate(&mut Self, &mut Self::Results)","parent":{"krate":0,"index":83},"children":[],"decl_id":null,"docs":" Generate a new block of results.\n","sig":null,"attributes":[{"value":"/ Generate a new block of results.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":27720,"byte_end":27756,"line_start":72,"line_end":72,"column_start":5,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":238},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":29789,"byte_end":29797,"line_start":114,"line_end":114,"column_start":12,"column_end":20},"name":"BlockRng","qualname":"::block::BlockRng","value":"BlockRng { core }","parent":null,"children":[{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242}],"decl_id":null,"docs":" A wrapper type implementing [`RngCore`] for some type implementing\n [`BlockRngCore`] with `u32` array buffer; i.e. this can be used to implement\n a full RNG from just a `generate` function.","sig":null,"attributes":[{"value":"/ A wrapper type implementing [`RngCore`] for some type implementing","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":27818,"byte_end":27888,"line_start":77,"line_end":77,"column_start":1,"column_end":71}},{"value":"/ [`BlockRngCore`] with `u32` array buffer; i.e. this can be used to implement","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":27889,"byte_end":27969,"line_start":78,"line_end":78,"column_start":1,"column_end":81}},{"value":"/ a full RNG from just a `generate` function.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":27970,"byte_end":28017,"line_start":79,"line_end":79,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":28018,"byte_end":28021,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ The `core` field may be accessed directly but the results buffer may not.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":28022,"byte_end":28099,"line_start":81,"line_end":81,"column_start":1,"column_end":78}},{"value":"/ PRNG implementations can simply use a type alias","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":28100,"byte_end":28152,"line_start":82,"line_end":82,"column_start":1,"column_end":53}},{"value":"/ (`pub type MyRng = BlockRng<MyRngCore>;`) but might prefer to use a","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":28153,"byte_end":28224,"line_start":83,"line_end":83,"column_start":1,"column_end":72}},{"value":"/ wrapper type (`pub struct MyRng(BlockRng<MyRngCore>);`); the latter must","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":28225,"byte_end":28301,"line_start":84,"line_end":84,"column_start":1,"column_end":77}},{"value":"/ re-implement `RngCore` but hides the implementation details and allows","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":28302,"byte_end":28376,"line_start":85,"line_end":85,"column_start":1,"column_end":75}},{"value":"/ extra functionality to be defined on the RNG","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":28377,"byte_end":28425,"line_start":86,"line_end":86,"column_start":1,"column_end":49}},{"value":"/ (e.g. `impl MyRng { fn set_stream(...){...} }`).","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":28426,"byte_end":28478,"line_start":87,"line_end":87,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":28479,"byte_end":28482,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ `BlockRng` has heavily optimized implementations of the [`RngCore`] methods","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":28483,"byte_end":28562,"line_start":89,"line_end":89,"column_start":1,"column_end":80}},{"value":"/ reading values from the results buffer, as well as","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":28563,"byte_end":28617,"line_start":90,"line_end":90,"column_start":1,"column_end":55}},{"value":"/ calling [`BlockRngCore::generate`] directly on the output array when","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":28618,"byte_end":28690,"line_start":91,"line_end":91,"column_start":1,"column_end":73}},{"value":"/ [`fill_bytes`] / [`try_fill_bytes`] is called on a large array. These methods","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":28691,"byte_end":28772,"line_start":92,"line_end":92,"column_start":1,"column_end":82}},{"value":"/ also handle the bookkeeping of when to generate a new batch of values.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":28773,"byte_end":28847,"line_start":93,"line_end":93,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":28848,"byte_end":28851,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ No whole generated `u32` values are thown away and all values are consumed","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":28852,"byte_end":28930,"line_start":95,"line_end":95,"column_start":1,"column_end":79}},{"value":"/ in-order. [`next_u32`] simply takes the next available `u32` value.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":28931,"byte_end":29002,"line_start":96,"line_end":96,"column_start":1,"column_end":72}},{"value":"/ [`next_u64`] is implemented by combining two `u32` values, least","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":29003,"byte_end":29071,"line_start":97,"line_end":97,"column_start":1,"column_end":69}},{"value":"/ significant first. [`fill_bytes`] and [`try_fill_bytes`] consume a whole","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":29072,"byte_end":29148,"line_start":98,"line_end":98,"column_start":1,"column_end":77}},{"value":"/ number of `u32` values, converting each `u32` to a byte slice in","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":29149,"byte_end":29217,"line_start":99,"line_end":99,"column_start":1,"column_end":69}},{"value":"/ little-endian order. If the requested byte length is not a multiple of 4,","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":29218,"byte_end":29295,"line_start":100,"line_end":100,"column_start":1,"column_end":78}},{"value":"/ some bytes will be discarded.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":29296,"byte_end":29329,"line_start":101,"line_end":101,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":29330,"byte_end":29333,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ See also [`BlockRng64`] which uses `u64` array buffers. Currently there is","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":29334,"byte_end":29412,"line_start":103,"line_end":103,"column_start":1,"column_end":79}},{"value":"/ no direct support for other buffer types.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":29413,"byte_end":29458,"line_start":104,"line_end":104,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":29459,"byte_end":29462,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ For easy initialization `BlockRng` also implements [`SeedableRng`].","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":29463,"byte_end":29534,"line_start":106,"line_end":106,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":29535,"byte_end":29538,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ [`next_u32`]: RngCore::next_u32","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":29539,"byte_end":29574,"line_start":108,"line_end":108,"column_start":1,"column_end":36}},{"value":"/ [`next_u64`]: RngCore::next_u64","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":29575,"byte_end":29610,"line_start":109,"line_end":109,"column_start":1,"column_end":36}},{"value":"/ [`fill_bytes`]: RngCore::fill_bytes","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":29611,"byte_end":29650,"line_start":110,"line_end":110,"column_start":1,"column_end":40}},{"value":"/ [`try_fill_bytes`]: RngCore::try_fill_bytes","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":29651,"byte_end":29698,"line_start":111,"line_end":111,"column_start":1,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":242},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":29951,"byte_end":29955,"line_start":118,"line_end":118,"column_start":9,"column_end":13},"name":"core","qualname":"::block::BlockRng::core","value":"R","parent":{"krate":0,"index":238},"children":[],"decl_id":null,"docs":" The *core* part of the RNG, implementing the `generate` function.\n","sig":null,"attributes":[{"value":"/ The *core* part of the RNG, implementing the `generate` function.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":29873,"byte_end":29942,"line_start":117,"line_end":117,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":30565,"byte_end":30568,"line_start":136,"line_end":136,"column_start":12,"column_end":15},"name":"new","qualname":"<BlockRng<R>>::new","value":"pub fn new(R) -> BlockRng<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `BlockRng` from an existing RNG implementing\n `BlockRngCore`. Results will be generated on first use.\n","sig":null,"attributes":[{"value":"/ Create a new `BlockRng` from an existing RNG implementing","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":30414,"byte_end":30475,"line_start":133,"line_end":133,"column_start":5,"column_end":66}},{"value":"/ `BlockRngCore`. Results will be generated on first use.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":30480,"byte_end":30539,"line_start":134,"line_end":134,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":30544,"byte_end":30553,"line_start":135,"line_end":135,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":31043,"byte_end":31048,"line_start":151,"line_end":151,"column_start":12,"column_end":17},"name":"index","qualname":"<BlockRng<R>>::index","value":"pub fn index(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the index into the result buffer.","sig":null,"attributes":[{"value":"/ Get the index into the result buffer.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":30788,"byte_end":30829,"line_start":145,"line_end":145,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":30834,"byte_end":30837,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ If this is equal to or larger than the size of the result buffer then","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":30842,"byte_end":30915,"line_start":147,"line_end":147,"column_start":5,"column_end":78}},{"value":"/ the buffer is \"empty\" and `generate()` must be called to produce new","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":30920,"byte_end":30992,"line_start":148,"line_end":148,"column_start":5,"column_end":77}},{"value":"/ results.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":30997,"byte_end":31009,"line_start":149,"line_end":149,"column_start":5,"column_end":17}},{"value":"inline(always)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":31014,"byte_end":31031,"line_start":150,"line_end":150,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":31239,"byte_end":31244,"line_start":158,"line_end":158,"column_start":12,"column_end":17},"name":"reset","qualname":"<BlockRng<R>>::reset","value":"pub fn reset(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reset the number of available results.\n This will force a new set of results to be generated on next use.\n","sig":null,"attributes":[{"value":"/ Reset the number of available results.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":31097,"byte_end":31139,"line_start":155,"line_end":155,"column_start":5,"column_end":47}},{"value":"/ This will force a new set of results to be generated on next use.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":31144,"byte_end":31213,"line_start":156,"line_end":156,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":31218,"byte_end":31227,"line_start":157,"line_end":157,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":31437,"byte_end":31453,"line_start":165,"line_end":165,"column_start":12,"column_end":28},"name":"generate_and_set","qualname":"<BlockRng<R>>::generate_and_set","value":"pub fn generate_and_set(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Generate a new set of results immediately, setting the index to the\n given value.\n","sig":null,"attributes":[{"value":"/ Generate a new set of results immediately, setting the index to the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":31319,"byte_end":31390,"line_start":162,"line_end":162,"column_start":5,"column_end":76}},{"value":"/ given value.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":31395,"byte_end":31411,"line_start":163,"line_end":163,"column_start":5,"column_end":21}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":31416,"byte_end":31425,"line_start":164,"line_end":164,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":246},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":35473,"byte_end":35483,"line_start":287,"line_end":287,"column_start":12,"column_end":22},"name":"BlockRng64","qualname":"::block::BlockRng64","value":"BlockRng64 { core }","parent":null,"children":[{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251}],"decl_id":null,"docs":" A wrapper type implementing [`RngCore`] for some type implementing\n [`BlockRngCore`] with `u64` array buffer; i.e. this can be used to implement\n a full RNG from just a `generate` function.","sig":null,"attributes":[{"value":"/ A wrapper type implementing [`RngCore`] for some type implementing","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":34278,"byte_end":34348,"line_start":263,"line_end":263,"column_start":1,"column_end":71}},{"value":"/ [`BlockRngCore`] with `u64` array buffer; i.e. this can be used to implement","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":34349,"byte_end":34429,"line_start":264,"line_end":264,"column_start":1,"column_end":81}},{"value":"/ a full RNG from just a `generate` function.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":34430,"byte_end":34477,"line_start":265,"line_end":265,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":34478,"byte_end":34481,"line_start":266,"line_end":266,"column_start":1,"column_end":4}},{"value":"/ This is similar to [`BlockRng`], but specialized for algorithms that operate","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":34482,"byte_end":34562,"line_start":267,"line_end":267,"column_start":1,"column_end":81}},{"value":"/ on `u64` values.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":34563,"byte_end":34583,"line_start":268,"line_end":268,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":34584,"byte_end":34587,"line_start":269,"line_end":269,"column_start":1,"column_end":4}},{"value":"/ No whole generated `u64` values are thrown away and all values are consumed","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":34588,"byte_end":34667,"line_start":270,"line_end":270,"column_start":1,"column_end":80}},{"value":"/ in-order. [`next_u64`] simply takes the next available `u64` value.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":34668,"byte_end":34739,"line_start":271,"line_end":271,"column_start":1,"column_end":72}},{"value":"/ [`next_u32`] is however a bit special: half of a `u64` is consumed, leaving","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":34740,"byte_end":34819,"line_start":272,"line_end":272,"column_start":1,"column_end":80}},{"value":"/ the other half in the buffer. If the next function called is [`next_u32`]","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":34820,"byte_end":34897,"line_start":273,"line_end":273,"column_start":1,"column_end":78}},{"value":"/ then the other half is then consumed, however both [`next_u64`] and","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":34898,"byte_end":34969,"line_start":274,"line_end":274,"column_start":1,"column_end":72}},{"value":"/ [`fill_bytes`] discard the rest of any half-consumed `u64`s when called.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":34970,"byte_end":35046,"line_start":275,"line_end":275,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":35047,"byte_end":35050,"line_start":276,"line_end":276,"column_start":1,"column_end":4}},{"value":"/ [`fill_bytes`] and [`try_fill_bytes`] consume a whole number of `u64`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":35051,"byte_end":35124,"line_start":277,"line_end":277,"column_start":1,"column_end":74}},{"value":"/ values. If the requested length is not a multiple of 8, some bytes will be","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":35125,"byte_end":35203,"line_start":278,"line_end":278,"column_start":1,"column_end":79}},{"value":"/ discarded.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":35204,"byte_end":35218,"line_start":279,"line_end":279,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":35219,"byte_end":35222,"line_start":280,"line_end":280,"column_start":1,"column_end":4}},{"value":"/ [`next_u32`]: RngCore::next_u32","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":35223,"byte_end":35258,"line_start":281,"line_end":281,"column_start":1,"column_end":36}},{"value":"/ [`next_u64`]: RngCore::next_u64","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":35259,"byte_end":35294,"line_start":282,"line_end":282,"column_start":1,"column_end":36}},{"value":"/ [`fill_bytes`]: RngCore::fill_bytes","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":35295,"byte_end":35334,"line_start":283,"line_end":283,"column_start":1,"column_end":40}},{"value":"/ [`try_fill_bytes`]: RngCore::try_fill_bytes","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":35335,"byte_end":35382,"line_start":284,"line_end":284,"column_start":1,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":251},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":35710,"byte_end":35714,"line_start":292,"line_end":292,"column_start":9,"column_end":13},"name":"core","qualname":"::block::BlockRng64::core","value":"R","parent":{"krate":0,"index":246},"children":[],"decl_id":null,"docs":" The *core* part of the RNG, implementing the `generate` function.\n","sig":null,"attributes":[{"value":"/ The *core* part of the RNG, implementing the `generate` function.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":35632,"byte_end":35701,"line_start":291,"line_end":291,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":36378,"byte_end":36381,"line_start":311,"line_end":311,"column_start":12,"column_end":15},"name":"new","qualname":"<BlockRng64<R>>::new","value":"pub fn new(R) -> BlockRng64<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `BlockRng` from an existing RNG implementing\n `BlockRngCore`. Results will be generated on first use.\n","sig":null,"attributes":[{"value":"/ Create a new `BlockRng` from an existing RNG implementing","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":36227,"byte_end":36288,"line_start":308,"line_end":308,"column_start":5,"column_end":66}},{"value":"/ `BlockRngCore`. Results will be generated on first use.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":36293,"byte_end":36352,"line_start":309,"line_end":309,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":36357,"byte_end":36366,"line_start":310,"line_end":310,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":36890,"byte_end":36895,"line_start":327,"line_end":327,"column_start":12,"column_end":17},"name":"index","qualname":"<BlockRng64<R>>::index","value":"pub fn index(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the index into the result buffer.","sig":null,"attributes":[{"value":"/ Get the index into the result buffer.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":36635,"byte_end":36676,"line_start":321,"line_end":321,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":36681,"byte_end":36684,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ If this is equal to or larger than the size of the result buffer then","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":36689,"byte_end":36762,"line_start":323,"line_end":323,"column_start":5,"column_end":78}},{"value":"/ the buffer is \"empty\" and `generate()` must be called to produce new","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":36767,"byte_end":36839,"line_start":324,"line_end":324,"column_start":5,"column_end":77}},{"value":"/ results.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":36844,"byte_end":36856,"line_start":325,"line_end":325,"column_start":5,"column_end":17}},{"value":"inline(always)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":36861,"byte_end":36878,"line_start":326,"line_end":326,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":37086,"byte_end":37091,"line_start":334,"line_end":334,"column_start":12,"column_end":17},"name":"reset","qualname":"<BlockRng64<R>>::reset","value":"pub fn reset(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reset the number of available results.\n This will force a new set of results to be generated on next use.\n","sig":null,"attributes":[{"value":"/ Reset the number of available results.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":36944,"byte_end":36986,"line_start":331,"line_end":331,"column_start":5,"column_end":47}},{"value":"/ This will force a new set of results to be generated on next use.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":36991,"byte_end":37060,"line_start":332,"line_end":332,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":37065,"byte_end":37074,"line_start":333,"line_end":333,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":37316,"byte_end":37332,"line_start":342,"line_end":342,"column_start":12,"column_end":28},"name":"generate_and_set","qualname":"<BlockRng64<R>>::generate_and_set","value":"pub fn generate_and_set(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Generate a new set of results immediately, setting the index to the\n given value.\n","sig":null,"attributes":[{"value":"/ Generate a new set of results immediately, setting the index to the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":37198,"byte_end":37269,"line_start":339,"line_end":339,"column_start":5,"column_end":76}},{"value":"/ given value.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":37274,"byte_end":37290,"line_start":340,"line_end":340,"column_start":5,"column_end":21}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":37295,"byte_end":37304,"line_start":341,"line_end":341,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":134},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"impls","qualname":"::impls","value":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","parent":null,"children":[{"krate":0,"index":135},{"krate":0,"index":138},{"krate":0,"index":141},{"krate":0,"index":144},{"krate":0,"index":147},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":163}],"decl_id":null,"docs":" Helper functions for implementing `RngCore` functions.","sig":null,"attributes":[{"value":"/ Helper functions for implementing `RngCore` functions.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":40440,"byte_end":40498,"line_start":9,"line_end":9,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":40499,"byte_end":40502,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ For cross-platform reproducibility, these functions all use Little Endian:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":40503,"byte_end":40581,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/ least-significant part first. For example, `next_u64_via_u32` takes `u32`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":40582,"byte_end":40659,"line_start":12,"line_end":12,"column_start":1,"column_end":78}},{"value":"/ values `x, y`, then outputs `(y << 32) | x`. To implement `next_u32`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":40660,"byte_end":40732,"line_start":13,"line_end":13,"column_start":1,"column_end":73}},{"value":"/ from `next_u64` in little-endian order, one should use `next_u64() as u32`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":40733,"byte_end":40812,"line_start":14,"line_end":14,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":40813,"byte_end":40816,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Byte-swapping (like the std `to_le` functions) is only needed to convert","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":40817,"byte_end":40893,"line_start":16,"line_end":16,"column_start":1,"column_end":77}},{"value":"/ to/from byte sequences, and since its purpose is reproducibility,","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":40894,"byte_end":40963,"line_start":17,"line_end":17,"column_start":1,"column_end":70}},{"value":"/ non-reproducible sources (e.g. `OsRng`) need not bother with it.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":40964,"byte_end":41032,"line_start":18,"line_end":18,"column_start":1,"column_end":69}}]},{"kind":"Function","id":{"krate":0,"index":150},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":41222,"byte_end":41238,"line_start":28,"line_end":28,"column_start":8,"column_end":24},"name":"next_u64_via_u32","qualname":"::impls::next_u64_via_u32","value":"pub fn next_u64_via_u32<R: RngCore + ?Sized>(&mut R) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Implement `next_u64` via `next_u32`, little-endian order.\n","sig":null,"attributes":[{"value":"/ Implement `next_u64` via `next_u32`, little-endian order.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":41153,"byte_end":41214,"line_start":27,"line_end":27,"column_start":1,"column_end":62}}]},{"kind":"Function","id":{"krate":0,"index":152},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":41785,"byte_end":41804,"line_start":41,"line_end":41,"column_start":8,"column_end":27},"name":"fill_bytes_via_next","qualname":"::impls::fill_bytes_via_next","value":"pub fn fill_bytes_via_next<R: RngCore + ?Sized>(&mut R, &mut [u8])","parent":null,"children":[],"decl_id":null,"docs":" Implement `fill_bytes` via `next_u64` and `next_u32`, little-endian order.","sig":null,"attributes":[{"value":"/ Implement `fill_bytes` via `next_u64` and `next_u32`, little-endian order.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":41446,"byte_end":41524,"line_start":35,"line_end":35,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":41525,"byte_end":41528,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ The fastest way to fill a slice is usually to work as long as possible with","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":41529,"byte_end":41608,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"/ integers. That is why this method mostly uses `next_u64`, and only when","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":41609,"byte_end":41684,"line_start":38,"line_end":38,"column_start":1,"column_end":76}},{"value":"/ there are 4 or less bytes remaining at the end of the slice it uses","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":41685,"byte_end":41756,"line_start":39,"line_end":39,"column_start":1,"column_end":72}},{"value":"/ `next_u32` once.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":41757,"byte_end":41777,"line_start":40,"line_end":40,"column_start":1,"column_end":21}}]},{"kind":"Function","id":{"krate":0,"index":159},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":44557,"byte_end":44576,"line_start":130,"line_end":130,"column_start":8,"column_end":27},"name":"fill_via_u32_chunks","qualname":"::impls::fill_via_u32_chunks","value":"pub fn fill_via_u32_chunks(&[u32], &mut [u8]) -> (usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Implement `fill_bytes` by reading chunks from the output buffer of a block\n based RNG.","sig":null,"attributes":[{"value":"/ Implement `fill_bytes` by reading chunks from the output buffer of a block","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":43617,"byte_end":43695,"line_start":100,"line_end":100,"column_start":1,"column_end":79}},{"value":"/ based RNG.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":43696,"byte_end":43710,"line_start":101,"line_end":101,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":43711,"byte_end":43714,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ The return values are `(consumed_u32, filled_u8)`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":43715,"byte_end":43769,"line_start":103,"line_end":103,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":43770,"byte_end":43773,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ `filled_u8` is the number of filled bytes in `dest`, which may be less than","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":43774,"byte_end":43853,"line_start":105,"line_end":105,"column_start":1,"column_end":80}},{"value":"/ the length of `dest`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":43854,"byte_end":43879,"line_start":106,"line_end":106,"column_start":1,"column_end":26}},{"value":"/ `consumed_u32` is the number of words consumed from `src`, which is the same","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":43880,"byte_end":43960,"line_start":107,"line_end":107,"column_start":1,"column_end":81}},{"value":"/ as `filled_u8 / 4` rounded up.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":43961,"byte_end":43995,"line_start":108,"line_end":108,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":43996,"byte_end":43999,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":44000,"byte_end":44013,"line_start":110,"line_end":110,"column_start":1,"column_end":14}},{"value":"/ (from `IsaacRng`)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":44014,"byte_end":44035,"line_start":111,"line_end":111,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":44036,"byte_end":44039,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":44040,"byte_end":44053,"line_start":113,"line_end":113,"column_start":1,"column_end":14}},{"value":"/ fn fill_bytes(&mut self, dest: &mut [u8]) {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":44054,"byte_end":44101,"line_start":114,"line_end":114,"column_start":1,"column_end":48}},{"value":"/     let mut read_len = 0;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":44102,"byte_end":44131,"line_start":115,"line_end":115,"column_start":1,"column_end":30}},{"value":"/     while read_len < dest.len() {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":44132,"byte_end":44169,"line_start":116,"line_end":116,"column_start":1,"column_end":38}},{"value":"/         if self.index >= self.rsl.len() {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":44170,"byte_end":44215,"line_start":117,"line_end":117,"column_start":1,"column_end":46}},{"value":"/             self.isaac();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":44216,"byte_end":44245,"line_start":118,"line_end":118,"column_start":1,"column_end":30}},{"value":"/         }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":44246,"byte_end":44259,"line_start":119,"line_end":119,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":44260,"byte_end":44263,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/         let (consumed_u32, filled_u8) =","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":44264,"byte_end":44307,"line_start":121,"line_end":121,"column_start":1,"column_end":44}},{"value":"/             impls::fill_via_u32_chunks(&mut self.rsl[self.index..],","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":44308,"byte_end":44379,"line_start":122,"line_end":122,"column_start":1,"column_end":72}},{"value":"/                                        &mut dest[read_len..]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":44380,"byte_end":44446,"line_start":123,"line_end":123,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":44447,"byte_end":44450,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/         self.index += consumed_u32;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":44451,"byte_end":44490,"line_start":125,"line_end":125,"column_start":1,"column_end":40}},{"value":"/         read_len += filled_u8;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":44491,"byte_end":44525,"line_start":126,"line_end":126,"column_start":1,"column_end":35}},{"value":"/     }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":44526,"byte_end":44535,"line_start":127,"line_end":127,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":44536,"byte_end":44541,"line_start":128,"line_end":128,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":44542,"byte_end":44549,"line_start":129,"line_end":129,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":160},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":45102,"byte_end":45121,"line_start":144,"line_end":144,"column_start":8,"column_end":27},"name":"fill_via_u64_chunks","qualname":"::impls::fill_via_u64_chunks","value":"pub fn fill_via_u64_chunks(&[u64], &mut [u8]) -> (usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Implement `fill_bytes` by reading chunks from the output buffer of a block\n based RNG.","sig":null,"attributes":[{"value":"/ Implement `fill_bytes` by reading chunks from the output buffer of a block","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":44670,"byte_end":44748,"line_start":134,"line_end":134,"column_start":1,"column_end":79}},{"value":"/ based RNG.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":44749,"byte_end":44763,"line_start":135,"line_end":135,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":44764,"byte_end":44767,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ The return values are `(consumed_u64, filled_u8)`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":44768,"byte_end":44822,"line_start":137,"line_end":137,"column_start":1,"column_end":55}},{"value":"/ `filled_u8` is the number of filled bytes in `dest`, which may be less than","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":44823,"byte_end":44902,"line_start":138,"line_end":138,"column_start":1,"column_end":80}},{"value":"/ the length of `dest`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":44903,"byte_end":44928,"line_start":139,"line_end":139,"column_start":1,"column_end":26}},{"value":"/ `consumed_u64` is the number of words consumed from `src`, which is the same","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":44929,"byte_end":45009,"line_start":140,"line_end":140,"column_start":1,"column_end":81}},{"value":"/ as `filled_u8 / 8` rounded up.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":45010,"byte_end":45044,"line_start":141,"line_end":141,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":45045,"byte_end":45048,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ See `fill_via_u32_chunks` for an example.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":45049,"byte_end":45094,"line_start":143,"line_end":143,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":161},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":45286,"byte_end":45303,"line_start":149,"line_end":149,"column_start":8,"column_end":25},"name":"next_u32_via_fill","qualname":"::impls::next_u32_via_fill","value":"pub fn next_u32_via_fill<R: RngCore + ?Sized>(&mut R) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Implement `next_u32` via `fill_bytes`, little-endian order.\n","sig":null,"attributes":[{"value":"/ Implement `next_u32` via `fill_bytes`, little-endian order.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":45215,"byte_end":45278,"line_start":148,"line_end":148,"column_start":1,"column_end":64}}]},{"kind":"Function","id":{"krate":0,"index":163},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":45459,"byte_end":45476,"line_start":154,"line_end":154,"column_start":8,"column_end":25},"name":"next_u64_via_fill","qualname":"::impls::next_u64_via_fill","value":"pub fn next_u64_via_fill<R: RngCore + ?Sized>(&mut R) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Implement `next_u64` via `fill_bytes`, little-endian order.\n","sig":null,"attributes":[{"value":"/ Implement `next_u64` via `fill_bytes`, little-endian order.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":45388,"byte_end":45451,"line_start":153,"line_end":153,"column_start":1,"column_end":64}}]},{"kind":"Mod","id":{"krate":0,"index":165},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/le.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"le","qualname":"::le","value":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/le.rs","parent":null,"children":[{"krate":0,"index":166},{"krate":0,"index":170},{"krate":0,"index":171}],"decl_id":null,"docs":" Little-Endian utilities\n \n Little-Endian order has been chosen for internal usage; this makes some\n useful functions available.\n","sig":null,"attributes":[{"value":"/ Little-Endian utilities","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/le.rs","byte_start":45957,"byte_end":45984,"line_start":9,"line_end":9,"column_start":1,"column_end":28}},{"value":"/ ","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/le.rs","byte_start":45985,"byte_end":45989,"line_start":10,"line_end":10,"column_start":1,"column_end":5}},{"value":"/ Little-Endian order has been chosen for internal usage; this makes some","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/le.rs","byte_start":45990,"byte_end":46065,"line_start":11,"line_end":11,"column_start":1,"column_end":76}},{"value":"/ useful functions available.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/le.rs","byte_start":46066,"byte_end":46097,"line_start":12,"line_end":12,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":170},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/le.rs","byte_start":46625,"byte_end":46638,"line_start":35,"line_end":35,"column_start":8,"column_end":21},"name":"read_u32_into","qualname":"::le::read_u32_into","value":"pub fn read_u32_into(&[u8], &mut [u32])","parent":null,"children":[],"decl_id":null,"docs":" Reads unsigned 32 bit integers from `src` into `dst`.\n Borrowed from the `byteorder` crate.\n","sig":null,"attributes":[{"value":"/ Reads unsigned 32 bit integers from `src` into `dst`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/le.rs","byte_start":46509,"byte_end":46566,"line_start":32,"line_end":32,"column_start":1,"column_end":58}},{"value":"/ Borrowed from the `byteorder` crate.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/le.rs","byte_start":46567,"byte_end":46607,"line_start":33,"line_end":33,"column_start":1,"column_end":41}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/le.rs","byte_start":46608,"byte_end":46617,"line_start":34,"line_end":34,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":171},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/le.rs","byte_start":46826,"byte_end":46839,"line_start":42,"line_end":42,"column_start":8,"column_end":21},"name":"read_u64_into","qualname":"::le::read_u64_into","value":"pub fn read_u64_into(&[u8], &mut [u64])","parent":null,"children":[],"decl_id":null,"docs":" Reads unsigned 64 bit integers from `src` into `dst`.\n Borrowed from the `byteorder` crate.\n","sig":null,"attributes":[{"value":"/ Reads unsigned 64 bit integers from `src` into `dst`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/le.rs","byte_start":46710,"byte_end":46767,"line_start":39,"line_end":39,"column_start":1,"column_end":58}},{"value":"/ Borrowed from the `byteorder` crate.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/le.rs","byte_start":46768,"byte_end":46808,"line_start":40,"line_end":40,"column_start":1,"column_end":41}},{"value":"inline","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/le.rs","byte_start":46809,"byte_end":46818,"line_start":41,"line_end":41,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":255},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/os.rs","byte_start":49429,"byte_end":49434,"line_start":48,"line_end":48,"column_start":12,"column_end":17},"name":"OsRng","qualname":"::os::OsRng","value":"","parent":null,"children":[],"decl_id":null,"docs":" A random number generator that retrieves randomness from from the\n operating system.","sig":null,"attributes":[{"value":"/ A random number generator that retrieves randomness from from the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/os.rs","byte_start":48170,"byte_end":48239,"line_start":15,"line_end":15,"column_start":1,"column_end":70}},{"value":"/ operating system.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/os.rs","byte_start":48240,"byte_end":48261,"line_start":16,"line_end":16,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/os.rs","byte_start":48262,"byte_end":48265,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ This is a zero-sized struct. It can be freely constructed with `OsRng`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/os.rs","byte_start":48266,"byte_end":48341,"line_start":18,"line_end":18,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/os.rs","byte_start":48342,"byte_end":48345,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ The implementation is provided by the [getrandom] crate. Refer to","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/os.rs","byte_start":48346,"byte_end":48415,"line_start":20,"line_end":20,"column_start":1,"column_end":70}},{"value":"/ [getrandom] documentation for details.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/os.rs","byte_start":48416,"byte_end":48458,"line_start":21,"line_end":21,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/os.rs","byte_start":48459,"byte_end":48462,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ This struct is only available when specifying the crate feature `getrandom`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/os.rs","byte_start":48463,"byte_end":48542,"line_start":23,"line_end":23,"column_start":1,"column_end":80}},{"value":"/ or `std`. When using the `rand` lib, it is also available as `rand::rngs::OsRng`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/os.rs","byte_start":48543,"byte_end":48628,"line_start":24,"line_end":24,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/os.rs","byte_start":48629,"byte_end":48632,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ # Blocking and error handling","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/os.rs","byte_start":48633,"byte_end":48666,"line_start":26,"line_end":26,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/os.rs","byte_start":48667,"byte_end":48670,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ It is possible that when used during early boot the first call to `OsRng`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/os.rs","byte_start":48671,"byte_end":48748,"line_start":28,"line_end":28,"column_start":1,"column_end":78}},{"value":"/ will block until the system's RNG is initialised. It is also possible","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/os.rs","byte_start":48749,"byte_end":48822,"line_start":29,"line_end":29,"column_start":1,"column_end":74}},{"value":"/ (though highly unlikely) for `OsRng` to fail on some platforms, most","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/os.rs","byte_start":48823,"byte_end":48895,"line_start":30,"line_end":30,"column_start":1,"column_end":73}},{"value":"/ likely due to system mis-configuration.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/os.rs","byte_start":48896,"byte_end":48939,"line_start":31,"line_end":31,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/os.rs","byte_start":48940,"byte_end":48943,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ After the first successful call, it is highly unlikely that failures or","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/os.rs","byte_start":48944,"byte_end":49019,"line_start":33,"line_end":33,"column_start":1,"column_end":76}},{"value":"/ significant delays will occur (although performance should be expected to","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/os.rs","byte_start":49020,"byte_end":49097,"line_start":34,"line_end":34,"column_start":1,"column_end":78}},{"value":"/ be much slower than a user-space PRNG).","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/os.rs","byte_start":49098,"byte_end":49141,"line_start":35,"line_end":35,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/os.rs","byte_start":49142,"byte_end":49145,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ # Usage example","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/os.rs","byte_start":49146,"byte_end":49165,"line_start":37,"line_end":37,"column_start":1,"column_end":20}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/os.rs","byte_start":49166,"byte_end":49173,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"/ use rand_core::{RngCore, OsRng};","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/os.rs","byte_start":49174,"byte_end":49210,"line_start":39,"line_end":39,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/os.rs","byte_start":49211,"byte_end":49214,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ let mut key = [0u8; 16];","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/os.rs","byte_start":49215,"byte_end":49243,"line_start":41,"line_end":41,"column_start":1,"column_end":29}},{"value":"/ OsRng.fill_bytes(&mut key);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/os.rs","byte_start":49244,"byte_end":49275,"line_start":42,"line_end":42,"column_start":1,"column_end":32}},{"value":"/ let random_u64 = OsRng.next_u64();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/os.rs","byte_start":49276,"byte_end":49314,"line_start":43,"line_end":43,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/os.rs","byte_start":49315,"byte_end":49322,"line_start":44,"line_end":44,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/os.rs","byte_start":49323,"byte_end":49326,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ [getrandom]: https://crates.io/crates/getrandom","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/os.rs","byte_start":49327,"byte_end":49378,"line_start":46,"line_end":46,"column_start":1,"column_end":52}}]},{"kind":"Trait","id":{"krate":0,"index":195},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":5179,"byte_end":5186,"line_start":137,"line_end":137,"column_start":11,"column_end":18},"name":"RngCore","qualname":"::RngCore","value":"RngCore","parent":null,"children":[{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199}],"decl_id":null,"docs":" The core of a random number generator.","sig":null,"attributes":[{"value":"/ The core of a random number generator.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":1989,"byte_end":2031,"line_start":61,"line_end":61,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":2032,"byte_end":2035,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ This trait encapsulates the low-level functionality common to all","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":2036,"byte_end":2105,"line_start":63,"line_end":63,"column_start":1,"column_end":70}},{"value":"/ generators, and is the \"back end\", to be implemented by generators.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":2106,"byte_end":2177,"line_start":64,"line_end":64,"column_start":1,"column_end":72}},{"value":"/ End users should normally use the `Rng` trait from the [`rand`] crate,","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":2178,"byte_end":2252,"line_start":65,"line_end":65,"column_start":1,"column_end":75}},{"value":"/ which is automatically implemented for every type implementing `RngCore`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":2253,"byte_end":2330,"line_start":66,"line_end":66,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":2331,"byte_end":2334,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ Three different methods for generating random data are provided since the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":2335,"byte_end":2412,"line_start":68,"line_end":68,"column_start":1,"column_end":78}},{"value":"/ optimal implementation of each is dependent on the type of generator. There","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":2413,"byte_end":2492,"line_start":69,"line_end":69,"column_start":1,"column_end":80}},{"value":"/ is no required relationship between the output of each; e.g. many","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":2493,"byte_end":2562,"line_start":70,"line_end":70,"column_start":1,"column_end":70}},{"value":"/ implementations of [`fill_bytes`] consume a whole number of `u32` or `u64`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":2563,"byte_end":2641,"line_start":71,"line_end":71,"column_start":1,"column_end":79}},{"value":"/ values and drop any remaining unused bytes.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":2642,"byte_end":2689,"line_start":72,"line_end":72,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":2690,"byte_end":2693,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ The [`try_fill_bytes`] method is a variant of [`fill_bytes`] allowing error","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":2694,"byte_end":2773,"line_start":74,"line_end":74,"column_start":1,"column_end":80}},{"value":"/ handling; it is not deemed sufficiently useful to add equivalents for","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":2774,"byte_end":2847,"line_start":75,"line_end":75,"column_start":1,"column_end":74}},{"value":"/ [`next_u32`] or [`next_u64`] since the latter methods are almost always used","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":2848,"byte_end":2928,"line_start":76,"line_end":76,"column_start":1,"column_end":81}},{"value":"/ with algorithmic generators (PRNGs), which are normally infallible.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":2929,"byte_end":3000,"line_start":77,"line_end":77,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":3001,"byte_end":3004,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ Algorithmic generators implementing [`SeedableRng`] should normally have","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":3005,"byte_end":3081,"line_start":79,"line_end":79,"column_start":1,"column_end":77}},{"value":"/ *portable, reproducible* output, i.e. fix Endianness when converting values","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":3082,"byte_end":3161,"line_start":80,"line_end":80,"column_start":1,"column_end":80}},{"value":"/ to avoid platform differences, and avoid making any changes which affect","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":3162,"byte_end":3238,"line_start":81,"line_end":81,"column_start":1,"column_end":77}},{"value":"/ output (except by communicating that the release has breaking changes).","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":3239,"byte_end":3314,"line_start":82,"line_end":82,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":3315,"byte_end":3318,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ Typically implementators will implement only one of the methods available","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":3319,"byte_end":3396,"line_start":84,"line_end":84,"column_start":1,"column_end":78}},{"value":"/ in this trait directly, then use the helper functions from the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":3397,"byte_end":3463,"line_start":85,"line_end":85,"column_start":1,"column_end":67}},{"value":"/ [`impls`] module to implement the other methods.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":3464,"byte_end":3516,"line_start":86,"line_end":86,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":3517,"byte_end":3520,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ It is recommended that implementations also implement:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":3521,"byte_end":3579,"line_start":88,"line_end":88,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":3580,"byte_end":3583,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ - `Debug` with a custom implementation which *does not* print any internal","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":3584,"byte_end":3662,"line_start":90,"line_end":90,"column_start":1,"column_end":79}},{"value":"/   state (at least, [`CryptoRng`]s should not risk leaking state through","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":3663,"byte_end":3738,"line_start":91,"line_end":91,"column_start":1,"column_end":76}},{"value":"/   `Debug`).","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":3739,"byte_end":3754,"line_start":92,"line_end":92,"column_start":1,"column_end":16}},{"value":"/ - `Serialize` and `Deserialize` (from Serde), preferably making Serde","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":3755,"byte_end":3828,"line_start":93,"line_end":93,"column_start":1,"column_end":74}},{"value":"/   support optional at the crate level in PRNG libs.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":3829,"byte_end":3884,"line_start":94,"line_end":94,"column_start":1,"column_end":56}},{"value":"/ - `Clone`, if possible.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":3885,"byte_end":3912,"line_start":95,"line_end":95,"column_start":1,"column_end":28}},{"value":"/ - *never* implement `Copy` (accidental copies may cause repeated values).","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":3913,"byte_end":3990,"line_start":96,"line_end":96,"column_start":1,"column_end":78}},{"value":"/ - *do not* implement `Default` for pseudorandom generators, but instead","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":3991,"byte_end":4066,"line_start":97,"line_end":97,"column_start":1,"column_end":76}},{"value":"/   implement [`SeedableRng`], to guide users towards proper seeding.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":4067,"byte_end":4138,"line_start":98,"line_end":98,"column_start":1,"column_end":72}},{"value":"/   External / hardware RNGs can choose to implement `Default`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":4139,"byte_end":4204,"line_start":99,"line_end":99,"column_start":1,"column_end":66}},{"value":"/ - `Eq` and `PartialEq` could be implemented, but are probably not useful.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":4205,"byte_end":4282,"line_start":100,"line_end":100,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":4283,"byte_end":4286,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":4287,"byte_end":4300,"line_start":102,"line_end":102,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":4301,"byte_end":4304,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ A simple example, obviously not generating very *random* output:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":4305,"byte_end":4373,"line_start":104,"line_end":104,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":4374,"byte_end":4377,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":4378,"byte_end":4385,"line_start":106,"line_end":106,"column_start":1,"column_end":8}},{"value":"/ #![allow(dead_code)]","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":4386,"byte_end":4410,"line_start":107,"line_end":107,"column_start":1,"column_end":25}},{"value":"/ use rand_core::{RngCore, Error, impls};","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":4411,"byte_end":4454,"line_start":108,"line_end":108,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":4455,"byte_end":4458,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ struct CountingRng(u64);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":4459,"byte_end":4487,"line_start":110,"line_end":110,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":4488,"byte_end":4491,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ impl RngCore for CountingRng {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":4492,"byte_end":4526,"line_start":112,"line_end":112,"column_start":1,"column_end":35}},{"value":"/     fn next_u32(&mut self) -> u32 {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":4527,"byte_end":4566,"line_start":113,"line_end":113,"column_start":1,"column_end":40}},{"value":"/         self.next_u64() as u32","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":4567,"byte_end":4601,"line_start":114,"line_end":114,"column_start":1,"column_end":35}},{"value":"/     }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":4602,"byte_end":4611,"line_start":115,"line_end":115,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":4612,"byte_end":4615,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/     fn next_u64(&mut self) -> u64 {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":4616,"byte_end":4655,"line_start":117,"line_end":117,"column_start":1,"column_end":40}},{"value":"/         self.0 += 1;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":4656,"byte_end":4680,"line_start":118,"line_end":118,"column_start":1,"column_end":25}},{"value":"/         self.0","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":4681,"byte_end":4699,"line_start":119,"line_end":119,"column_start":1,"column_end":19}},{"value":"/     }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":4700,"byte_end":4709,"line_start":120,"line_end":120,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":4710,"byte_end":4713,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/     fn fill_bytes(&mut self, dest: &mut [u8]) {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":4714,"byte_end":4765,"line_start":122,"line_end":122,"column_start":1,"column_end":52}},{"value":"/         impls::fill_bytes_via_next(self, dest)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":4766,"byte_end":4816,"line_start":123,"line_end":123,"column_start":1,"column_end":51}},{"value":"/     }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":4817,"byte_end":4826,"line_start":124,"line_end":124,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":4827,"byte_end":4830,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/     fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":4831,"byte_end":4907,"line_start":126,"line_end":126,"column_start":1,"column_end":77}},{"value":"/         Ok(self.fill_bytes(dest))","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":4908,"byte_end":4945,"line_start":127,"line_end":127,"column_start":1,"column_end":38}},{"value":"/     }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":4946,"byte_end":4955,"line_start":128,"line_end":128,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":4956,"byte_end":4961,"line_start":129,"line_end":129,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":4962,"byte_end":4969,"line_start":130,"line_end":130,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":4970,"byte_end":4973,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ [`rand`]: https://docs.rs/rand","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":4974,"byte_end":5008,"line_start":132,"line_end":132,"column_start":1,"column_end":35}},{"value":"/ [`try_fill_bytes`]: RngCore::try_fill_bytes","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":5009,"byte_end":5056,"line_start":133,"line_end":133,"column_start":1,"column_end":48}},{"value":"/ [`fill_bytes`]: RngCore::fill_bytes","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":5057,"byte_end":5096,"line_start":134,"line_end":134,"column_start":1,"column_end":40}},{"value":"/ [`next_u32`]: RngCore::next_u32","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":5097,"byte_end":5132,"line_start":135,"line_end":135,"column_start":1,"column_end":36}},{"value":"/ [`next_u64`]: RngCore::next_u64","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":5133,"byte_end":5168,"line_start":136,"line_end":136,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":5495,"byte_end":5503,"line_start":144,"line_end":144,"column_start":8,"column_end":16},"name":"next_u32","qualname":"::RngCore::next_u32","value":"pub fn next_u32(&mut Self) -> u32","parent":{"krate":0,"index":195},"children":[],"decl_id":null,"docs":" Return the next random `u32`.","sig":null,"attributes":[{"value":"/ Return the next random `u32`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":5193,"byte_end":5226,"line_start":138,"line_end":138,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":5231,"byte_end":5234,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ RNGs must implement at least one method from this trait directly. In","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":5239,"byte_end":5311,"line_start":140,"line_end":140,"column_start":5,"column_end":77}},{"value":"/ the case this method is not implemented directly, it can be implemented","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":5316,"byte_end":5391,"line_start":141,"line_end":141,"column_start":5,"column_end":80}},{"value":"/ using `self.next_u64() as u32` or via","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":5396,"byte_end":5437,"line_start":142,"line_end":142,"column_start":5,"column_end":46}},{"value":"/ [`fill_bytes`](impls::next_u32_via_fill).","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":5442,"byte_end":5487,"line_start":143,"line_end":143,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":5841,"byte_end":5849,"line_start":152,"line_end":152,"column_start":8,"column_end":16},"name":"next_u64","qualname":"::RngCore::next_u64","value":"pub fn next_u64(&mut Self) -> u64","parent":{"krate":0,"index":195},"children":[],"decl_id":null,"docs":" Return the next random `u64`.","sig":null,"attributes":[{"value":"/ Return the next random `u64`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":5528,"byte_end":5561,"line_start":146,"line_end":146,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":5566,"byte_end":5569,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ RNGs must implement at least one method from this trait directly. In","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":5574,"byte_end":5646,"line_start":148,"line_end":148,"column_start":5,"column_end":77}},{"value":"/ the case this method is not implemented directly, it can be implemented","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":5651,"byte_end":5726,"line_start":149,"line_end":149,"column_start":5,"column_end":80}},{"value":"/ via [`next_u32`](impls::next_u64_via_u32) or via","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":5731,"byte_end":5783,"line_start":150,"line_end":150,"column_start":5,"column_end":57}},{"value":"/ [`fill_bytes`](impls::next_u64_via_fill).","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":5788,"byte_end":5833,"line_start":151,"line_end":151,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":6622,"byte_end":6632,"line_start":168,"line_end":168,"column_start":8,"column_end":18},"name":"fill_bytes","qualname":"::RngCore::fill_bytes","value":"pub fn fill_bytes(&mut Self, &mut [u8])","parent":{"krate":0,"index":195},"children":[],"decl_id":null,"docs":" Fill `dest` with random data.","sig":null,"attributes":[{"value":"/ Fill `dest` with random data.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":5874,"byte_end":5907,"line_start":154,"line_end":154,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":5912,"byte_end":5915,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ RNGs must implement at least one method from this trait directly. In","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":5920,"byte_end":5992,"line_start":156,"line_end":156,"column_start":5,"column_end":77}},{"value":"/ the case this method is not implemented directly, it can be implemented","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":5997,"byte_end":6072,"line_start":157,"line_end":157,"column_start":5,"column_end":80}},{"value":"/ via [`next_u*`](impls::fill_bytes_via_next) or","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":6077,"byte_end":6127,"line_start":158,"line_end":158,"column_start":5,"column_end":55}},{"value":"/ via [`try_fill_bytes`](RngCore::try_fill_bytes); if this generator can","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":6132,"byte_end":6206,"line_start":159,"line_end":159,"column_start":5,"column_end":79}},{"value":"/ fail the implementation must choose how best to handle errors here","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":6211,"byte_end":6281,"line_start":160,"line_end":160,"column_start":5,"column_end":75}},{"value":"/ (e.g. panic with a descriptive message or log a warning and retry a few","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":6286,"byte_end":6361,"line_start":161,"line_end":161,"column_start":5,"column_end":80}},{"value":"/ times).","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":6366,"byte_end":6377,"line_start":162,"line_end":162,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":6382,"byte_end":6385,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ This method should guarantee that `dest` is entirely filled","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":6390,"byte_end":6453,"line_start":164,"line_end":164,"column_start":5,"column_end":68}},{"value":"/ with new data, and may panic if this is impossible","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":6458,"byte_end":6512,"line_start":165,"line_end":165,"column_start":5,"column_end":59}},{"value":"/ (e.g. reading past the end of a file that is being used as the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":6517,"byte_end":6583,"line_start":166,"line_end":166,"column_start":5,"column_end":71}},{"value":"/ source of randomness).","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":6588,"byte_end":6614,"line_start":167,"line_end":167,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":7359,"byte_end":7373,"line_start":183,"line_end":183,"column_start":8,"column_end":22},"name":"try_fill_bytes","qualname":"::RngCore::try_fill_bytes","value":"pub fn try_fill_bytes(&mut Self, &mut [u8]) -> Result<(), Error>","parent":{"krate":0,"index":195},"children":[],"decl_id":null,"docs":" Fill `dest` entirely with random data.","sig":null,"attributes":[{"value":"/ Fill `dest` entirely with random data.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":6667,"byte_end":6709,"line_start":170,"line_end":170,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":6714,"byte_end":6717,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ This is the only method which allows an RNG to report errors while","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":6722,"byte_end":6792,"line_start":172,"line_end":172,"column_start":5,"column_end":75}},{"value":"/ generating random data thus making this the primary method implemented","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":6797,"byte_end":6871,"line_start":173,"line_end":173,"column_start":5,"column_end":79}},{"value":"/ by external (true) RNGs (e.g. `OsRng`) which can fail. It may be used","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":6876,"byte_end":6949,"line_start":174,"line_end":174,"column_start":5,"column_end":78}},{"value":"/ directly to generate keys and to seed (infallible) PRNGs.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":6954,"byte_end":7015,"line_start":175,"line_end":175,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":7020,"byte_end":7023,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ Other than error handling, this method is identical to [`fill_bytes`];","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":7028,"byte_end":7102,"line_start":177,"line_end":177,"column_start":5,"column_end":79}},{"value":"/ thus this may be implemented using `Ok(self.fill_bytes(dest))` or","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":7107,"byte_end":7176,"line_start":178,"line_end":178,"column_start":5,"column_end":74}},{"value":"/ `fill_bytes` may be implemented with","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":7181,"byte_end":7221,"line_start":179,"line_end":179,"column_start":5,"column_end":45}},{"value":"/ `self.try_fill_bytes(dest).unwrap()` or more specific error handling.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":7226,"byte_end":7299,"line_start":180,"line_end":180,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":7304,"byte_end":7307,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ [`fill_bytes`]: RngCore::fill_bytes","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":7312,"byte_end":7351,"line_start":182,"line_end":182,"column_start":5,"column_end":44}}]},{"kind":"Trait","id":{"krate":0,"index":200},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":8662,"byte_end":8671,"line_start":208,"line_end":208,"column_start":11,"column_end":20},"name":"CryptoRng","qualname":"::CryptoRng","value":"CryptoRng","parent":null,"children":[],"decl_id":null,"docs":" A marker trait used to indicate that an [`RngCore`] or [`BlockRngCore`]\n implementation is supposed to be cryptographically secure.","sig":null,"attributes":[{"value":"/ A marker trait used to indicate that an [`RngCore`] or [`BlockRngCore`]","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":7427,"byte_end":7502,"line_start":186,"line_end":186,"column_start":1,"column_end":76}},{"value":"/ implementation is supposed to be cryptographically secure.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":7503,"byte_end":7565,"line_start":187,"line_end":187,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":7566,"byte_end":7569,"line_start":188,"line_end":188,"column_start":1,"column_end":4}},{"value":"/ *Cryptographically secure generators*, also known as *CSPRNGs*, should","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":7570,"byte_end":7644,"line_start":189,"line_end":189,"column_start":1,"column_end":75}},{"value":"/ satisfy an additional properties over other generators: given the first","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":7645,"byte_end":7720,"line_start":190,"line_end":190,"column_start":1,"column_end":76}},{"value":"/ *k* bits of an algorithm's output","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":7721,"byte_end":7758,"line_start":191,"line_end":191,"column_start":1,"column_end":38}},{"value":"/ sequence, it should not be possible using polynomial-time algorithms to","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":7759,"byte_end":7834,"line_start":192,"line_end":192,"column_start":1,"column_end":76}},{"value":"/ predict the next bit with probability significantly greater than 50%.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":7835,"byte_end":7908,"line_start":193,"line_end":193,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":7909,"byte_end":7912,"line_start":194,"line_end":194,"column_start":1,"column_end":4}},{"value":"/ Some generators may satisfy an additional property, however this is not","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":7913,"byte_end":7988,"line_start":195,"line_end":195,"column_start":1,"column_end":76}},{"value":"/ required by this trait: if the CSPRNG's state is revealed, it should not be","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":7989,"byte_end":8068,"line_start":196,"line_end":196,"column_start":1,"column_end":80}},{"value":"/ computationally-feasible to reconstruct output prior to this. Some other","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":8069,"byte_end":8145,"line_start":197,"line_end":197,"column_start":1,"column_end":77}},{"value":"/ generators allow backwards-computation and are consided *reversible*.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":8146,"byte_end":8219,"line_start":198,"line_end":198,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":8220,"byte_end":8223,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ Note that this trait is provided for guidance only and cannot guarantee","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":8224,"byte_end":8299,"line_start":200,"line_end":200,"column_start":1,"column_end":76}},{"value":"/ suitability for cryptographic applications. In general it should only be","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":8300,"byte_end":8376,"line_start":201,"line_end":201,"column_start":1,"column_end":77}},{"value":"/ implemented for well-reviewed code implementing well-regarded algorithms.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":8377,"byte_end":8454,"line_start":202,"line_end":202,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":8455,"byte_end":8458,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ Note also that use of a `CryptoRng` does not protect against other","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":8459,"byte_end":8529,"line_start":204,"line_end":204,"column_start":1,"column_end":71}},{"value":"/ weaknesses such as seeding from a weak entropy source or leaking state.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":8530,"byte_end":8605,"line_start":205,"line_end":205,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":8606,"byte_end":8609,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ [`BlockRngCore`]: block::BlockRngCore","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":8610,"byte_end":8651,"line_start":207,"line_end":207,"column_start":1,"column_end":42}}]},{"kind":"Trait","id":{"krate":0,"index":201},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":8932,"byte_end":8943,"line_start":216,"line_end":216,"column_start":11,"column_end":22},"name":"SeedableRng","qualname":"::SeedableRng","value":"SeedableRng: Sized","parent":null,"children":[{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":207},{"krate":0,"index":209}],"decl_id":null,"docs":" A random number generator that can be explicitly seeded.","sig":null,"attributes":[{"value":"/ A random number generator that can be explicitly seeded.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":8676,"byte_end":8736,"line_start":210,"line_end":210,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":8737,"byte_end":8740,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"/ This trait encapsulates the low-level functionality common to all","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":8741,"byte_end":8810,"line_start":212,"line_end":212,"column_start":1,"column_end":70}},{"value":"/ pseudo-random number generators (PRNGs, or algorithmic generators).","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":8811,"byte_end":8882,"line_start":213,"line_end":213,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":8883,"byte_end":8886,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ [`rand`]: https://docs.rs/rand","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":8887,"byte_end":8921,"line_start":215,"line_end":215,"column_start":1,"column_end":35}}]},{"kind":"Type","id":{"krate":0,"index":202},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":10461,"byte_end":10465,"line_start":262,"line_end":262,"column_start":10,"column_end":14},"name":"Seed","qualname":"::SeedableRng::Seed","value":"type Seed: Sized + Default + AsMut<[u8]>;","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Seed type, which is restricted to types mutably-dereferencable as `u8`\n arrays (we recommend `[u8; N]` for some `N`).","sig":null,"attributes":[{"value":"/ Seed type, which is restricted to types mutably-dereferencable as `u8`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":8957,"byte_end":9031,"line_start":217,"line_end":217,"column_start":5,"column_end":79}},{"value":"/ arrays (we recommend `[u8; N]` for some `N`).","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":9036,"byte_end":9085,"line_start":218,"line_end":218,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":9090,"byte_end":9093,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ It is recommended to seed PRNGs with a seed of at least circa 100 bits,","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":9098,"byte_end":9173,"line_start":220,"line_end":220,"column_start":5,"column_end":80}},{"value":"/ which means an array of `[u8; 12]` or greater to avoid picking RNGs with","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":9178,"byte_end":9254,"line_start":221,"line_end":221,"column_start":5,"column_end":81}},{"value":"/ partially overlapping periods.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":9259,"byte_end":9293,"line_start":222,"line_end":222,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":9298,"byte_end":9301,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ For cryptographic RNG's a seed of 256 bits is recommended, `[u8; 32]`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":9306,"byte_end":9380,"line_start":224,"line_end":224,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":9385,"byte_end":9388,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":9393,"byte_end":9396,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ # Implementing `SeedableRng` for RNGs with large seeds","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":9401,"byte_end":9459,"line_start":227,"line_end":227,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":9464,"byte_end":9467,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ Note that the required traits `core::default::Default` and","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":9472,"byte_end":9534,"line_start":229,"line_end":229,"column_start":5,"column_end":67}},{"value":"/ `core::convert::AsMut<u8>` are not implemented for large arrays","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":9539,"byte_end":9606,"line_start":230,"line_end":230,"column_start":5,"column_end":72}},{"value":"/ `[u8; N]` with `N` > 32. To be able to implement the traits required by","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":9611,"byte_end":9686,"line_start":231,"line_end":231,"column_start":5,"column_end":80}},{"value":"/ `SeedableRng` for RNGs with such large seeds, the newtype pattern can be","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":9691,"byte_end":9767,"line_start":232,"line_end":232,"column_start":5,"column_end":81}},{"value":"/ used:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":9772,"byte_end":9781,"line_start":233,"line_end":233,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":9786,"byte_end":9789,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":9794,"byte_end":9801,"line_start":235,"line_end":235,"column_start":5,"column_end":12}},{"value":"/ use rand_core::SeedableRng;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":9806,"byte_end":9837,"line_start":236,"line_end":236,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":9842,"byte_end":9845,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ const N: usize = 64;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":9850,"byte_end":9874,"line_start":238,"line_end":238,"column_start":5,"column_end":29}},{"value":"/ pub struct MyRngSeed(pub [u8; N]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":9879,"byte_end":9917,"line_start":239,"line_end":239,"column_start":5,"column_end":43}},{"value":"/ pub struct MyRng(MyRngSeed);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":9922,"byte_end":9954,"line_start":240,"line_end":240,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":9959,"byte_end":9962,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ impl Default for MyRngSeed {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":9967,"byte_end":9999,"line_start":242,"line_end":242,"column_start":5,"column_end":37}},{"value":"/     fn default() -> MyRngSeed {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":10004,"byte_end":10039,"line_start":243,"line_end":243,"column_start":5,"column_end":40}},{"value":"/         MyRngSeed([0; N])","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":10044,"byte_end":10073,"line_start":244,"line_end":244,"column_start":5,"column_end":34}},{"value":"/     }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":10078,"byte_end":10087,"line_start":245,"line_end":245,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":10092,"byte_end":10097,"line_start":246,"line_end":246,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":10102,"byte_end":10105,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ impl AsMut<[u8]> for MyRngSeed {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":10110,"byte_end":10146,"line_start":248,"line_end":248,"column_start":5,"column_end":41}},{"value":"/     fn as_mut(&mut self) -> &mut [u8] {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":10151,"byte_end":10194,"line_start":249,"line_end":249,"column_start":5,"column_end":48}},{"value":"/         &mut self.0","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":10199,"byte_end":10222,"line_start":250,"line_end":250,"column_start":5,"column_end":28}},{"value":"/     }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":10227,"byte_end":10236,"line_start":251,"line_end":251,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":10241,"byte_end":10246,"line_start":252,"line_end":252,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":10251,"byte_end":10254,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ impl SeedableRng for MyRng {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":10259,"byte_end":10291,"line_start":254,"line_end":254,"column_start":5,"column_end":37}},{"value":"/     type Seed = MyRngSeed;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":10296,"byte_end":10326,"line_start":255,"line_end":255,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":10331,"byte_end":10334,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/     fn from_seed(seed: MyRngSeed) -> MyRng {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":10339,"byte_end":10387,"line_start":257,"line_end":257,"column_start":5,"column_end":53}},{"value":"/         MyRng(seed)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":10392,"byte_end":10415,"line_start":258,"line_end":258,"column_start":5,"column_end":28}},{"value":"/     }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":10420,"byte_end":10429,"line_start":259,"line_end":259,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":10434,"byte_end":10439,"line_start":260,"line_end":260,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":10444,"byte_end":10451,"line_start":261,"line_end":261,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":12047,"byte_end":12056,"line_start":289,"line_end":289,"column_start":8,"column_end":17},"name":"from_seed","qualname":"::SeedableRng::from_seed","value":"pub fn from_seed(Self::Seed) -> Self","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Create a new PRNG using the given seed.","sig":null,"attributes":[{"value":"/ Create a new PRNG using the given seed.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":10503,"byte_end":10546,"line_start":264,"line_end":264,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":10551,"byte_end":10554,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ PRNG implementations are allowed to assume that bits in the seed are","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":10559,"byte_end":10631,"line_start":266,"line_end":266,"column_start":5,"column_end":77}},{"value":"/ well distributed. That means usually that the number of one and zero","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":10636,"byte_end":10708,"line_start":267,"line_end":267,"column_start":5,"column_end":77}},{"value":"/ bits are roughly equal, and values like 0, 1 and (size - 1) are unlikely.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":10713,"byte_end":10790,"line_start":268,"line_end":268,"column_start":5,"column_end":82}},{"value":"/ Note that many non-cryptographic PRNGs will show poor quality output","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":10795,"byte_end":10867,"line_start":269,"line_end":269,"column_start":5,"column_end":77}},{"value":"/ if this is not adhered to. If you wish to seed from simple numbers, use","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":10872,"byte_end":10947,"line_start":270,"line_end":270,"column_start":5,"column_end":80}},{"value":"/ `seed_from_u64` instead.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":10952,"byte_end":10980,"line_start":271,"line_end":271,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":10985,"byte_end":10988,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ All PRNG implementations should be reproducible unless otherwise noted:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":10993,"byte_end":11068,"line_start":273,"line_end":273,"column_start":5,"column_end":80}},{"value":"/ given a fixed `seed`, the same sequence of output should be produced","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":11073,"byte_end":11145,"line_start":274,"line_end":274,"column_start":5,"column_end":77}},{"value":"/ on all runs, library versions and architectures (e.g. check endianness).","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":11150,"byte_end":11226,"line_start":275,"line_end":275,"column_start":5,"column_end":81}},{"value":"/ Any \"value-breaking\" changes to the generator should require bumping at","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":11231,"byte_end":11306,"line_start":276,"line_end":276,"column_start":5,"column_end":80}},{"value":"/ least the minor version and documentation of the change.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":11311,"byte_end":11371,"line_start":277,"line_end":277,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":11376,"byte_end":11379,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ It is not required that this function yield the same state as a","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":11384,"byte_end":11451,"line_start":279,"line_end":279,"column_start":5,"column_end":72}},{"value":"/ reference implementation of the PRNG given equivalent seed; if necessary","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":11456,"byte_end":11532,"line_start":280,"line_end":280,"column_start":5,"column_end":81}},{"value":"/ another constructor replicating behaviour from a reference","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":11537,"byte_end":11599,"line_start":281,"line_end":281,"column_start":5,"column_end":67}},{"value":"/ implementation can be added.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":11604,"byte_end":11636,"line_start":282,"line_end":282,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":11641,"byte_end":11644,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ PRNG implementations should make sure `from_seed` never panics. In the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":11649,"byte_end":11723,"line_start":284,"line_end":284,"column_start":5,"column_end":79}},{"value":"/ case that some special values (like an all zero seed) are not viable","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":11728,"byte_end":11800,"line_start":285,"line_end":285,"column_start":5,"column_end":77}},{"value":"/ seeds it is preferable to map these to alternative constant value(s),","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":11805,"byte_end":11878,"line_start":286,"line_end":286,"column_start":5,"column_end":78}},{"value":"/ for example `0xBAD5EEDu32` or `0x0DDB1A5E5BAD5EEDu64` (\"odd biases? bad","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":11883,"byte_end":11958,"line_start":287,"line_end":287,"column_start":5,"column_end":80}},{"value":"/ seed\"). This is assuming only a small number of values must be rejected.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":11963,"byte_end":12039,"line_start":288,"line_end":288,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":12873,"byte_end":12886,"line_start":305,"line_end":305,"column_start":8,"column_end":21},"name":"seed_from_u64","qualname":"::SeedableRng::seed_from_u64","value":"pub fn seed_from_u64(u64) -> Self","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Create a new PRNG using a `u64` seed.","sig":null,"attributes":[{"value":"/ Create a new PRNG using a `u64` seed.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":12089,"byte_end":12130,"line_start":291,"line_end":291,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":12135,"byte_end":12138,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ This is a convenience-wrapper around `from_seed` to allow construction","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":12143,"byte_end":12217,"line_start":293,"line_end":293,"column_start":5,"column_end":79}},{"value":"/ of any `SeedableRng` from a simple `u64` value. It is designed such that","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":12222,"byte_end":12298,"line_start":294,"line_end":294,"column_start":5,"column_end":81}},{"value":"/ low Hamming Weight numbers like 0 and 1 can be used and should still","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":12303,"byte_end":12375,"line_start":295,"line_end":295,"column_start":5,"column_end":77}},{"value":"/ result in good, independent seeds to the PRNG which is returned.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":12380,"byte_end":12448,"line_start":296,"line_end":296,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":12453,"byte_end":12456,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ This **is not suitable for cryptography**, as should be clear given that","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":12461,"byte_end":12537,"line_start":298,"line_end":298,"column_start":5,"column_end":81}},{"value":"/ the input size is only 64 bits.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":12542,"byte_end":12577,"line_start":299,"line_end":299,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":12582,"byte_end":12585,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ Implementations for PRNGs *may* provide their own implementations of","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":12590,"byte_end":12662,"line_start":301,"line_end":301,"column_start":5,"column_end":77}},{"value":"/ this function, but the default implementation should be good enough for","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":12667,"byte_end":12742,"line_start":302,"line_end":302,"column_start":5,"column_end":80}},{"value":"/ all purposes. *Changing* the implementation of this function should be","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":12747,"byte_end":12821,"line_start":303,"line_end":303,"column_start":5,"column_end":79}},{"value":"/ considered a value-breaking change.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":12826,"byte_end":12865,"line_start":304,"line_end":304,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":15181,"byte_end":15189,"line_start":355,"line_end":355,"column_start":8,"column_end":16},"name":"from_rng","qualname":"::SeedableRng::from_rng","value":"pub fn from_rng<R: RngCore>(R) -> Result<Self, Error>","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Create a new PRNG seeded from another `Rng`.","sig":null,"attributes":[{"value":"/ Create a new PRNG seeded from another `Rng`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":13821,"byte_end":13869,"line_start":330,"line_end":330,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":13874,"byte_end":13877,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ This may be useful when needing to rapidly seed many PRNGs from a master","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":13882,"byte_end":13958,"line_start":332,"line_end":332,"column_start":5,"column_end":81}},{"value":"/ PRNG, and to allow forking of PRNGs. It may be considered deterministic.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":13963,"byte_end":14039,"line_start":333,"line_end":333,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":14044,"byte_end":14047,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ The master PRNG should be at least as high quality as the child PRNGs.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":14052,"byte_end":14126,"line_start":335,"line_end":335,"column_start":5,"column_end":79}},{"value":"/ When seeding non-cryptographic child PRNGs, we recommend using a","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":14131,"byte_end":14199,"line_start":336,"line_end":336,"column_start":5,"column_end":73}},{"value":"/ different algorithm for the master PRNG (ideally a CSPRNG) to avoid","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":14204,"byte_end":14275,"line_start":337,"line_end":337,"column_start":5,"column_end":76}},{"value":"/ correlations between the child PRNGs. If this is not possible (e.g.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":14280,"byte_end":14351,"line_start":338,"line_end":338,"column_start":5,"column_end":76}},{"value":"/ forking using small non-crypto PRNGs) ensure that your PRNG has a good","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":14356,"byte_end":14430,"line_start":339,"line_end":339,"column_start":5,"column_end":79}},{"value":"/ mixing function on the output or consider use of a hash function with","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":14435,"byte_end":14508,"line_start":340,"line_end":340,"column_start":5,"column_end":78}},{"value":"/ `from_seed`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":14513,"byte_end":14529,"line_start":341,"line_end":341,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":14534,"byte_end":14537,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ Note that seeding `XorShiftRng` from another `XorShiftRng` provides an","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":14542,"byte_end":14616,"line_start":343,"line_end":343,"column_start":5,"column_end":79}},{"value":"/ extreme example of what can go wrong: the new PRNG will be a clone","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":14621,"byte_end":14691,"line_start":344,"line_end":344,"column_start":5,"column_end":75}},{"value":"/ of the parent.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":14696,"byte_end":14714,"line_start":345,"line_end":345,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":14719,"byte_end":14722,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ PRNG implementations are allowed to assume that a good RNG is provided","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":14727,"byte_end":14801,"line_start":347,"line_end":347,"column_start":5,"column_end":79}},{"value":"/ for seeding, and that it is cryptographically secure when appropriate.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":14806,"byte_end":14880,"line_start":348,"line_end":348,"column_start":5,"column_end":79}},{"value":"/ As of `rand` 0.7 / `rand_core` 0.5, implementations overriding this","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":14885,"byte_end":14956,"line_start":349,"line_end":349,"column_start":5,"column_end":76}},{"value":"/ method should ensure the implementation satisfies reproducibility","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":14961,"byte_end":15030,"line_start":350,"line_end":350,"column_start":5,"column_end":74}},{"value":"/ (in prior versions this was not required).","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":15035,"byte_end":15081,"line_start":351,"line_end":351,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":15086,"byte_end":15089,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ [`rand`]: https://docs.rs/rand","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":15094,"byte_end":15128,"line_start":353,"line_end":353,"column_start":5,"column_end":39}},{"value":"/ [`rand_os`]: https://docs.rs/rand_os","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":15133,"byte_end":15173,"line_start":354,"line_end":354,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":15975,"byte_end":15987,"line_start":376,"line_end":376,"column_start":8,"column_end":20},"name":"from_entropy","qualname":"::SeedableRng::from_entropy","value":"pub fn from_entropy() -> Self","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" Creates a new instance of the RNG seeded via [`getrandom`].","sig":null,"attributes":[{"value":"/ Creates a new instance of the RNG seeded via [`getrandom`].","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":15374,"byte_end":15437,"line_start":361,"line_end":361,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":15442,"byte_end":15445,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ This method is the recommended way to construct non-deterministic PRNGs","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":15450,"byte_end":15525,"line_start":363,"line_end":363,"column_start":5,"column_end":80}},{"value":"/ since it is convenient and secure.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":15530,"byte_end":15568,"line_start":364,"line_end":364,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":15573,"byte_end":15576,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ In case the overhead of using [`getrandom`] to seed *many* PRNGs is an","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":15581,"byte_end":15655,"line_start":366,"line_end":366,"column_start":5,"column_end":79}},{"value":"/ issue, one may prefer to seed from a local PRNG, e.g.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":15660,"byte_end":15717,"line_start":367,"line_end":367,"column_start":5,"column_end":62}},{"value":"/ `from_rng(thread_rng()).unwrap()`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":15722,"byte_end":15760,"line_start":368,"line_end":368,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":15765,"byte_end":15768,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":15773,"byte_end":15785,"line_start":370,"line_end":370,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":15790,"byte_end":15793,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ If [`getrandom`] is unable to provide secure entropy this method will panic.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":15798,"byte_end":15878,"line_start":372,"line_end":372,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":15883,"byte_end":15886,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ [`getrandom`]: https://docs.rs/getrandom","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":15891,"byte_end":15935,"line_start":374,"line_end":374,"column_start":5,"column_end":49}},{"value":"cfg(feature = \"getrandom\")","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":15940,"byte_end":15967,"line_start":375,"line_end":375,"column_start":5,"column_end":32}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":20219,"byte_end":20224,"line_start":27,"line_end":27,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":28},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":23015,"byte_end":23020,"line_start":105,"line_end":105,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":38}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":23452,"byte_end":23457,"line_start":119,"line_end":119,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":40}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":23865,"byte_end":23870,"line_start":133,"line_end":133,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":42}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":24167,"byte_end":24172,"line_start":146,"line_end":146,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":44}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":24469,"byte_end":24474,"line_start":159,"line_end":159,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":46}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":24649,"byte_end":24654,"line_start":167,"line_end":167,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":25039,"byte_end":25048,"line_start":183,"line_end":183,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":50}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":25211,"byte_end":25220,"line_start":190,"line_end":190,"column_start":28,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":30092,"byte_end":30100,"line_start":122,"line_end":122,"column_start":51,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":89}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":30396,"byte_end":30404,"line_start":132,"line_end":132,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":31663,"byte_end":31671,"line_start":172,"line_end":172,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":101},{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":33878,"byte_end":33886,"line_start":242,"line_end":242,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":35851,"byte_end":35861,"line_start":296,"line_end":296,"column_start":51,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":112}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":36207,"byte_end":36217,"line_start":307,"line_end":307,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":37574,"byte_end":37584,"line_start":350,"line_end":350,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":39620,"byte_end":39630,"line_start":418,"line_end":418,"column_start":53,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":40068,"byte_end":40076,"line_start":437,"line_end":437,"column_start":49,"column_end":57},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/os.rs","byte_start":49456,"byte_end":49461,"line_start":50,"line_end":50,"column_start":20,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/os.rs","byte_start":49483,"byte_end":49488,"line_start":52,"line_end":52,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":17134,"byte_end":17137,"line_start":414,"line_end":414,"column_start":39,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":18031,"byte_end":18034,"line_start":449,"line_end":449,"column_start":43,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":1917,"byte_end":1922,"line_start":55,"line_end":55,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":52}},{"kind":"Mod","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":1932,"byte_end":1937,"line_start":56,"line_end":56,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":134}},{"kind":"Mod","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":1947,"byte_end":1949,"line_start":57,"line_end":57,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":165}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":20219,"byte_end":20224,"line_start":27,"line_end":27,"column_start":6,"column_end":11},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":25},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":23015,"byte_end":23020,"line_start":105,"line_end":105,"column_start":21,"column_end":26},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":25},"to":{"krate":2,"index":8894}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":23452,"byte_end":23457,"line_start":119,"line_end":119,"column_start":23,"column_end":28},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":25},"to":{"krate":2,"index":8901}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":23865,"byte_end":23870,"line_start":133,"line_end":133,"column_start":27,"column_end":32},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":25},"to":{"krate":2,"index":2755}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":24167,"byte_end":24172,"line_start":146,"line_end":146,"column_start":33,"column_end":38},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":25},"to":{"krate":2,"index":2755}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":24469,"byte_end":24474,"line_start":159,"line_end":159,"column_start":28,"column_end":33},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":25},"to":{"krate":1,"index":2326}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":24649,"byte_end":24654,"line_start":167,"line_end":167,"column_start":31,"column_end":36},"kind":{"Impl":{"id":6}},"from":{"krate":1,"index":3753},"to":{"krate":2,"index":2755}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":25039,"byte_end":25048,"line_start":183,"line_end":183,"column_start":23,"column_end":32},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":230},"to":{"krate":2,"index":8901}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":25211,"byte_end":25220,"line_start":190,"line_end":190,"column_start":28,"column_end":37},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":230},"to":{"krate":1,"index":2326}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":30092,"byte_end":30100,"line_start":122,"line_end":122,"column_start":51,"column_end":59},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":238},"to":{"krate":2,"index":8894}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":30396,"byte_end":30404,"line_start":132,"line_end":132,"column_start":23,"column_end":31},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":238},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":31663,"byte_end":31671,"line_start":172,"line_end":172,"column_start":45,"column_end":53},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":238},"to":{"krate":0,"index":195}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":33878,"byte_end":33886,"line_start":242,"line_end":242,"column_start":53,"column_end":61},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":238},"to":{"krate":0,"index":201}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":35851,"byte_end":35861,"line_start":296,"line_end":296,"column_start":51,"column_end":61},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":246},"to":{"krate":2,"index":8894}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":36207,"byte_end":36217,"line_start":307,"line_end":307,"column_start":23,"column_end":33},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":246},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":37574,"byte_end":37584,"line_start":350,"line_end":350,"column_start":45,"column_end":55},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":246},"to":{"krate":0,"index":195}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":39620,"byte_end":39630,"line_start":418,"line_end":418,"column_start":53,"column_end":63},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":246},"to":{"krate":0,"index":201}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":40068,"byte_end":40076,"line_start":437,"line_end":437,"column_start":49,"column_end":57},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":238},"to":{"krate":0,"index":200}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/os.rs","byte_start":49456,"byte_end":49461,"line_start":50,"line_end":50,"column_start":20,"column_end":25},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":255},"to":{"krate":0,"index":200}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/os.rs","byte_start":49483,"byte_end":49488,"line_start":52,"line_end":52,"column_start":18,"column_end":23},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":255},"to":{"krate":0,"index":195}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":8945,"byte_end":8950,"line_start":216,"line_end":216,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":2854},"to":{"krate":0,"index":201}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":17134,"byte_end":17137,"line_start":414,"line_end":414,"column_start":39,"column_end":42},"kind":{"Impl":{"id":20}},"from":{"krate":5,"index":196},"to":{"krate":0,"index":195}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":18031,"byte_end":18034,"line_start":449,"line_end":449,"column_start":43,"column_end":46},"kind":{"Impl":{"id":21}},"from":{"krate":5,"index":196},"to":{"krate":0,"index":200}}]}
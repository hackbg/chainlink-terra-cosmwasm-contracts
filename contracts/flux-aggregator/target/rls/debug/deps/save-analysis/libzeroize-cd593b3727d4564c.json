{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0","program":"/home/denis/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","zeroize","--edition=2018","/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","-C","metadata=cd593b3727d4564c","-C","extra-filename=-cd593b3727d4564c","--out-dir","/home/denis/Documents/coding/hack/chainlink-terra-cosmwasm-contracts/contracts/flux-aggregator/target/rls/debug/deps","-C","linker=x86_64-linux-gnu-gcc","-L","dependency=/home/denis/Documents/coding/hack/chainlink-terra-cosmwasm-contracts/contracts/flux-aggregator/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/denis/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":"/home/denis/Documents/coding/hack/chainlink-terra-cosmwasm-contracts/contracts/flux-aggregator/target/rls/debug/deps/libzeroize-cd593b3727d4564c.rmeta"},"prelude":{"crate_id":{"name":"zeroize","disambiguator":[4196693835647716122,2424233725925652009]},"crate_root":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src","external_crates":[{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[17044353007700780372,2918200604221815240]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[16381423150204372411,13484601183843768894]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[14897589902885170584,12420159477491062790]}},{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[4001252548733048619,17242313319436819942]}}],"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":0,"byte_end":21262,"line_start":1,"line_end":629,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":0,"byte_end":21262,"line_start":1,"line_end":629,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":35},{"krate":0,"index":38},{"krate":0,"index":41},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":119},{"krate":0,"index":123},{"krate":0,"index":127},{"krate":0,"index":131},{"krate":0,"index":135},{"krate":0,"index":139},{"krate":0,"index":143},{"krate":0,"index":147},{"krate":0,"index":151},{"krate":0,"index":155},{"krate":0,"index":159},{"krate":0,"index":163},{"krate":0,"index":167},{"krate":0,"index":171},{"krate":0,"index":175},{"krate":0,"index":179},{"krate":0,"index":183},{"krate":0,"index":187},{"krate":0,"index":191},{"krate":0,"index":195},{"krate":0,"index":199},{"krate":0,"index":203},{"krate":0,"index":207},{"krate":0,"index":211},{"krate":0,"index":215},{"krate":0,"index":219},{"krate":0,"index":223},{"krate":0,"index":227},{"krate":0,"index":231},{"krate":0,"index":235},{"krate":0,"index":239},{"krate":0,"index":243},{"krate":0,"index":247},{"krate":0,"index":251},{"krate":0,"index":255},{"krate":0,"index":259},{"krate":0,"index":263},{"krate":0,"index":267},{"krate":0,"index":271},{"krate":0,"index":275},{"krate":0,"index":279},{"krate":0,"index":283},{"krate":0,"index":287},{"krate":0,"index":291},{"krate":0,"index":295},{"krate":0,"index":299},{"krate":0,"index":303},{"krate":0,"index":307},{"krate":0,"index":311},{"krate":0,"index":315},{"krate":0,"index":319},{"krate":0,"index":323},{"krate":0,"index":327},{"krate":0,"index":331},{"krate":0,"index":335},{"krate":0,"index":339},{"krate":0,"index":343},{"krate":0,"index":347},{"krate":0,"index":351},{"krate":0,"index":355},{"krate":0,"index":359},{"krate":0,"index":363},{"krate":0,"index":367},{"krate":0,"index":49},{"krate":0,"index":53},{"krate":0,"index":56},{"krate":0,"index":59},{"krate":0,"index":62},{"krate":0,"index":65},{"krate":0,"index":67},{"krate":0,"index":371},{"krate":0,"index":375},{"krate":0,"index":378},{"krate":0,"index":381},{"krate":0,"index":383},{"krate":0,"index":386},{"krate":0,"index":388},{"krate":0,"index":69},{"krate":0,"index":72},{"krate":0,"index":75},{"krate":0,"index":79},{"krate":0,"index":82},{"krate":0,"index":85},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":91}],"decl_id":null,"docs":" Securely zero memory with a simple trait ([Zeroize]) built on stable Rust\n primitives which guarantee the operation will not be \"optimized away\".","sig":null,"attributes":[{"value":"/ Securely zero memory with a simple trait ([Zeroize]) built on stable Rust","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":0,"byte_end":77,"line_start":1,"line_end":1,"column_start":1,"column_end":78}},{"value":"/ primitives which guarantee the operation will not be \"optimized away\".","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":78,"byte_end":152,"line_start":2,"line_end":2,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":153,"byte_end":156,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ ## About","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":157,"byte_end":169,"line_start":4,"line_end":4,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":170,"byte_end":173,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ [Zeroing memory securely is hard] - compilers optimize for performance, and","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":174,"byte_end":253,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/ in doing so they love to \"optimize away\" unnecessary zeroing calls. There are","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":254,"byte_end":335,"line_start":7,"line_end":7,"column_start":1,"column_end":82}},{"value":"/ many documented \"tricks\" to attempt to avoid these optimizations and ensure","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":336,"byte_end":415,"line_start":8,"line_end":8,"column_start":1,"column_end":80}},{"value":"/ that a zeroing routine is performed reliably.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":416,"byte_end":465,"line_start":9,"line_end":9,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":466,"byte_end":469,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This crate isn't about tricks: it uses [core::ptr::write_volatile]","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":470,"byte_end":540,"line_start":11,"line_end":11,"column_start":1,"column_end":71}},{"value":"/ and [core::sync::atomic] memory fences to provide easy-to-use, portable","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":541,"byte_end":616,"line_start":12,"line_end":12,"column_start":1,"column_end":76}},{"value":"/ zeroing behavior which works on all of Rust's core number types and slices","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":617,"byte_end":695,"line_start":13,"line_end":13,"column_start":1,"column_end":79}},{"value":"/ thereof, implemented in pure Rust with no usage of FFI or assembly.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":696,"byte_end":767,"line_start":14,"line_end":14,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":768,"byte_end":771,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ - No insecure fallbacks!","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":772,"byte_end":800,"line_start":16,"line_end":16,"column_start":1,"column_end":29}},{"value":"/ - No dependencies!","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":801,"byte_end":823,"line_start":17,"line_end":17,"column_start":1,"column_end":23}},{"value":"/ - No FFI or inline assembly! **WASM friendly** (and tested)!","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":824,"byte_end":888,"line_start":18,"line_end":18,"column_start":1,"column_end":65}},{"value":"/ - `#![no_std]` i.e. **embedded-friendly**!","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":889,"byte_end":935,"line_start":19,"line_end":19,"column_start":1,"column_end":47}},{"value":"/ - No functionality besides securely zeroing memory!","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":936,"byte_end":991,"line_start":20,"line_end":20,"column_start":1,"column_end":56}},{"value":"/ - (Optional) Custom derive support for zeroing complex structures","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":992,"byte_end":1061,"line_start":21,"line_end":21,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":1062,"byte_end":1065,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ ## Minimum Supported Rust Version","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":1066,"byte_end":1103,"line_start":23,"line_end":23,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":1104,"byte_end":1107,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ Requires Rust **1.47** or newer.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":1108,"byte_end":1144,"line_start":25,"line_end":25,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":1145,"byte_end":1148,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ In the future, we reserve the right to change MSRV (i.e. MSRV is out-of-scope","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":1149,"byte_end":1230,"line_start":27,"line_end":27,"column_start":1,"column_end":82}},{"value":"/ for this crate's SemVer guarantees), however when we do it will be accompanied","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":1231,"byte_end":1313,"line_start":28,"line_end":28,"column_start":1,"column_end":83}},{"value":"/ by a minor version bump.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":1314,"byte_end":1342,"line_start":29,"line_end":29,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":1343,"byte_end":1346,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ ## Usage","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":1347,"byte_end":1359,"line_start":31,"line_end":31,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":1360,"byte_end":1363,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":1364,"byte_end":1371,"line_start":33,"line_end":33,"column_start":1,"column_end":8}},{"value":"/ use zeroize::Zeroize;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":1372,"byte_end":1397,"line_start":34,"line_end":34,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":1398,"byte_end":1401,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":1402,"byte_end":1417,"line_start":36,"line_end":36,"column_start":1,"column_end":16}},{"value":"/     // Protip: don't embed secrets in your source code.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":1418,"byte_end":1477,"line_start":37,"line_end":37,"column_start":1,"column_end":60}},{"value":"/     // This is just an example.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":1478,"byte_end":1513,"line_start":38,"line_end":38,"column_start":1,"column_end":36}},{"value":"/     let mut secret = b\"Air shield password: 1,2,3,4,5\".to_vec();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":1514,"byte_end":1582,"line_start":39,"line_end":39,"column_start":1,"column_end":69}},{"value":"/     // [ ... ] open the air shield here","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":1583,"byte_end":1626,"line_start":40,"line_end":40,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":1627,"byte_end":1630,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/     // Now that we're done using the secret, zero it out.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":1631,"byte_end":1692,"line_start":42,"line_end":42,"column_start":1,"column_end":62}},{"value":"/     secret.zeroize();","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":1693,"byte_end":1718,"line_start":43,"line_end":43,"column_start":1,"column_end":26}},{"value":"/ }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":1719,"byte_end":1724,"line_start":44,"line_end":44,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":1725,"byte_end":1732,"line_start":45,"line_end":45,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":1733,"byte_end":1736,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ The [Zeroize] trait is impl'd on all of Rust's core scalar types including","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":1737,"byte_end":1815,"line_start":47,"line_end":47,"column_start":1,"column_end":79}},{"value":"/ integers, floats, `bool`, and `char`.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":1816,"byte_end":1857,"line_start":48,"line_end":48,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":1858,"byte_end":1861,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ Additionally, it's implemented on slices and `IterMut`s of the above types.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":1862,"byte_end":1941,"line_start":50,"line_end":50,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":1942,"byte_end":1945,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ When the `alloc` feature is enabled (which it is by default), it's also","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":1946,"byte_end":2021,"line_start":52,"line_end":52,"column_start":1,"column_end":76}},{"value":"/ impl'd for `Vec<T>` for the above types as well as `String`, where it provides","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":2022,"byte_end":2104,"line_start":53,"line_end":53,"column_start":1,"column_end":83}},{"value":"/ [Vec::clear()] / [String::clear()]-like behavior (truncating to zero-length)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":2105,"byte_end":2185,"line_start":54,"line_end":54,"column_start":1,"column_end":81}},{"value":"/ but ensures the backing memory is securely zeroed with some caveats.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":2186,"byte_end":2258,"line_start":55,"line_end":55,"column_start":1,"column_end":73}},{"value":"/ (NOTE: see \"Stack/Heap Zeroing Notes\" for important `Vec`/`String` details)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":2259,"byte_end":2338,"line_start":56,"line_end":56,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":2339,"byte_end":2342,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ The [DefaultIsZeroes] marker trait can be impl'd on types which also","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":2343,"byte_end":2415,"line_start":58,"line_end":58,"column_start":1,"column_end":73}},{"value":"/ impl [Default], which implements [Zeroize] by overwriting a value with","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":2416,"byte_end":2490,"line_start":59,"line_end":59,"column_start":1,"column_end":75}},{"value":"/ the default value.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":2491,"byte_end":2513,"line_start":60,"line_end":60,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":2514,"byte_end":2517,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ ## Custom Derive Support","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":2518,"byte_end":2546,"line_start":62,"line_end":62,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":2547,"byte_end":2550,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ This crate has custom derive support for the `Zeroize` trait,","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":2551,"byte_end":2616,"line_start":64,"line_end":64,"column_start":1,"column_end":66}},{"value":"/ gated under the `zeroize` crate's `zeroize_derive` Cargo feature,","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":2617,"byte_end":2686,"line_start":65,"line_end":65,"column_start":1,"column_end":70}},{"value":"/ which automatically calls `zeroize()` on all members of a struct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":2687,"byte_end":2755,"line_start":66,"line_end":66,"column_start":1,"column_end":69}},{"value":"/ or tuple struct.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":2756,"byte_end":2776,"line_start":67,"line_end":67,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":2777,"byte_end":2780,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ Additionally it supports the following attribute:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":2781,"byte_end":2834,"line_start":69,"line_end":69,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":2835,"byte_end":2838,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ - `#[zeroize(drop)]`: call `zeroize()` when this item is dropped","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":2839,"byte_end":2907,"line_start":71,"line_end":71,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":2908,"byte_end":2911,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ Example which derives `Drop`:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":2912,"byte_end":2945,"line_start":73,"line_end":73,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":2946,"byte_end":2949,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":2950,"byte_end":2957,"line_start":75,"line_end":75,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(feature = \"derive\")]","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":2958,"byte_end":2990,"line_start":76,"line_end":76,"column_start":1,"column_end":33}},{"value":"/ # {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":2991,"byte_end":2998,"line_start":77,"line_end":77,"column_start":1,"column_end":8}},{"value":"/ use zeroize::Zeroize;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":2999,"byte_end":3024,"line_start":78,"line_end":78,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":3025,"byte_end":3028,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ // This struct will be zeroized on drop","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":3029,"byte_end":3072,"line_start":80,"line_end":80,"column_start":1,"column_end":44}},{"value":"/ #[derive(Zeroize)]","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":3073,"byte_end":3095,"line_start":81,"line_end":81,"column_start":1,"column_end":23}},{"value":"/ #[zeroize(drop)]","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":3096,"byte_end":3116,"line_start":82,"line_end":82,"column_start":1,"column_end":21}},{"value":"/ struct MyStruct([u8; 32]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":3117,"byte_end":3147,"line_start":83,"line_end":83,"column_start":1,"column_end":31}},{"value":"/ # }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":3148,"byte_end":3155,"line_start":84,"line_end":84,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":3156,"byte_end":3163,"line_start":85,"line_end":85,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":3164,"byte_end":3167,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ Example which does not derive `Drop` (useful for e.g. `Copy` types)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":3168,"byte_end":3239,"line_start":87,"line_end":87,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":3240,"byte_end":3243,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":3244,"byte_end":3251,"line_start":89,"line_end":89,"column_start":1,"column_end":8}},{"value":"/ #[cfg(feature = \"derive\")]","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":3252,"byte_end":3282,"line_start":90,"line_end":90,"column_start":1,"column_end":31}},{"value":"/ # {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":3283,"byte_end":3290,"line_start":91,"line_end":91,"column_start":1,"column_end":8}},{"value":"/ use zeroize::Zeroize;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":3291,"byte_end":3316,"line_start":92,"line_end":92,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":3317,"byte_end":3320,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ // This struct will *NOT* be zeroized on drop","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":3321,"byte_end":3370,"line_start":94,"line_end":94,"column_start":1,"column_end":50}},{"value":"/ #[derive(Copy, Clone, Zeroize)]","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":3371,"byte_end":3406,"line_start":95,"line_end":95,"column_start":1,"column_end":36}},{"value":"/ struct MyStruct([u8; 32]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":3407,"byte_end":3437,"line_start":96,"line_end":96,"column_start":1,"column_end":31}},{"value":"/ # }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":3438,"byte_end":3445,"line_start":97,"line_end":97,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":3446,"byte_end":3453,"line_start":98,"line_end":98,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":3454,"byte_end":3457,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ ## `Zeroizing<Z>`: wrapper for zeroizing arbitrary values on drop","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":3458,"byte_end":3527,"line_start":100,"line_end":100,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":3528,"byte_end":3531,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ `Zeroizing<Z: Zeroize>` is a generic wrapper type that impls `Deref`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":3532,"byte_end":3604,"line_start":102,"line_end":102,"column_start":1,"column_end":73}},{"value":"/ and `DerefMut`, allowing access to an inner value of type `Z`, and also","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":3605,"byte_end":3680,"line_start":103,"line_end":103,"column_start":1,"column_end":76}},{"value":"/ impls a `Drop` handler which calls `zeroize()` on its contents:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":3681,"byte_end":3748,"line_start":104,"line_end":104,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":3749,"byte_end":3752,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":3753,"byte_end":3760,"line_start":106,"line_end":106,"column_start":1,"column_end":8}},{"value":"/ use zeroize::Zeroizing;","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":3761,"byte_end":3788,"line_start":107,"line_end":107,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":3789,"byte_end":3792,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":3793,"byte_end":3808,"line_start":109,"line_end":109,"column_start":1,"column_end":16}},{"value":"/     let mut secret = Zeroizing::new([0u8; 5]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":3809,"byte_end":3859,"line_start":110,"line_end":110,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":3860,"byte_end":3863,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/     // Set the air shield password","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":3864,"byte_end":3902,"line_start":112,"line_end":112,"column_start":1,"column_end":39}},{"value":"/     // Protip (again): don't embed secrets in your source code.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":3903,"byte_end":3970,"line_start":113,"line_end":113,"column_start":1,"column_end":68}},{"value":"/     secret.copy_from_slice(&[1, 2, 3, 4, 5]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":3971,"byte_end":4020,"line_start":114,"line_end":114,"column_start":1,"column_end":50}},{"value":"/     assert_eq!(secret.as_ref(), &[1, 2, 3, 4, 5]);","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":4021,"byte_end":4075,"line_start":115,"line_end":115,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":4076,"byte_end":4079,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/     // The contents of `secret` will be automatically zeroized on drop","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":4080,"byte_end":4154,"line_start":117,"line_end":117,"column_start":1,"column_end":75}},{"value":"/ }","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":4155,"byte_end":4160,"line_start":118,"line_end":118,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":4161,"byte_end":4168,"line_start":119,"line_end":119,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":4169,"byte_end":4172,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ ## What guarantees does this crate provide?","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":4173,"byte_end":4220,"line_start":121,"line_end":121,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":4221,"byte_end":4224,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ This crate guarantees the following:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":4225,"byte_end":4265,"line_start":123,"line_end":123,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":4266,"byte_end":4269,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ 1. The zeroing operation can't be \"optimized away\" by the compiler.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":4270,"byte_end":4341,"line_start":125,"line_end":125,"column_start":1,"column_end":72}},{"value":"/ 2. All subsequent reads to memory will see \"zeroized\" values.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":4342,"byte_end":4407,"line_start":126,"line_end":126,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":4408,"byte_end":4411,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ LLVM's volatile semantics ensure #1 is true.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":4412,"byte_end":4460,"line_start":128,"line_end":128,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":4461,"byte_end":4464,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ Additionally, thanks to work by the [Unsafe Code Guidelines Working Group],","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":4465,"byte_end":4544,"line_start":130,"line_end":130,"column_start":1,"column_end":80}},{"value":"/ we can now fairly confidently say #2 is true as well. Previously there were","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":4545,"byte_end":4624,"line_start":131,"line_end":131,"column_start":1,"column_end":80}},{"value":"/ worries that the approach used by this crate (mixing volatile and","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":4625,"byte_end":4694,"line_start":132,"line_end":132,"column_start":1,"column_end":70}},{"value":"/ non-volatile accesses) was undefined behavior due to language contained","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":4695,"byte_end":4770,"line_start":133,"line_end":133,"column_start":1,"column_end":76}},{"value":"/ in the documentation for `write_volatile`, however after some discussion","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":4771,"byte_end":4847,"line_start":134,"line_end":134,"column_start":1,"column_end":77}},{"value":"/ [these remarks have been removed] and the specific usage pattern in this","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":4848,"byte_end":4924,"line_start":135,"line_end":135,"column_start":1,"column_end":77}},{"value":"/ crate is considered to be well-defined.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":4925,"byte_end":4968,"line_start":136,"line_end":136,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":4969,"byte_end":4972,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ Additionally this crate leverages [compiler_fence] from","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":4973,"byte_end":5032,"line_start":138,"line_end":138,"column_start":1,"column_end":60}},{"value":"/ [core::sync::atomic] with the strictest ordering ([Ordering::SeqCst])","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":5033,"byte_end":5106,"line_start":139,"line_end":139,"column_start":1,"column_end":74}},{"value":"/ as a precaution to help ensure reads are not reordered before memory has","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":5107,"byte_end":5183,"line_start":140,"line_end":140,"column_start":1,"column_end":77}},{"value":"/ been zeroed.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":5184,"byte_end":5200,"line_start":141,"line_end":141,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":5201,"byte_end":5204,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ All of that said, there is still potential for microarchitectural attacks","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":5205,"byte_end":5282,"line_start":143,"line_end":143,"column_start":1,"column_end":78}},{"value":"/ (ala Spectre/Meltdown) to leak \"zeroized\" secrets through covert channels.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":5283,"byte_end":5361,"line_start":144,"line_end":144,"column_start":1,"column_end":79}},{"value":"/ This crate makes no guarantees that zeroized values cannot be leaked","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":5362,"byte_end":5434,"line_start":145,"line_end":145,"column_start":1,"column_end":73}},{"value":"/ through such channels, as they represent flaws in the underlying hardware.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":5435,"byte_end":5513,"line_start":146,"line_end":146,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":5514,"byte_end":5517,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"/ ## Stack/Heap Zeroing Notes","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":5518,"byte_end":5549,"line_start":148,"line_end":148,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":5550,"byte_end":5553,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ This crate can be used to zero values from either the stack or the heap.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":5554,"byte_end":5630,"line_start":150,"line_end":150,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":5631,"byte_end":5634,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ However, be aware several operations in Rust can unintentionally leave","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":5635,"byte_end":5709,"line_start":152,"line_end":152,"column_start":1,"column_end":75}},{"value":"/ copies of data in memory. This includes but is not limited to:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":5710,"byte_end":5776,"line_start":153,"line_end":153,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":5777,"byte_end":5780,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ - Moves and `Copy`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":5781,"byte_end":5803,"line_start":155,"line_end":155,"column_start":1,"column_end":23}},{"value":"/ - Heap reallocation when using `Vec` and `String`","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":5804,"byte_end":5857,"line_start":156,"line_end":156,"column_start":1,"column_end":54}},{"value":"/ - Borrowers of a reference making copies of the data","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":5858,"byte_end":5914,"line_start":157,"line_end":157,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":5915,"byte_end":5918,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ [`Pin`][pin] can be leveraged in conjunction with this crate to ensure","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":5919,"byte_end":5993,"line_start":159,"line_end":159,"column_start":1,"column_end":75}},{"value":"/ data kept on the stack isn't moved.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":5994,"byte_end":6033,"line_start":160,"line_end":160,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":6034,"byte_end":6037,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ The `Zeroize` impls for `Vec` and `String` zeroize the entire capacity of","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":6038,"byte_end":6115,"line_start":162,"line_end":162,"column_start":1,"column_end":78}},{"value":"/ their backing buffer, but cannot guarantee copies of the data were not","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":6116,"byte_end":6190,"line_start":163,"line_end":163,"column_start":1,"column_end":75}},{"value":"/ previously made by buffer reallocation. It's therefore important when","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":6191,"byte_end":6264,"line_start":164,"line_end":164,"column_start":1,"column_end":74}},{"value":"/ attempting to zeroize such buffers to initialize them to the correct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":6265,"byte_end":6337,"line_start":165,"line_end":165,"column_start":1,"column_end":73}},{"value":"/ capacity, and take care to prevent subsequent reallocation.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":6338,"byte_end":6401,"line_start":166,"line_end":166,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":6402,"byte_end":6405,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ The `secrecy` crate provides higher-level abstractions for eliminating","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":6406,"byte_end":6480,"line_start":168,"line_end":168,"column_start":1,"column_end":75}},{"value":"/ usage patterns which can cause reallocations:","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":6481,"byte_end":6530,"line_start":169,"line_end":169,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":6531,"byte_end":6534,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ <https://crates.io/crates/secrecy>","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":6535,"byte_end":6573,"line_start":171,"line_end":171,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":6574,"byte_end":6577,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ ## What about: clearing registers, mlock, mprotect, etc?","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":6578,"byte_end":6638,"line_start":173,"line_end":173,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":6639,"byte_end":6642,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ This crate is focused on providing simple, unobtrusive support for reliably","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":6643,"byte_end":6722,"line_start":175,"line_end":175,"column_start":1,"column_end":80}},{"value":"/ zeroing memory using the best approach possible on stable Rust.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":6723,"byte_end":6790,"line_start":176,"line_end":176,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":6791,"byte_end":6794,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ Clearing registers is a difficult problem that can't easily be solved by","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":6795,"byte_end":6871,"line_start":178,"line_end":178,"column_start":1,"column_end":77}},{"value":"/ something like a crate, and requires either inline ASM or rustc support.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":6872,"byte_end":6948,"line_start":179,"line_end":179,"column_start":1,"column_end":77}},{"value":"/ See <https://github.com/rust-lang/rust/issues/17046> for background on","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":6949,"byte_end":7023,"line_start":180,"line_end":180,"column_start":1,"column_end":75}},{"value":"/ this particular problem.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":7024,"byte_end":7052,"line_start":181,"line_end":181,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":7053,"byte_end":7056,"line_start":182,"line_end":182,"column_start":1,"column_end":4}},{"value":"/ Other memory protection mechanisms are interesting and useful, but often","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":7057,"byte_end":7133,"line_start":183,"line_end":183,"column_start":1,"column_end":77}},{"value":"/ overkill (e.g. defending against RAM scraping or attackers with swap access).","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":7134,"byte_end":7215,"line_start":184,"line_end":184,"column_start":1,"column_end":82}},{"value":"/ In as much as there may be merit to these approaches, there are also many","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":7216,"byte_end":7293,"line_start":185,"line_end":185,"column_start":1,"column_end":78}},{"value":"/ other crates that already implement more sophisticated memory protections.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":7294,"byte_end":7372,"line_start":186,"line_end":186,"column_start":1,"column_end":79}},{"value":"/ Such protections are explicitly out-of-scope for this crate.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":7373,"byte_end":7437,"line_start":187,"line_end":187,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":7438,"byte_end":7441,"line_start":188,"line_end":188,"column_start":1,"column_end":4}},{"value":"/ Zeroing memory is [good cryptographic hygiene] and this crate seeks to promote","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":7442,"byte_end":7524,"line_start":189,"line_end":189,"column_start":1,"column_end":83}},{"value":"/ it in the most unobtrusive manner possible. This includes omitting complex","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":7525,"byte_end":7603,"line_start":190,"line_end":190,"column_start":1,"column_end":79}},{"value":"/ `unsafe` memory protection systems and just trying to make the best memory","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":7604,"byte_end":7682,"line_start":191,"line_end":191,"column_start":1,"column_end":79}},{"value":"/ zeroing crate available.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":7683,"byte_end":7711,"line_start":192,"line_end":192,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":7712,"byte_end":7715,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ [Zeroize]: https://docs.rs/zeroize/latest/zeroize/trait.Zeroize.html","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":7716,"byte_end":7788,"line_start":194,"line_end":194,"column_start":1,"column_end":73}},{"value":"/ [Zeroing memory securely is hard]: http://www.daemonology.net/blog/2014-09-04-how-to-zero-a-buffer.html","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":7789,"byte_end":7896,"line_start":195,"line_end":195,"column_start":1,"column_end":108}},{"value":"/ [Vec::clear()]: https://doc.rust-lang.org/std/vec/struct.Vec.html#method.clear","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":7897,"byte_end":7979,"line_start":196,"line_end":196,"column_start":1,"column_end":83}},{"value":"/ [String::clear()]: https://doc.rust-lang.org/std/string/struct.String.html#method.clear","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":7980,"byte_end":8071,"line_start":197,"line_end":197,"column_start":1,"column_end":92}},{"value":"/ [DefaultIsZeroes]: https://docs.rs/zeroize/latest/zeroize/trait.DefaultIsZeroes.html","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":8072,"byte_end":8160,"line_start":198,"line_end":198,"column_start":1,"column_end":89}},{"value":"/ [Default]: https://doc.rust-lang.org/std/default/trait.Default.html","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":8161,"byte_end":8232,"line_start":199,"line_end":199,"column_start":1,"column_end":72}},{"value":"/ [core::ptr::write_volatile]: https://doc.rust-lang.org/core/ptr/fn.write_volatile.html","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":8233,"byte_end":8323,"line_start":200,"line_end":200,"column_start":1,"column_end":91}},{"value":"/ [Unsafe Code Guidelines Working Group]: https://github.com/rust-lang/unsafe-code-guidelines","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":8324,"byte_end":8419,"line_start":201,"line_end":201,"column_start":1,"column_end":96}},{"value":"/ [these remarks have been removed]: https://github.com/rust-lang/rust/pull/60972","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":8420,"byte_end":8503,"line_start":202,"line_end":202,"column_start":1,"column_end":84}},{"value":"/ [core::sync::atomic]: https://doc.rust-lang.org/stable/core/sync/atomic/index.html","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":8504,"byte_end":8590,"line_start":203,"line_end":203,"column_start":1,"column_end":87}},{"value":"/ [Ordering::SeqCst]: https://doc.rust-lang.org/std/sync/atomic/enum.Ordering.html#variant.SeqCst","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":8591,"byte_end":8690,"line_start":204,"line_end":204,"column_start":1,"column_end":100}},{"value":"/ [compiler_fence]: https://doc.rust-lang.org/stable/core/sync/atomic/fn.compiler_fence.html","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":8691,"byte_end":8785,"line_start":205,"line_end":205,"column_start":1,"column_end":95}},{"value":"/ [pin]: https://doc.rust-lang.org/std/pin/struct.Pin.html","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":8786,"byte_end":8846,"line_start":206,"line_end":206,"column_start":1,"column_end":61}},{"value":"/ [good cryptographic hygiene]: https://github.com/veorq/cryptocoding#clean-memory-of-secret-data","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":8847,"byte_end":8946,"line_start":207,"line_end":207,"column_start":1,"column_end":100}},{"value":"no_std","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":8948,"byte_end":8958,"line_start":209,"line_end":209,"column_start":1,"column_end":11}},{"value":"warn(missing_docs, rust_2018_idioms, unused_qualifications)","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":9055,"byte_end":9118,"line_start":212,"line_end":212,"column_start":1,"column_end":64}}]},{"kind":"Trait","id":{"krate":0,"index":41},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":9580,"byte_end":9587,"line_start":231,"line_end":231,"column_start":11,"column_end":18},"name":"Zeroize","qualname":"::Zeroize","value":"Zeroize","parent":null,"children":[{"krate":0,"index":42}],"decl_id":null,"docs":" Trait for securely erasing types from memory\n","sig":null,"attributes":[{"value":"/ Trait for securely erasing types from memory","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":9521,"byte_end":9569,"line_start":230,"line_end":230,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":9748,"byte_end":9755,"line_start":234,"line_end":234,"column_start":8,"column_end":15},"name":"zeroize","qualname":"::Zeroize::zeroize","value":"pub fn zeroize(&mut Self)","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Zero out this object from memory using Rust intrinsics which ensure the\n zeroization operation is not \"optimized away\" by the compiler.\n","sig":null,"attributes":[{"value":"/ Zero out this object from memory using Rust intrinsics which ensure the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":9594,"byte_end":9669,"line_start":232,"line_end":232,"column_start":5,"column_end":80}},{"value":"/ zeroization operation is not \"optimized away\" by the compiler.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":9674,"byte_end":9740,"line_start":233,"line_end":233,"column_start":5,"column_end":71}}]},{"kind":"Trait","id":{"krate":0,"index":43},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":9858,"byte_end":9873,"line_start":238,"line_end":238,"column_start":11,"column_end":26},"name":"DefaultIsZeroes","qualname":"::DefaultIsZeroes","value":"DefaultIsZeroes: Copy + Default + Sized","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for types whose `Default` is the desired zeroization result\n","sig":null,"attributes":[{"value":"/ Marker trait for types whose `Default` is the desired zeroization result","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":9771,"byte_end":9847,"line_start":237,"line_end":237,"column_start":1,"column_end":77}}]},{"kind":"Trait","id":{"krate":0,"index":67},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":16296,"byte_end":16306,"line_start":430,"line_end":430,"column_start":11,"column_end":21},"name":"TryZeroize","qualname":"::TryZeroize","value":"TryZeroize","parent":null,"children":[{"krate":0,"index":68}],"decl_id":null,"docs":" Fallible trait for representing cases where zeroization may or may not be\n possible.","sig":null,"attributes":[{"value":"/ Fallible trait for representing cases where zeroization may or may not be","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":16043,"byte_end":16120,"line_start":425,"line_end":425,"column_start":1,"column_end":78}},{"value":"/ possible.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":16121,"byte_end":16134,"line_start":426,"line_end":426,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":16135,"byte_end":16138,"line_start":427,"line_end":427,"column_start":1,"column_end":4}},{"value":"/ This is primarily useful for scenarios like reference counted data, where","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":16139,"byte_end":16216,"line_start":428,"line_end":428,"column_start":1,"column_end":78}},{"value":"/ zeroization is only possible when the last reference is dropped.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":16217,"byte_end":16285,"line_start":429,"line_end":429,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":16498,"byte_end":16509,"line_start":435,"line_end":435,"column_start":8,"column_end":19},"name":"try_zeroize","qualname":"::TryZeroize::try_zeroize","value":"pub fn try_zeroize(&mut Self) -> bool","parent":{"krate":0,"index":67},"children":[],"decl_id":null,"docs":" Try to zero out this object from memory using Rust intrinsics which\n ensure the zeroization operation is not \"optimized away\" by the\n compiler.\n","sig":null,"attributes":[{"value":"/ Try to zero out this object from memory using Rust intrinsics which","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":16313,"byte_end":16384,"line_start":431,"line_end":431,"column_start":5,"column_end":76}},{"value":"/ ensure the zeroization operation is not \"optimized away\" by the","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":16389,"byte_end":16456,"line_start":432,"line_end":432,"column_start":5,"column_end":72}},{"value":"/ compiler.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":16461,"byte_end":16474,"line_start":433,"line_end":433,"column_start":5,"column_end":18}},{"value":"must_use","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":16479,"byte_end":16490,"line_start":434,"line_end":434,"column_start":5,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":371},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":16709,"byte_end":16718,"line_start":441,"line_end":441,"column_start":12,"column_end":21},"name":"Zeroizing","qualname":"::Zeroizing","value":"","parent":null,"children":[],"decl_id":null,"docs":" `Zeroizing` is a a wrapper for any `Z: Zeroize` type which implements a\n `Drop` handler which zeroizes dropped values.\n","sig":null,"attributes":[{"value":"/ `Zeroizing` is a a wrapper for any `Z: Zeroize` type which implements a","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":16533,"byte_end":16608,"line_start":438,"line_end":438,"column_start":1,"column_end":76}},{"value":"/ `Drop` handler which zeroizes dropped values.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":16609,"byte_end":16658,"line_start":439,"line_end":439,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":16901,"byte_end":16904,"line_start":449,"line_end":449,"column_start":12,"column_end":15},"name":"new","qualname":"<Zeroizing<Z>>::new","value":"pub fn new(Z) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Move value inside a `Zeroizing` wrapper which ensures it will be\n zeroized when it's dropped.\n","sig":null,"attributes":[{"value":"/ Move value inside a `Zeroizing` wrapper which ensures it will be","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":16785,"byte_end":16853,"line_start":447,"line_end":447,"column_start":5,"column_end":73}},{"value":"/ zeroized when it's dropped.","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":16858,"byte_end":16889,"line_start":448,"line_end":448,"column_start":5,"column_end":36}}]}],"impls":[{"id":3,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":9922,"byte_end":9923,"line_start":240,"line_end":240,"column_start":21,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":46}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":11081,"byte_end":11088,"line_start":283,"line_end":283,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":52}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":11242,"byte_end":11248,"line_start":294,"line_end":294,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":55}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":13857,"byte_end":13860,"line_start":361,"line_end":361,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":61}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":15630,"byte_end":15633,"line_start":406,"line_end":406,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":64}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":15949,"byte_end":15955,"line_start":419,"line_end":419,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":16744,"byte_end":16753,"line_start":443,"line_end":443,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":71}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":16975,"byte_end":16984,"line_start":454,"line_end":454,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":74}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":17109,"byte_end":17118,"line_start":463,"line_end":463,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":77},{"krate":0,"index":78}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":17247,"byte_end":17256,"line_start":474,"line_end":474,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":81}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":17373,"byte_end":17382,"line_start":483,"line_end":483,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":84}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":17490,"byte_end":17499,"line_start":492,"line_end":492,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":87}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":9875,"byte_end":9879,"line_start":238,"line_end":238,"column_start":28,"column_end":32},"kind":"SuperTrait","from":{"krate":1,"index":2859},"to":{"krate":0,"index":43}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":9882,"byte_end":9889,"line_start":238,"line_end":238,"column_start":35,"column_end":42},"kind":"SuperTrait","from":{"krate":1,"index":2827},"to":{"krate":0,"index":43}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":9892,"byte_end":9897,"line_start":238,"line_end":238,"column_start":45,"column_end":50},"kind":"SuperTrait","from":{"krate":1,"index":2854},"to":{"krate":0,"index":43}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":9922,"byte_end":9923,"line_start":240,"line_end":240,"column_start":21,"column_end":22},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":45},"to":{"krate":0,"index":41}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":11081,"byte_end":11088,"line_start":283,"line_end":283,"column_start":25,"column_end":32},"kind":{"Impl":{"id":20}},"from":{"krate":1,"index":9668},"to":{"krate":0,"index":41}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":11242,"byte_end":11248,"line_start":294,"line_end":294,"column_start":21,"column_end":27},"kind":{"Impl":{"id":21}},"from":{"krate":1,"index":39951},"to":{"krate":0,"index":41}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":13857,"byte_end":13860,"line_start":361,"line_end":361,"column_start":21,"column_end":24},"kind":{"Impl":{"id":22}},"from":{"krate":4,"index":6780},"to":{"krate":0,"index":41}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":15630,"byte_end":15633,"line_start":406,"line_end":406,"column_start":21,"column_end":24},"kind":{"Impl":{"id":23}},"from":{"krate":4,"index":196},"to":{"krate":0,"index":41}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":15949,"byte_end":15955,"line_start":419,"line_end":419,"column_start":18,"column_end":24},"kind":{"Impl":{"id":24}},"from":{"krate":4,"index":7293},"to":{"krate":0,"index":41}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":16744,"byte_end":16753,"line_start":443,"line_end":443,"column_start":9,"column_end":18},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":371},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":16975,"byte_end":16984,"line_start":454,"line_end":454,"column_start":21,"column_end":30},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":371},"to":{"krate":1,"index":2755}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":17109,"byte_end":17118,"line_start":463,"line_end":463,"column_start":24,"column_end":33},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":371},"to":{"krate":1,"index":3060}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":17247,"byte_end":17256,"line_start":474,"line_end":474,"column_start":27,"column_end":36},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":371},"to":{"krate":1,"index":3073}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":17373,"byte_end":17382,"line_start":483,"line_end":483,"column_start":21,"column_end":30},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":371},"to":{"krate":0,"index":41}},{"span":{"file_name":"/home/denis/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.3.0/src/lib.rs","byte_start":17490,"byte_end":17499,"line_start":492,"line_end":492,"column_start":18,"column_end":27},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":371},"to":{"krate":1,"index":3084}}]}